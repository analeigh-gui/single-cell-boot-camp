---
title: "8. Enrichment Analysis"
execute:
  warning: false
  message: false
format:
  html:
    embed-resources: true
---

```{r}
#| echo: false

# Load RData
load("chapter7.RData")
```

```{r}
# libraries for this chapter
library(tidyverse)
library(Seurat)
library(data.table)
library(org.Hs.eg.db)
library(clusterProfiler)
library(AnnotationDbi)
library(enrichplot)
library(biomaRt)
```

Enrichment analysis is a common method used in bioinformatics to identify overrepresented biological terms or functions within a set of genes or proteins. It helps us understand which functional categories are significantly associated with a group of genes, such as DEGs.

Gene Ontology (GO) terms provide a standardized vocabulary for describing gene function and relationships. They are organized into three main categories:

-   **Molecular Function (MF):** Describes the specific molecular activities performed by gene products (proteins). Examples include enzyme activity, receptor binding, and transporter activity.

-   **Cellular Component (CC):** Represents the location or compartment where gene products are active within a cell. Examples include nucleus, mitochondrion, and plasma membrane.

-   **Biological Process (BP):** Describes pathways and larger processes made up of the activities of multiple gene products. Examples include cell cycle, immune response, and metabolic processes.

The **`clusterProfiler`** R package provides various methods for functional enrichment analysis. It allows to analyze and visualize functional profiles based on gene sets, such as DEGs. By using this package, we can explore which GO terms are enriched in the gene list and gain insights into the underlying biological processes.

Weâ€™ll be working with DEGs from CD4+ T cells from the previous chapter as an example.

## 1. Get Entrez ID

`clusterProfiler` prefers the input of Entrez ID. We can use `biomaRt` package to convert the gene symbol into Entrez ID.

The **`biomaRt`** package provides an interface to query and retrieve information from various biological databases, including Ensembl.

First, we need to connect to the Ensembl database using the **`useMart()`** function. Specify that we want to retrieve information from the dataset of Homo sapiens (human).

::: callout-tip
You can use the **`listAttributes()`** function to explore what data is stored in the Ensembl database.
:::

```{r}
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
```

Once we have the necessary information, we can use the **`getBM()`** function to retrieve Entrez IDs for a list of gene symbols, providing the gene symbols from your matrix `cd4t.deg` as input.

```{r}
results <- getBM(attributes = c("entrezgene_id", "external_gene_name"),
                 filters = "external_gene_name", 
                 values = rownames(cd4t.deg),
                 mart = mart)
```

`attributes` Attributes to retrieve. We want to have the gene symbols and Entrez ID in the results.

`filters` Which filter to use to filter the dataset.

`values` A list of features as a query.

`mart` Object of class Mart, created with the `useMart` function.

The output of `getBM()` is a table with two columns: one for gene symbols and another for corresponding Entrez IDs.

```{r}
results %>% head
```

Not every gene has the Entrez ID. We keep only genes that have a matched Entrez ID.

```{r}
cd4t.deg <- cd4t.deg %>% 
  rownames_to_column("gene") %>% 
  left_join(., results, by = c("gene" = "external_gene_name")) %>% 
  filter(!is.na(entrezgene_id)) %>% 
  filter(!is.na(p_val_adj))
```

## 2. GO over-representation analysis

Over Representation Analysis (ORA) is a widely used approach to determine whether known biological functions or processes are over-represented (= enriched) in an experimentally-derived gene list, e.g. a list of differentially expressed genes (DEGs).

We use the `enrichGO` to get the enriched GO terms in the list of DEGs.

```{r}
cd4t.deg.sig <- dplyr::filter(cd4t.deg, p_val_adj < 0.05, 
                               abs(avg_log2FC) > 1)

# get the enriched GO terms
ego <- enrichGO(gene = cd4t.deg.sig$entrezgene_id,
                keyType = "ENTREZID",
                OrgDb = org.Hs.eg.db,
                ont = "BP",
                pAdjustMethod = "BH",
                pvalueCutoff = 0.01,
                qvalueCutoff = 0.05,
                readable = TRUE)
```

`gene` A list of Entrez gene id.

`keyType` The keytype of input gene.

`OrgDb` The database with detailed information about the species.

`org.Hs.eg.db` Specify the database of Homo Sapien.

`ont` One of "BP" (biological process), "MF" (molecular function), and "CC" (cellular component) subontologies, or "ALL" for all three.

`pAdjustMethod` Multiple testing method for p-value.

`pvalueCutoff` Adjusted pvalue cutoff on enrichment tests to report.

`qvalueCutoff` Tge qvalue cutoff on enrichment tests to report as significant.

`readable` Whether mapping gene ID to gene Name.

Let's convert the `ego` object into a data frame and visualize the results in a bar plot.

```{r}
ego.table <- as.data.frame(ego)
```

`ego.table` contains several columns. The two that are interesting are below:

`GeneRatio` The gene counts from the input list found in the gene set of a GO term / gene counts of input list.

`BgRatio` The gene counts of a geneset / size of all of the unique genes in the collection of genesets.

We can filter the GO terms related to T cells and plot them in a bar plot.

```{r fig.height=10}
filter(ego, Description %in% grep("T cell", ego.table$Description, ignore.case = T, value = T)) %>% 
barplot(showCategory = 18)
```

## 3. Gene set enrichment analysis - Optional

All genes can be used as input of gene set enrichment analysis (GSEA). We first rank the genes based on `stat`.

```{r}
# order genes
cd4t.deg <- cd4t.deg[order(-cd4t.deg$avg_log2FC), ]

gene_list <- cd4t.deg$avg_log2FC
names(gene_list) <- cd4t.deg$entrezgene_id
```

We use `gseGO` to perform GSEA and convert the results into a dataframe.

```{r}
# perform GSEA
gse <- gseGO(gene_list,
             keyType = "ENTREZID",
             ont = "BP",
             OrgDb = "org.Hs.eg.db")

# convert the results into a dataframe
gse.table <- as.data.frame(gse) %>% 
  mutate(geneSetID = 1:dim(.)[1])
```

`enrichmentScore` The enrichment score (ES) represents the degree to which a set S is over-represented at the top or bottom of the ranked list L.

We can look at the enrichment of some GO terms in GSEA plot.

```{r}
gseaplot2(gse, geneSetID = c(149, 173))
```

Along the x axis is the ranked genes. Each of the vertical line is one of those genes that are found in this gene set. Along the running line, you can see a lot of genes running together and it falls out when the gene becomes more sparse in the list.

```{r}
#| echo: false

# save the seurat object
save(filtered, cd4t.bulk, cd4t.deg, gse, gse.table, cd4t.deg.sig, ego, ego.table, file = "chapter8.RData")
```
