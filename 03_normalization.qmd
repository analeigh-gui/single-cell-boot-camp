---
title: "Chapter 3 Normalization"
execute:
  warning: false
  message: false
format:
  html:
    embed-resources: true
---

```{r}
#| echo: false

# Load RData
load("data/chapter2.RData")
```

```{r}
# libraries for this chapter
library(tidyverse)
library(Seurat)
library(data.table)
```

# 1. Normalization

We will perform normalization on UMI counts using `LogNormalize`.

`LogNormalize` divides the UMI counts of a gene in a cell into the total UMI counts in that cell. After division, we take the natural log.

```{r}
filtered <- NormalizeData(filtered, 
                          normalization.method = "LogNormalize")
```

::: callout-important
## Question

Where are the normalized counts stored?
:::

::: {.callout-tip collapse="T"}
## Answer

The normalized counts are stored in the `data` layer of assay `RNA`.

```{r}
filtered[["RNA"]]@layers$data %>% 
  .[1:10, 1:10]
```
:::

After normalization, we scale the data and identify highly variable features. Data scaling is to remove the bias from high expressors which is required by PCA calculation.

```{r}
# Scale data
filtered <- ScaleData(filtered, features = rownames(filtered))

# Find variable features
filtered <- FindVariableFeatures(filtered)
```

# 2. PCA

The PCA is calculated with the highly variable features. Each PC can explain some variance of the data. The first PC can explain the most variance, and gradually decrease through the PCs. We can visualize the PCs by Elbow plot.

```{r}
filtered <- RunPCA(filtered, npcs = 50, verbose = FALSE)
```

```{r}
ElbowPlot(filtered, ndims = 50)
```

# 3. UMAP visualization

Only the top PCs will be used for UMAP. Elbow plot can help to select the top PCs. We used the PCs until where the elbow is to calculate UMAP.

For this dataset, we use the first top 20 PCs.

```{r}
filtered <- RunUMAP(filtered, 
                    reduction = "pca", 
                    dims = 1:20)

filtered <- FindNeighbors(filtered, 
                          reduction = "pca", 
                          dims = 1:20)

# Plot UMAP                             
DimPlot(filtered, group.by = "Sample_Name")   
```

## Exercise 1

Change the number of PCs and see how the UMAP changes.

Tips: You can change the PC numbers by `dims` argument in `RunUMAP`.

## Exercise 2

`Dimplot` has many arguments to control the plots.

1.  Search `Dimplot` in the "Help" tab and read the documentation.
2.  Change `group.by` to `split.by`. What is the difference?

```{r}
p1 <- DimPlot(filtered, group.by = "Sample_Name") + NoLegend()
p2 <- DimPlot(filtered, split.by = "Sample_Name")  + NoLegend()

p1|p2
```

```{r}
#| echo: false

# save the seurat object
save(filtered, file = "data/chapter3.RData")
```
