---
title: "3. Normalization, Scale Data and Find Highly Variable Features"
execute:
  warning: false
  message: false
format:
  html:
    embed-resources: true
---

```{r}
#| echo: false

# Load RData
load("chapter2.RData")
```

```{r}
# libraries for this chapter
library(tidyverse)
library(Seurat)
library(data.table)
```

## 1. Normalization

After removing the low-quality cells during the quality control (QC) step, the next crucial step is data normalization. Normalization ensures that we can compare gene expression values across cells. A common function to normalize mRNA UMI counts is `LogNormalize`.

For each gene in a cell, we divide its UMI counts by the total UMI counts in that same cell. After this division, we take the natural logarithm of the resulting value.

By applying `LogNormalize`, we create a normalized expression matrix that allows us to perform meaningful analyses and comparisons.

```{r}
filtered <- NormalizeData(filtered, 
                          normalization.method = "LogNormalize")
```

::: callout-important
## Question

Where are the normalized counts stored?
:::

::: {.callout-tip collapse="T"}
## Answer

The below example code outputs a list of two objects.

```{r}
#| eval: false
filtered@assays[["RNA"]]@layers
```

-   *counts* (Unnormalized Data)

This object contains the raw UMI counts for each gene in each cell. The counts are represented as integers (whole numbers). These unnormalized counts reflect the original data without any adjustments.

-   *data* (Normalized Data)

The “data” object contains the normalized expression values for each gene in each cell. Unlike the raw counts, these normalized values are represented as decimals (floating-point numbers).
:::

## 2. Scale data

Normalizing the data ensures that expression values are comparable across cells. Data scaling is the next step. Its purpose is to remove bias introduced by highly expressed genes. This step is necessary for principal component analysis (PCA) calculations.

```{r}
# Scale data
filtered <- ScaleData(filtered, features = rownames(filtered))
```

::: callout-important
## Question

Where are the scaled counts stored?
:::

::: {.callout-tip collapse="T"}
## Answer

The scaled counts are stored in the `scale.data` layer of assay `RNA`.

```{r}
#| eval: false
filtered@assays[["RNA"]]@layers[["scale.data"]]
```
:::

## 3. Find variable features

We assume that the biological differences between cells are reflected in the genes that exhibit variability across the entire cell population. To focus on these variable genes, we select only the top variable features (genes) for further analysis. By default, the function `FindVariableFeatures` identifies and returns the top 2000 variable genes.

You can choose to run `FindVariableFeatures` first and then proceed with `ScaleData`. The sequence of these two functions does not impact the overall analysis.

```{r}
# Find variable features
filtered <- FindVariableFeatures(filtered)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(filtered), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(filtered) + theme(legend.position = "none")
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
```

```{r}
#| echo: false

# save the seurat object
save(filtered, file = "chapter3.RData")
```
