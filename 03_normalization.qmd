---
title: "Chapter 3 Normalization, Scale data and Find highly variable features"
execute:
  warning: false
  message: false
format:
  html:
    embed-resources: true
---

```{r}
#| echo: false

# Load RData
load("data/chapter2.RData")
```

```{r}
# libraries for this chapter
library(tidyverse)
library(Seurat)
library(data.table)
```

# 1. Normalization

After filtering out the low quality cells in the QC step, we need to normalize the data to be able to compare expression values. We will perform normalization on UMI counts using `LogNormalize`.

`LogNormalize` divides the UMI counts of a gene in a cell to the total UMI counts in that cell. After division, we take the natural log.

```{r}
filtered <- NormalizeData(filtered, 
                          normalization.method = "LogNormalize")
```

::: callout-important
## Question

Where are the normalized counts stored?
:::

::: {.callout-tip collapse="T"}
## Answer

The normalized counts are stored in the `data` layer of assay `RNA`.

```{r}
#| eval: false
filtered@assays[["RNA"]]@layers[["data"]]
```
:::

# 2. Scale data

After normalization, we scale the data Data scaling is to remove the bias from highly expressed genes which is required by PCA calculation.

```{r}
# Scale data
filtered <- ScaleData(filtered, features = rownames(filtered))
```

::: callout-important
## Question

Where are the scaled counts stored?
:::

::: {.callout-tip collapse="T"}
## Answer

The scaled counts are stored in the `scale.data` layer of assay `RNA`.

```{r}
#| eval: false
filtered@assays[["RNA"]]@layers[["scale.data"]]
```
:::

# 3. Find variable features

One assumes the biological difference is captured by the genes that express variably across the cell population. To focus on these variable genes and speed up calculation, only the top variable features are included in the downstream analysis. By default, the function `FindVariableFeatures` returns the top 2000 variable genes.

Note: You can run `FindVariableFeatures` first and then `ScaleData`. The sequence of two functions does not matter.

```{r}
# Find variable features
filtered <- FindVariableFeatures(filtered)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(filtered), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(filtered) + theme(legend.position = "none")
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
```

# 4. PCA and UMAP

The PCA is calculated with the highly variable features defined by the previous step. Each PC can explain certain degree of variance of the data. The first PC can explain the most variance. The amount of variance explained gradually decreases through the PCs. We can visualize the PCs and their associated variance by Elbow plot.

```{r}
filtered <- RunPCA(filtered, npcs = 50, verbose = FALSE)
```

```{r}
ElbowPlot(filtered, ndims = 50)
```

The Elbow plot gets its name from the shape of the plot as it looks like an Elbow. The top PCs explains a high degree of variance in the data. These variance is usually biologically relevant. The further down the PCs, the lower the biological variance a PC has. More importantly, the higher chance the technical variance a PC has.

What we want is to include as much biological variance as possible, while limits the amount of technical variance. An arbitrary way of choosing the number of PCs is to look at where the elbow is. In this example, we will use the first top 20 PCs for the downstream analysis to calculate UMAP.

```{r}
filtered <- RunUMAP(filtered, 
                    reduction = "pca", 
                    dims = 1:20)

filtered <- FindNeighbors(filtered, 
                          reduction = "pca", 
                          dims = 1:20)

# Plot UMAP                             
DimPlot(filtered, group.by = "Sample_Name")   
```

## Exercise 1

Change the number of PCs and see how the UMAP changes.

Tips: You can change the PC numbers by `dims` argument in `RunUMAP`.

## Exercise 2

`Dimplot` has many arguments to control the plots.

1.  Search `Dimplot` in the "Help" tab and read the documentation.
2.  Change `group.by` to `split.by`. What is the difference?

```{r fig.width=10}
p1 <- DimPlot(filtered, group.by = "Sample_Name") + NoLegend()
p2 <- DimPlot(filtered, split.by = "Sample_Name")  + NoLegend()

p1|p2
```

```{r}
#| echo: false

# save the seurat object
save(filtered, file = "data/chapter3.RData")
```
