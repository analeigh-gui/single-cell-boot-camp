{
  "hash": "458d1aae52d5f281f86917d9f21b4445",
  "result": {
    "markdown": "---\ntitle: \"Precourse Preparation - R\"\nexecute:\n  warning: false\n  message: false\n---\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-1_ea13b0cabcb175a36836f87ed21bf084'}\n\n```{.r .cell-code}\n# libraries for this chapter\nlibrary(readxl)\nlibrary(data.table)\nlibrary(tidyverse)\nlibrary(Seurat)\n```\n:::\n\n\n# Introduction\n\nThis tutorial will help you to understand the basic concepts in R. It will cover the following topics:\n\n1.  Working with data frames\n2.  Tidyverse library\n3.  Understanding the Seurat object\n\nNote: If you are familiar with R and tidyverse package, you can skip this chapter.\n\n# 1. Data frame\n\n## 1.1 What is a data frame?\n\nData frame is a data structure in R that stores values of any type. You can think of it as a table with columns and rows storing the data as in the below example.\n\n![](prerequisite_figures/data_frame.png)\n\nCredit: https://www.geeksforgeeks.org/r-data-frames/\n\nOften in data science language, the columns are variables, the rows are observations and each entry in a table is a value.\n\nSome of the most common examples of input files that can be loaded into R as data frames are spreadsheets, TSVs, or CSVs files. TSV and CSV stands for tab-separated or coma-separated values.\n\nAnother way to view data frame is as a list of vectors of the same length. The vector can be defined as a type of data structure that contains elements of the same type. Below you can find example on how to create the table presented in the beyond figer from vectors.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-2_e828e2e6e9460eaab734e4b5848da929'}\n\n```{.r .cell-code}\n## Define vectors which will be used to create the data frame\n\n## Vector of names\nName <- c(\"Avrey Bradley\",\"John Holland\",\"Jonas Jerebko\",\"Jordan Midkey\",\"Terry Rozier\",\"Jared Sullinger\",\"Evan Turner\")\n\n## Vector of team's names\nTeam <- c(\"Boston Celtics\", \"Boston Celtics\",\"Boston Celtics\",\"Boston Celtics\",\"Boston Celtics\",\"Boston Celtics\",\"Boston Celtics\")\n\n## Vector of values\nNumber <- c(0.0,30.0,8.0,NaN,12.0,7.0,11.0)\n\n## Vector of positions\nPosition <- c(\"PG\",\"SG\",\"PF\",\"PF\",\"PG\",\"C\",\"SG\")\n\n## Vector of age\nAge <- c(25.0,27.0,29.0,21.0,22.0,NaN,27.0)\n\n## Create a data frame from vectors\ndata.frame(Name,Team,Number,Position,Age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             Name           Team Number Position Age\n1   Avrey Bradley Boston Celtics      0       PG  25\n2    John Holland Boston Celtics     30       SG  27\n3   Jonas Jerebko Boston Celtics      8       PF  29\n4   Jordan Midkey Boston Celtics    NaN       PF  21\n5    Terry Rozier Boston Celtics     12       PG  22\n6 Jared Sullinger Boston Celtics      7        C NaN\n7     Evan Turner Boston Celtics     11       SG  27\n```\n:::\n:::\n\n\n## 1.2 Convenient version of data frame: \"Tibble\"\n\nThe `tibble` is a package that manipulates data frames. The tibble type of table looks like a data frame but has some advantages over using regular data frames.\n\nFor example, while loading data as a classical data frame, the spaces in names are converted to periods or \"x\" before numeric columns is added. While using tibbles, the input names and data types remain unchanged. In this tutorial, we will work mainly with tibble data frame type.\n\n## 1.3 Working with data frames in R\n\n### 1.3.1 Example data\n\nIn this part of tutorial, we will work on table downloaded from supplementary data of Salcher, Stefan et al. (doi:10.1016/j.ccell.2022.10.008). The table contains the metadata of patients for which samples were processed on different single-cell platforms.\n\n### 1.3.2 Loading data\n\nDepending on the input format, there are different dedicated libraries to load data into R. Here we start from excel spreadsheet and use function from `readxl` library. The `readxl` library is part of `tidyverse` package that will be covered in second chapter of this tutorial.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-3_e1dda88f81f0b8a9a5670780abbeb2f8'}\n\n```{.r .cell-code}\ndf_example <- read_excel(\"data/precourse_preparation_data/mmc4.xlsx\", skip = 2)\n```\n:::\n\n\n**NOTE:**\n\n1.  The two first rows in the original table are empty, so we skip them when loading.\n\n2.  One of the columns in excel spreadsheet is empty (column N). The R assign automatically the default name `..1` to that column and keep it within the data frame.\n\n3.  All the missing entries in rows will be filled with \"NA\" values automatically.\n\n### 1.3.3 Viewing the content\n\nThere are different ways to view the content of data frame. You can directly click on `df_example` to display the content.\n\nThe `str` function lists directly in the console: the type of data (tibble), dimensions (322x18), columns with first values displayed and type of values.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-4_7e0444c22b1e352579347d90ce755daa'}\n\n```{.r .cell-code}\nstr(df_example)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [322 × 18] (S3: tbl_df/tbl/data.frame)\n $ ...1                    : num [1:322] 0 1 2 3 4 5 6 7 8 9 ...\n $ study                   : chr [1:322] \"Adams_Kaminski_2020\" \"Adams_Kaminski_2020\" \"Adams_Kaminski_2020\" \"Adams_Kaminski_2020\" ...\n $ dataset                 : chr [1:322] \"Adams_Kaminski_2020\" \"Adams_Kaminski_2020\" \"Adams_Kaminski_2020\" \"Adams_Kaminski_2020\" ...\n $ patient                 : chr [1:322] \"Adams_Kaminski_2020_001C\" \"Adams_Kaminski_2020_002C\" \"Adams_Kaminski_2020_003C\" \"Adams_Kaminski_2020_8CO\" ...\n $ uicc_stage              : chr [1:322] NA NA NA NA ...\n $ tumor_stage             : chr [1:322] NA NA NA NA ...\n $ sex                     : chr [1:322] \"male\" \"female\" \"female\" \"male\" ...\n $ ever_smoker             : chr [1:322] \"no\" \"no\" \"no\" \"yes\" ...\n $ driver_genes            : chr [1:322] NA NA NA NA ...\n $ condition               : chr [1:322] \"non-cancer\" \"non-cancer\" \"non-cancer\" \"COPD\" ...\n $ age                     : num [1:322] 22 25 67 65 66 49 62 57 66 20 ...\n $ platform                : chr [1:322] \"10x\" \"10x\" \"10x\" \"10x\" ...\n $ platform_fine           : chr [1:322] \"10x_3p_v2\" \"10x_3p_v2\" \"10x_3p_v2\" \"10x_3p_v2\" ...\n $ ...14                   : logi [1:322] NA NA NA NA NA NA ...\n $ tissue: normal          : num [1:322] 1 1 1 1 1 1 1 1 1 1 ...\n $ tissue: normal_adjacent : num [1:322] 0 0 0 0 0 0 0 0 0 0 ...\n $ tissue: tumor_primary   : num [1:322] 0 0 0 0 0 0 0 0 0 0 ...\n $ tissue: tumor_metastasis: num [1:322] 0 0 0 0 0 0 0 0 0 0 ...\n```\n:::\n:::\n\n\n### 1.3.4 Extracting information\n\nExtracting data from a data frame means to access its rows or columns. First let's list all columns available in the data frame.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-5_f6ee30ec309c278be3760bc8ae893b26'}\n\n```{.r .cell-code}\ncolnames(df_example)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"...1\"                     \"study\"                   \n [3] \"dataset\"                  \"patient\"                 \n [5] \"uicc_stage\"               \"tumor_stage\"             \n [7] \"sex\"                      \"ever_smoker\"             \n [9] \"driver_genes\"             \"condition\"               \n[11] \"age\"                      \"platform\"                \n[13] \"platform_fine\"            \"...14\"                   \n[15] \"tissue: normal\"           \"tissue: normal_adjacent\" \n[17] \"tissue: tumor_primary\"    \"tissue: tumor_metastasis\"\n```\n:::\n:::\n\n\nTo extract values from single column of the data frame, different options can be used.\n\n-   Using `$` operator and providing the column name\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-6_c580b05bc296e604fe440300f976dad2'}\n\n```{.r .cell-code}\ndf_example$study %>% head # head allows to display first few elements \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Adams_Kaminski_2020\" \"Adams_Kaminski_2020\" \"Adams_Kaminski_2020\"\n[4] \"Adams_Kaminski_2020\" \"Adams_Kaminski_2020\" \"Adams_Kaminski_2020\"\n```\n:::\n:::\n\n\n-   Using `[[]]` and providing column number (index)\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-7_524438c71d5af2083ae1949475ce1042'}\n\n```{.r .cell-code}\ndf_example[[2]] %>% head() # disply the first 6 elements in column 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Adams_Kaminski_2020\" \"Adams_Kaminski_2020\" \"Adams_Kaminski_2020\"\n[4] \"Adams_Kaminski_2020\" \"Adams_Kaminski_2020\" \"Adams_Kaminski_2020\"\n```\n:::\n:::\n\n\n-   Using column name\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-8_a3e92cd93c816deed320c81631bb8e0d'}\n\n```{.r .cell-code}\ndf_example[, \"study\"] %>% head\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 1\n  study              \n  <chr>              \n1 Adams_Kaminski_2020\n2 Adams_Kaminski_2020\n3 Adams_Kaminski_2020\n4 Adams_Kaminski_2020\n5 Adams_Kaminski_2020\n6 Adams_Kaminski_2020\n```\n:::\n:::\n\n\nTo extract multiple columns or rows at the same time, the following rules apply:\n\n![](prerequisite_figures/df_rows_columns.jpg)\n\n-   Extract rows range, include all columns.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-9_2ef6e0d877d6e09115b48ba992fbdeab'}\n\n```{.r .cell-code}\ndf_example[c(2:4), ] #display rows from 2-4 and all columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 18\n   ...1 study           dataset patient uicc_stage tumor_stage sex   ever_smoker\n  <dbl> <chr>           <chr>   <chr>   <chr>      <chr>       <chr> <chr>      \n1     1 Adams_Kaminski… Adams_… Adams_… <NA>       <NA>        fema… no         \n2     2 Adams_Kaminski… Adams_… Adams_… <NA>       <NA>        fema… no         \n3     3 Adams_Kaminski… Adams_… Adams_… <NA>       <NA>        male  yes        \n# ℹ 10 more variables: driver_genes <chr>, condition <chr>, age <dbl>,\n#   platform <chr>, platform_fine <chr>, ...14 <lgl>, `tissue: normal` <dbl>,\n#   `tissue: normal_adjacent` <dbl>, `tissue: tumor_primary` <dbl>,\n#   `tissue: tumor_metastasis` <dbl>\n```\n:::\n:::\n\n\n-   Extract rows, include all columns.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-10_0614fb883348d08fe51cbfab1aa0af86'}\n\n```{.r .cell-code}\ndf_example[c(2,4),] #display rows 2 AND 4 and all columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 18\n   ...1 study           dataset patient uicc_stage tumor_stage sex   ever_smoker\n  <dbl> <chr>           <chr>   <chr>   <chr>      <chr>       <chr> <chr>      \n1     1 Adams_Kaminski… Adams_… Adams_… <NA>       <NA>        fema… no         \n2     3 Adams_Kaminski… Adams_… Adams_… <NA>       <NA>        male  yes        \n# ℹ 10 more variables: driver_genes <chr>, condition <chr>, age <dbl>,\n#   platform <chr>, platform_fine <chr>, ...14 <lgl>, `tissue: normal` <dbl>,\n#   `tissue: normal_adjacent` <dbl>, `tissue: tumor_primary` <dbl>,\n#   `tissue: tumor_metastasis` <dbl>\n```\n:::\n:::\n\n\n-   Extract columns range, include all rows.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-11_d62fdc2c2a2950cae01781e53edb3d4c'}\n\n```{.r .cell-code}\ndf_example[, c(2:4)] %>% head #display columns from 2-4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  study               dataset             patient                 \n  <chr>               <chr>               <chr>                   \n1 Adams_Kaminski_2020 Adams_Kaminski_2020 Adams_Kaminski_2020_001C\n2 Adams_Kaminski_2020 Adams_Kaminski_2020 Adams_Kaminski_2020_002C\n3 Adams_Kaminski_2020 Adams_Kaminski_2020 Adams_Kaminski_2020_003C\n4 Adams_Kaminski_2020 Adams_Kaminski_2020 Adams_Kaminski_2020_8CO \n5 Adams_Kaminski_2020 Adams_Kaminski_2020 Adams_Kaminski_2020_23CO\n6 Adams_Kaminski_2020 Adams_Kaminski_2020 Adams_Kaminski_2020_034C\n```\n:::\n:::\n\n\n-   Extract columns, include all rows.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-12_bc4a45d46fe7ce551602c3d184fc1192'}\n\n```{.r .cell-code}\ndf_example[, c(2,4)] %>% head #display columns 2 AND 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  study               patient                 \n  <chr>               <chr>                   \n1 Adams_Kaminski_2020 Adams_Kaminski_2020_001C\n2 Adams_Kaminski_2020 Adams_Kaminski_2020_002C\n3 Adams_Kaminski_2020 Adams_Kaminski_2020_003C\n4 Adams_Kaminski_2020 Adams_Kaminski_2020_8CO \n5 Adams_Kaminski_2020 Adams_Kaminski_2020_23CO\n6 Adams_Kaminski_2020 Adams_Kaminski_2020_034C\n```\n:::\n:::\n\n\n::: callout-important\n-   **Exercise**\n\nExtract **rows** from 5-10 and **columns** from 3-8.\n:::\n\n::: {.callout-tip collapse=\"T\"}\n-   **Answer**\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-13_9b4fd98df6d03d80066744d742d74026'}\n\n```{.r .cell-code}\ndf_example[c(5:10), c(3,8)]\n```\n:::\n\n:::\n\n### 1.3.4 Modifying information\n\nThe columns or rows can be removed or added to data frame as needed. It is possible to drop specific columns indicating the column indexes.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-14_8abbbe3ec7e33704703e51866caec6ad'}\n\n```{.r .cell-code}\nmodified_df_example <- df_example[, -c(1,2,5)]    # Drop columns 1,2,5\n```\n:::\n\n\nThe same principle apply to excluding the rows\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-15_6121781dba8e687f918c61a6ef1dec7e'}\n\n```{.r .cell-code}\nmodified_df_example <- df_example[-c(1,2,5),]     # Drop rows 1,2,5\n```\n:::\n\n\nWe can remove column with specific names. To drop column, we chose all the columns (called by \"colnames\") except (!=) \"patient\".\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-16_28a054547c702fd185abecf38823445f'}\n\n```{.r .cell-code}\nmodified_df_example <- df_example[ , colnames(df_example) != \"patient\"]    # Drop column \"patient\"\n```\n:::\n\n\nWe can also add columns into data frame. To add new column, use `$` to indicate the column name for a new column as in the example below.\n\nHere we assign the values from already existing column to a new column. The new column is added at the end of the data table.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-17_7c6e0f7e49df345f911c30cf332a027a'}\n\n```{.r .cell-code}\ndf_example$technology_type <- df_example$platform # add new column named \"technology_type\" with values from \"platform\" existing column\n```\n:::\n\n\nThe values from chosen column can be replaced with other values. In example below we search in `df_example` data frame in `technology_type` column for rows that contain \"BD-Rhapsody\" text. For those values we assign \"microwell-based\".\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-18_60089d1e571f25bf78aa04e137e1967d'}\n\n```{.r .cell-code}\ndf_example$technology_type[df_example$technology_type == \"BD-Rhapsody\"] <- \"microwell-based\"\ndf_example$technology_type[df_example$technology_type == \"10x\"] <- \"droplet-based\"\n\ndf_example[,c(\"platform\",\"technology_type\")] %>% head #display columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  platform technology_type\n  <chr>    <chr>          \n1 10x      droplet-based  \n2 10x      droplet-based  \n3 10x      droplet-based  \n4 10x      droplet-based  \n5 10x      droplet-based  \n6 10x      droplet-based  \n```\n:::\n:::\n\n\nThe last useful function to cover in this chapter is `summary()`. The function gives the statistical summary of each of the columns when applied on data frame. It can be applied on slice of data as for example only on one column or chosen columns and rows.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-19_c4ef917e6e31fe73ba8f25ef97f40483'}\n\n```{.r .cell-code}\nsummary(df_example)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      ...1           study             dataset            patient         \n Min.   :  0.00   Length:322         Length:322         Length:322        \n 1st Qu.: 80.25   Class :character   Class :character   Class :character  \n Median :160.50   Mode  :character   Mode  :character   Mode  :character  \n Mean   :160.50                                                           \n 3rd Qu.:240.75                                                           \n Max.   :321.00                                                           \n                                                                          \n  uicc_stage        tumor_stage            sex            ever_smoker       \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n driver_genes        condition              age          platform        \n Length:322         Length:322         Min.   :20.00   Length:322        \n Class :character   Class :character   1st Qu.:56.00   Class :character  \n Mode  :character   Mode  :character   Median :63.00   Mode  :character  \n                                       Mean   :60.73                     \n                                       3rd Qu.:69.00                     \n                                       Max.   :90.00                     \n                                       NA's   :89                        \n platform_fine       ...14         tissue: normal   tissue: normal_adjacent\n Length:322         Mode:logical   Min.   :0.0000   Min.   :0.0000         \n Class :character   NA's:322       1st Qu.:0.0000   1st Qu.:0.0000         \n Mode  :character                  Median :0.0000   Median :0.0000         \n                                   Mean   :0.2267   Mean   :0.3261         \n                                   3rd Qu.:0.0000   3rd Qu.:1.0000         \n                                   Max.   :1.0000   Max.   :1.0000         \n                                                                           \n tissue: tumor_primary tissue: tumor_metastasis technology_type   \n Min.   :0.0000        Min.   :0.0000           Length:322        \n 1st Qu.:0.0000        1st Qu.:0.0000           Class :character  \n Median :1.0000        Median :0.0000           Mode  :character  \n Mean   :0.5497        Mean   :0.1398                             \n 3rd Qu.:1.0000        3rd Qu.:0.0000                             \n Max.   :1.0000        Max.   :1.0000                             \n                                                                  \n```\n:::\n:::\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-20_9479cd665dd21e21d4aa2b8186585765'}\n\n```{.r .cell-code}\nsummary(df_example$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  20.00   56.00   63.00   60.73   69.00   90.00      89 \n```\n:::\n:::\n\n\n# 2. Tidyverse\n\nData often need to be re-shaped, re-arranged, and re-formatted, so that they can be visualized or used in downstream analysis. Throughout this chapter you will learn how to use the tidyverse library to navigate through and adjust the tables you work with.\n\nThe tidyverse is a collection of R packages. The core packages included in tidyverse are `ggplot2`, `tidyr`, `readr`, `dplyr`, `stringr`, `purrr`, and `forcats`. Each of the packages is dedicated to handle different operations. In below graphics, you can find a summary of all packages and their core functionalities.\n\n![](prerequisite_figures/tidyverse_libs_summary_graphics.png)\n\nCredit: https://www.storybench.org/getting-started-with-tidyverse-in-r/\n\nIn this chapter we will cover some of the functions that are going to be used during the course. If you would like to learn more about tidyverse and additional libraries, we encourage you to visit the official website <https://www.tidyverse.org/>.\n\nWhen `tidyverse` is loaded, you will see the list of packages included and loaded with tidyverse.\n\nAfter loading `tidyverse`, the R inform you about conflicting packages. The reason is that there are other packages already loaded by default in R.\n\nPackages consist of a collection of functions related to a particular purpose. Those functions can have naming conflicts with functions from other packages.\n\nThe two functions from `stats` package: `filer` and `lag`, exist as well in tidyverse. After loading tidyverse package, the functions from `stats` package are masked and by default the `tidyverse` functions will be used. If you would like to use `filter()` or `lag()` functions from `stats` package, you should indicate the package name as in example below.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-21_cf33f875ec0291ef63feff7b86e6a8f0'}\n\n```{.r .cell-code}\nstats::filter()\n\n# Function in this example are empty for illustration purposes. To use that function you need to provide arguments inside.\n```\n:::\n\n\nWithout indicating the package name in front of function name, R will use the package that is loaded the most recently in your R session.\n\n## 2.1 Pipe\n\nA pipe `%>%` is a type of operator in `tidyverse`. It takes the output of one function and passes it as the first argument of the next function, allowing us to chain together several steps in R.\n\n![](prerequisite_figures/pipe_tidyverse.png)\n\nCredit: tidyverse.org\n\nThe pipe sends the data on left side of the pipe to be the first argument of the function on the right side of the pipe.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-22_29329a048e664d7c5ea877a1e3004ff2'}\n\n```{.r .cell-code}\n16 %>% sqrt() # is equivalent to sqrt(16)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\nWe can pipe multiple functions together. The operations are performed from the left to the right sequentially.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-23_fddba3200b488731549b6058d09a5fc1'}\n\n```{.r .cell-code}\n16 %>% sqrt() %>% log2() # is equivalent to log2(sqrt(16))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nBelow you can find exercises with more examples of piping mathematical functions in R together.\n\n::: callout-important\n1.  Exercise: What would be the equivalent mathematical expression to below piped sequence of operations?\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-24_b950d7d9e452beed6645e4fdd9839adc'}\n\n```{.r .cell-code}\n26 %>% -22 %>% sqrt() %>% +4\n```\n:::\n\n:::\n\n::: {.callout-tip collapse=\"T\"}\n1.  Answer:\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-25_a32fd6d3cf27a754693c4c4bfe829d32'}\n\n```{.r .cell-code}\nsqrt(26-22) + 4\n```\n:::\n\n:::\n\n::: callout-important\n2.  Exercise: How below mathematical operation can be shown with pipe option?\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-26_b5315033ca27eb201b88efd35c7aaae7'}\n\n```{.r .cell-code}\nsqrt(log2(64)) - 8\n```\n:::\n\n:::\n\n::: {.callout-tip collapse=\"T\"}\n2.  Answer\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-27_151b06b1b379ad3315f415de4131835f'}\n\n```{.r .cell-code}\n64 %>% log2() %>% sqrt() %>% -8\n```\n:::\n\n:::\n\n## 2.2 Example data\n\nIn this chapter we will work on an expression matrix table (gene expression) which is in CSV format. Below is example of how to load the table.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-28_919fdc87e08baf342f8b67d000a5cf44'}\n\n```{.r .cell-code}\nexpMat <- fread(file = \"data/precourse_preparation_data/Demo-WTA-AbSeq.csv\", sep = \",\", header=TRUE)\n\n# file: provide full directory to file\n# sep: indicate separator, in this case coma\n# header = True is indicating to take the first row as a column names\n```\n:::\n\n\nDisplaying first rows and columns of the table gives us a glimpse on what the data contain.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-29_deae1865cfc00d2f46696d1402e850cb'}\n\n```{.r .cell-code}\nexpMat[c(1:5),c(1:5)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         V1 A1BG A1BG.AS1 A1CF A2M\n1:  3261781    0        0    0   0\n2:  9155806    0        0    0   0\n3:  4304661    0        0    0   0\n4:  2216902    0        0    0   0\n5: 13160139    0        0    0   0\n```\n:::\n:::\n\n\nThe gene names are displayed in columns and rows contain information about the cells. The column named V1 hold information about the cell index that is given to each cell in primary analysis.\n\nWe will set the V1 column as row names. In that way all the columns will contain the gene or protein counts.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-30_74b4630ee1cb8540244db4774bf0d04d'}\n\n```{.r .cell-code}\n#use first column as row names\nexpMat <- data.frame(expMat, row.names = 1)\n```\n:::\n\n\nThe same set of above operations can be performed with pipe in one line of code. We read the file and convert first column to row names and save as data frame. The result is assigned to expMat variable by using the arrow.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-31_890e70cc313a0d8c1539ecdd9d85b35f'}\n\n```{.r .cell-code}\n#pipe operations\nexpMat <- fread(file = \"data/precourse_preparation_data/Demo-WTA-AbSeq.csv\", sep = \",\", header=TRUE) %>% \n  data.frame(row.names = 1)\n```\n:::\n\n\n## 2.3 `select()`\n\n**Functionality:** Select only the columns (variables) that you want to see.\n\nImagine you are interested to extract the data only for one gene existing in your dataset. You can use the gene name, for example \"CD4\", to indicate in `select` function which column should be selected.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-32_8ba0a08ed34e0554246d410fc22e90f3'}\n\n```{.r .cell-code}\n# choosing the column of CD4 gene\nexpMat %>% dplyr::select(\"CD4\") -> CD4_column\n```\n:::\n\n\nIn the table we work on, the protein and gene expression information are provided. All the protein markers are labeled with \"pAbO\" abbreviation in addition to marker name. We can **select** all the columns that **contain** pAbO in name and save to new table.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-33_e6867d13e0dafa034992ba27bd728a98'}\n\n```{.r .cell-code}\n#choosing all the columns with AbSeq counts and saving to abseq_data\nexpMat %>% dplyr::select(contains(\"pAbO\")) -> abseq_data\n```\n:::\n\n\nAll the columns that does not contain the \"pAbO\" are representing genes. To create a gene data, we can use the `contains()` function with exclamation mark as in below example.\n\nThe \"!\" is used for negation in R language and is interpreted as \"do not\". Below expression will be interpreted as \"**select** from expMat columns that **do not** **contain** pAbO.\".\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-34_3f422eb22cee98506356c7b9cb1cb383'}\n\n```{.r .cell-code}\n# choosing all columns that does not contain AbSeq counts (mRNA only)\nexpMat %>% dplyr::select(!contains(\"pAbO\")) -> mrna_data\n```\n:::\n\n\n## 2.4 `mutate()`\n\n**Functionality:** Adds new columns or modifies current variables in the dataset.\n\nThe mutate function allows in easy way to add new columns in existing tables. Let's say we want to add column \"measurement_type\" and fill with \"protein expression\" in abseq data table we created in previous step.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-35_fffe6c30fabe60dd0ad7aed973c39d2f'}\n\n```{.r .cell-code}\n#add new column with the same value\nabseq_data %>% mutate(data_modality = \"protein_expression\") -> abseq_data \n```\n:::\n\n\nThe new column will be added at the end of table. We can show the column by selecting the column name.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-36_679623bcd18f060b6aa4014e341e920d'}\n\n```{.r .cell-code}\n#display results\nabseq_data %>% dplyr::select(\"data_modality\") %>% head\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              data_modality\n3261781  protein_expression\n9155806  protein_expression\n4304661  protein_expression\n2216902  protein_expression\n13160139 protein_expression\n11951658 protein_expression\n```\n:::\n:::\n\n\n`mutate()` function can be used in combination with other functions.\n\nIn this example, we will calculate sum of expression count for each cell and store the information in a table. We summarize the counts from all rows and add as a new column. The `rowSums` function is useful for calculating the sum of counts in each row.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-37_4dd353266c42b9b8a5c8799e7849ea05'}\n\n```{.r .cell-code}\nrowSums(mrna_data) -> mRNA_count_sum\n\n#display results\nmRNA_count_sum %>% head\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 3261781  9155806  4304661  2216902 13160139 11951658 \n   35231    34733    33238    31618    31664    30786 \n```\n:::\n:::\n\n\nAfter running `rowSums`, we got for each cell the number of counts. The values can be added in `mrna_data` data table as a new column.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-38_3e074d16244e510cd0f8c027fcbd7cc3'}\n\n```{.r .cell-code}\nmrna_data %>% mutate(counts = mRNA_count_sum) -> mrna_data\nmrna_data %>% dplyr::select(counts) %>% head\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         counts\n3261781   35231\n9155806   34733\n4304661   33238\n2216902   31618\n13160139  31664\n11951658  30786\n```\n:::\n:::\n\n\nThe same result can be generated with option below, where the `rowSums` function is nested inside the mutate function.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-39_0a795d9d0b31de25b95bd0c58734cacc'}\n\n```{.r .cell-code}\nmrna_data %>% mutate(counts = rowSums(mrna_data)) -> mrna_data\n```\n:::\n\n\nNotice that `mrna_data` is given twice in that case as an argument. The `mrna_data` is taken by `mutate` function as first argument and then in `rowSums` function as second argument.\n\nIn the above example we used pipe to direct the `mrna_data` to `mutate()` function as an argument. However the `mrna_data` was not forwarded by pipe to `rowSums`. For that reason we have to type it in the `rowSums` function. By default, the pipe operator forwards data only as first argument to a function. If you want the pipe to forward data as well as second (and next) argument to function you can use a dot.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-40_cfebe3f224a121101d706c48f162d7b0'}\n\n```{.r .cell-code}\nmrna_data %>% mutate(counts = rowSums(.)) -> mrna_data\n```\n:::\n\n\n## 2.5 `summarise()`\n\n**Functionality:** Collapse all rows and returns a one-row summary.\n\nIn the example below, `summarise` function allow us to calculate the max/min, median and mean values for counts.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-41_e5960cb0bc60fcb47abd26ba83637300'}\n\n```{.r .cell-code}\nmrna_data %>% dplyr::summarise(mean = mean(counts),    #mean counts\n                             median = median(counts),    #median counts\n                             max = max(counts),    #maximum count\n                             min = min(counts))   #minimum count\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      mean median    max  min\n1 9142.064   4392 105693 1146\n```\n:::\n:::\n\n\nIn above summary we have the overview of the expression range and how minimum and maximum values of molecules expressed differ. Some of cells will have very low transcriptome size in comparison to others.\n\n## 2.6 `if_else()`\n\nThe `if_else()` function in R is a conditional function. It allows to test the hypothesis and perform actions based on answer.\n\nLet's assume we want to label the cells according to transcriptom size. Based on threshold of counts we give a label of \"low_transcriptome\" or \"high_transcriptome\" for a cell status. We can make assumption that all cells with sum of counts lower then a threthold are low transcriptome cells and remaining cells are categorized as high transcriptome cells.\n\nThe `if_else` function with combination of mutate will help us to achieve the goal.\n\nFirst we need to know what is the structure of `if_else` statement. The first argument of `if_else` function is the hypotheses or the statement. We want to test if the counts for cell is below or above the threshold. Second argument is an action to perform if the statement is true. Third argument is an action to perform when the statement is false.\n\n![](prerequisite_figures/ifelse.jpg)\n\nIn our case, the hypothesis to test is if counts in a cell is below or above a threshold. We can set the condition to have a counts above 2000. If the counts are above the threshold the statement is true. When the statement is true the action is to set the label as \"high_transcriptome\". When the statement is false we set the label as \"low_transciptome\".\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-42_7c83ae2f6daa303e76cc259e8e8f95ab'}\n\n```{.r .cell-code}\nif_else(mrna_data$counts > 2000, \"high_transcriptome\", \"low_transcriptome\") -> cell_status\n```\n:::\n\n\nIn that way we created a `cell_status` string based on counts. We should see `cell_status` that was generated has two labels. To verify if that is the case we can display the unique values of `cell_status`.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-43_8d058c1864e0383d497eb63bdbcc60a5'}\n\n```{.r .cell-code}\nunique(cell_status)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"high_transcriptome\" \"low_transcriptome\" \n```\n:::\n:::\n\n\nIf we would like to add that information as a new column to data table, we can use mutate function as in previous examples.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-44_4f322ca69a49a2214e3b8dd8f4fb1eb0'}\n\n```{.r .cell-code}\n#calcuate and add cell_status to mrna table\nmrna_data %>% mutate(cell_status = if_else(mrna_data[\"counts\"] > 2000, \"high_transcriptome\", \"low_transcriptome\")) -> mrna_data\n\n#display cell status column \nmrna_data %>% dplyr::select(cell_status) %>% head\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                cell_status\n3261781  high_transcriptome\n9155806  high_transcriptome\n4304661  high_transcriptome\n2216902  high_transcriptome\n13160139 high_transcriptome\n11951658 high_transcriptome\n```\n:::\n:::\n\n\n## 2.7 `count()`\n\n**Functionality:** Collapse the rows and counts the number of observations per group of values.\n\nThe `count` function is a quick way to have an overview on number of occurrences. For example, we can use `count()` to see how many cells were categorized as low or high transcriptome cells.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-45_395d9beed9a73bd02ce427f780a96c59'}\n\n```{.r .cell-code}\nmrna_data %>% dplyr::count(cell_status)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         cell_status    n\n1 high_transcriptome 5204\n2  low_transcriptome  597\n```\n:::\n:::\n\n\n## 2.8 `group_by()`\n\n**Functionality**: Take the existing data and group specific variables together for future operations.\n\nThe function takes an existing table and convert it into a grouped table where operations are performed by group.\n\nLet's have a look in the following example and assume that we want to compare the mean and median counts for low and high transcriptome cells. In that case we can group data by cell status and calculate average values for those groups.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-46_d0602aaafa9325156512d6a2e2c1f7cb'}\n\n```{.r .cell-code}\nmrna_data %>% \n  group_by(cell_status) %>% \n  dplyr::summarize(mean = mean(counts),\n            median = median(counts),\n            n = n())  #calculates the total number of observations\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  cell_status          mean median     n\n  <chr>               <dbl>  <dbl> <int>\n1 high_transcriptome 10006.  4684.  5204\n2 low_transcriptome   1611.  1638    597\n```\n:::\n:::\n\n\nIn the above code, we first group cells by cell status, meaning that calculations performed on our data will account for high transcriptome and low transcriptome cells separately. Following code execution, the console displays the mean count, the median count and the total number of cells (`n()`) for low transcriptome and for high transcriptome cells (`group_by(cell_status)`).\n\n## 2.8 `filter()`\n\n**Functionality:** Only retain specific rows of data that meet the specified requirement(s).\n\n`filter` function displays the data values that meet defined condition. For example, we can filter all cells with low transcriptome cell status and retain only high transcriptome cells.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-47_cc4053345d0840a3d2fc30014d350e0d'}\n\n```{.r .cell-code}\nmrna_data %>% filter(cell_status == \"high_transcriptome\") -> signal_cells\n\n#display last column\nsignal_cells %>% dplyr::select(last_col()) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         cell_status\n1 high_transcriptome\n2 high_transcriptome\n3 high_transcriptome\n4 high_transcriptome\n5 high_transcriptome\n6 high_transcriptome\n```\n:::\n:::\n\n\n## 2.9 `rename()`\n\n**Functionality:** Rename a column/variable by name and index.\n\nRename the cell_status variable as SIGNAL_CELLS (notice that the new label goes first in the argument).\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-48_ffca719dd46b4076d622db8c14024e06'}\n\n```{.r .cell-code}\nmrna_data %>% rename(SIGNAL_CELLS = cell_status) -> mrna_data\n\n#display results\nmrna_data %>% dplyr::select(last_col()) %>% head #chose last column from mrna_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               SIGNAL_CELLS\n3261781  high_transcriptome\n9155806  high_transcriptome\n4304661  high_transcriptome\n2216902  high_transcriptome\n13160139 high_transcriptome\n11951658 high_transcriptome\n```\n:::\n:::\n\n\n# 3. Seurat object\n\nSeurat object is a data structure designed for storing single-cell multiomics data and its information. We can think about Seurat object as a box with different sections to keep single-cell data in an organized manner.\n\nIn this chapter we will look at what information we can find in Seurat object and how to access them.\n\n## 3.1 Seurat Object Structure\n\nSeurat object stores information about the single cell multiomics data and the analysis that is performed. As we move through the workflow and make calculations, the results are added to Seurat object and stored in different \"boxes\". Those different \"boxes\" are called **slots**.\n\nLet's load an example Seurat object into R.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-49_a5775d6982f2c9c05ea6224ea15b9687'}\n\n```{.r .cell-code}\nseuratObj <- readRDS(\"data/precourse_preparation_data/seuratObj.rds\")\n```\n:::\n\n\nThe example Seurat object has a mRNA counts table. While Seurat object is generated, the following information are added to Seurat slots by default: assays, meta data, active assay, active identity, project name and version.\n\n![](prerequisite_figures/seurat_slots.jpg){width=\"200\"}\n\nThe remaining Seurat slots highlighted in grey are empty and will be filled with information during the analysis.\n\nYou can open the Seurat object in a separate tab and review its content.\n\n## 3.2 Assays\n\nThe `assays` slot contain different assays loaded into Seurat object. Those can be mRNA expression data or protein expression data. The `assay` slot has additional subslots that store the 'transformation' of the data, including raw counts (`counts` slot), normalized data (`data` slot), and scaled data for dimensional reduction (`scale.data` slot).\n\nThe assays slots can be accessed by function `GetAssayData`. In the example below, we access the `counts` slot.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-50_033d89b8a3b0f8ec34b885dfa229c77a'}\n\n```{.r .cell-code}\n#Seurat object saved before normalization\nGetAssayData(object = seuratObj, slot = \"counts\") %>% \n  .[1:5 , c(\"6660551\",\"2066735\",\"9164959\",\"3709837\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5 x 4 sparse Matrix of class \"dgCMatrix\"\n         6660551 2066735 9164959 3709837\nA1BG           .       1       .       .\nA1BG.AS1       1       .       1       .\nA1CF           .       .       .       .\nA2M            .       .       .       2\nA2M.AS1        .       .       .       .\n```\n:::\n:::\n\n\nWe can perform normalization and store the normalized counts in `data` slot.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-51_da3e5392ac1ef7459338e272fabdb60b'}\n\n```{.r .cell-code}\n#Seurat object saved after normalization\nseuratObj <- NormalizeData(seuratObj)\n\nGetAssayData(object = seuratObj, slot = \"data\") %>% \n  .[1:5 , c(\"6660551\",\"2066735\",\"9164959\",\"3709837\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5 x 4 sparse Matrix of class \"dgCMatrix\"\n          6660551   2066735   9164959   3709837\nA1BG     .        0.3399948 .         .        \nA1BG.AS1 0.330402 .         0.3532289 .        \nA1CF     .        .         .         .        \nA2M      .        .         .         0.6642082\nA2M.AS1  .        .         .         .        \n```\n:::\n:::\n\n\nBy running above example, you can see the raw values in data slot are changed due to LogTransform normalization.\n\nBelow you can find a useful graphics indicating how data are altered in assays slots in Seurat object after applying different functions.\n\n![](prerequisite_figures/seurat_explained_cropped.png){width=\"800\"}\n\nCredit: Lior Pachter https://twitter.com/lpachter/status/1524413513233575936\n\n## 3.3 Meta Data\n\n`meta.data` slot stores information calculated for cells such as number of features and number of counts in each cell.\n\nThe `meta.data` information is stored in a table that can be accessed in Seurat object as below.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-52_0130399063fc6e66d84276081ee45d08'}\n\n```{.r .cell-code}\nseuratObj@meta.data %>% head\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            orig.ident nCount_RNA nFeature_RNA\n3261781  SeuratProject      35231         5823\n9155806  SeuratProject      34733         5943\n4304661  SeuratProject      33238         5480\n2216902  SeuratProject      31618         5573\n13160139 SeuratProject      31664         5592\n11951658 SeuratProject      30786         5457\n```\n:::\n:::\n\n\nTo view list of all available meta.data in Seurat object we can view the column names from the data table.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-53_199e4a7b5aecab4bc0e62f01163fff5b'}\n\n```{.r .cell-code}\nseuratObj@meta.data %>% colnames()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"orig.ident\"   \"nCount_RNA\"   \"nFeature_RNA\"\n```\n:::\n:::\n\n\nIt is possible to add new information to `meta.data`. It can be any information about the cells such as experimental batch or sub-population identity.\n\n\n::: {.cell hash='precourse_preparation_R_cache/html/unnamed-chunk-54_acbf5752b8305d8de51d4b3a46e9fdda'}\n\n```{.r .cell-code}\n#add meta data\nseuratObj <- AddMetaData(seuratObj, #indicate object\n            \"experiment_1\", #metadata to be added\n            \"batch\") #column name for metadata\n\n#display results\nseuratObj@meta.data %>% head\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            orig.ident nCount_RNA nFeature_RNA        batch\n3261781  SeuratProject      35231         5823 experiment_1\n9155806  SeuratProject      34733         5943 experiment_1\n4304661  SeuratProject      33238         5480 experiment_1\n2216902  SeuratProject      31618         5573 experiment_1\n13160139 SeuratProject      31664         5592 experiment_1\n11951658 SeuratProject      30786         5457 experiment_1\n```\n:::\n:::\n\n\n# 4. References and Resources\n\nFor more details, please consult:\n\n<https://www.geeksforgeeks.org/r-data-frames/>\n\n<https://bookdown.org/yih_huynh/Guide-to-R-Book/tidyverse.html>\n\n<https://silviacanelon.com/talk/2020-tour-of-the-tidyverse/>\n\n<https://oliviergimenez.github.io/intro_tidyverse/>\n\n<https://jhudatascience.org/tidyversecourse/get-data.html>\n\n<https://www.analyticsvidhya.com/blog/2019/05/beginner-guide-tidyverse-most-powerful-collection-r-packages-data-science/>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}