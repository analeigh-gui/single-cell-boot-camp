{
  "hash": "f87f7b6017410d1bd92a618a9965cd79",
  "result": {
    "markdown": "---\ntitle: \"Chapter 2 Quality Control\"\nexecute:\n  warning: false\n  message: false\n---\n\n::: {.cell hash='02_quality_control_cache/html/unnamed-chunk-1_091de106ebc53e84827f5287e000e8d2'}\n\n```{.r .cell-code}\n# libraries for this chapter\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(data.table)\nlibrary(celldex)\nlibrary(SingleR)\nlibrary(ExperimentHub)\n```\n:::\n\n\n# Load RData\n\nLoad the RData which contain all files from previous chapter.\n\n\n::: {.cell hash='02_quality_control_cache/html/unnamed-chunk-2_153dbc3b96f673d82cdd9ab008bc011c'}\n\n```{.r .cell-code}\nload(\"data/intermediate_data/chapter1.RData\")\n```\n:::\n\n\n# 1. Metrics for quality control\n\nWhen creating a Seurat object, Seurat automatically creates some metadata for each cell. This information is stored in the `meta.data`.\n\n\n::: {.cell hash='02_quality_control_cache/html/unnamed-chunk-3_fcf74bf5d0f6c36fc301409c791f0b24'}\n\n```{.r .cell-code}\nrna@meta.data %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        orig.ident nCount_RNA nFeature_RNA     Sample_Tag Sample_Name\n74   SeuratProject       2389         1135 SampleTag01_hs       naive\n391  SeuratProject       5252         2088 SampleTag02_hs     treated\n440  SeuratProject       1205          630 SampleTag01_hs       naive\n1222 SeuratProject       2390         1152 SampleTag01_hs       naive\n2690 SeuratProject       1533          810 SampleTag01_hs       naive\n5077 SeuratProject       2083         1249 SampleTag02_hs     treated\n```\n:::\n:::\n\n\n`orig.ident` Sample identity or sample name. By default, it is \"SeuratProject\".\n\n`nCount_RNA` UMI counts per cell.\n\n`nFeature_RNA` Gene counts per cell.\n\n`Sample_Tag` The cell is from which sample tag.\n\n`Sample_Name` The cell is from which sample.\n\nQuality control is to filter out cell labels that are of low quality, e.g. dead cells.\n\nThe quality control of WTA relies on three **quality metrics**: `nCount_RNA`, `nFeature_RNA`, and mitochondrial percentage (percentage of UMIs of mitochondrial genes in a cell).\n\nLow quality cells have the below characteristics:\n\n1.  Low number of UMIs (`nCount_RNA` is low).\n2.  Low number of genes (`nFeature_RNA` is low).\n3.  High mitochondrial percentage.\n\nIn practice, we look at the distribution of quality metrics in cell population and set appropriate cutoff to filter out low quality cells.\n\n::: callout-tip\nThe targeted assay profiles a subset of genes, which are usually the genes of interest. Mitochondrial genes are often not included in the gene panel of targeted assay.\n\nSo, the quality control of targeted assays will not look at mitochondrial percentage, but look at `nCount_RNA` and `nFeature_RNA`.\n:::\n\n# 2. Calculate mitochondrial percentage per cell\n\nSeurat has a convenient function, `PercentageFeatureSet`, to calculate the percentage of UMIs of mitochondrial genes in a cell.\n\n\n::: {.cell hash='02_quality_control_cache/html/unnamed-chunk-4_38a2d0f05e9ba683dea18ccfcea3953d'}\n\n```{.r .cell-code}\nrna[[\"percent.mt\"]] <- PercentageFeatureSet(rna, pattern = \"^MT.\")\n```\n:::\n\n\n::: callout-tip\nThe mitochondrial genes typically include \"MT\" in their gene symbol. However, the pattern could be different, MT. or MT- or mt-. You may need to adjust the pattern to correctly calculate the percentage.\n:::\n\nThe `PercentageFeatureSet` takes in a `pattern` argument and searches through all feature names in the dataset for that pattern.\n\nSince we are looking for mitochondrial genes, we are searching for any gene names that begin with the pattern `^MT.`. For each cell, the function takes the sum of counts across all genes belonging to \"\\^MT.\", and then divides it by the total counts for all genes. The result is stored in the `percent.mt` of `meta.data` .\n\n\n::: {.cell hash='02_quality_control_cache/html/unnamed-chunk-5_7e795d42ee827908d94c3ac32badea7e'}\n\n```{.r .cell-code}\nrna@meta.data %>% head\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        orig.ident nCount_RNA nFeature_RNA     Sample_Tag Sample_Name\n74   SeuratProject       2389         1135 SampleTag01_hs       naive\n391  SeuratProject       5252         2088 SampleTag02_hs     treated\n440  SeuratProject       1205          630 SampleTag01_hs       naive\n1222 SeuratProject       2390         1152 SampleTag01_hs       naive\n2690 SeuratProject       1533          810 SampleTag01_hs       naive\n5077 SeuratProject       2083         1249 SampleTag02_hs     treated\n     percent.mt\n74    11.720385\n391   11.367098\n440   19.751037\n1222  20.041841\n2690  17.090672\n5077   7.633221\n```\n:::\n:::\n\n\n# 3. Assessing the quality metrics\n\nWe will assess the quality metrics, `nCount_RNA`, `nFeature_RNA`, `percent.mt`, and decide on which cells are of low quality and should be removed from the analysis.\n\n## 3.1 `nCount_RNA` UMI counts per cell\n\nWe look at `nCount_RNA` for the sum of UMI counts per cell.\n\n\n::: {.cell hash='02_quality_control_cache/html/unnamed-chunk-6_49ea1583705b34c92d02c93e10a50106'}\n\n```{.r .cell-code}\nrna@meta.data %>% \n  ggplot(aes(color=Sample_Name, x=nCount_RNA, fill= Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  theme_classic() +\n  ylab(\"Cell density\") +\n  ggtitle(\"nCount_RNA\")\n```\n\n::: {.cell-output-display}\n![](02_quality_control_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## 3.2 `nFeature_RNA` Gene counts per cell\n\nWe look at `nFeature_RNA` for sum of gene counts per cell. The majority of cells have gene counts more than 300.\n\n\n::: {.cell hash='02_quality_control_cache/html/unnamed-chunk-7_5fb9123c3150e6a1135ac05e2afaddd6'}\n\n```{.r .cell-code}\nrna@meta.data %>% \n  ggplot(aes(color=Sample_Name, x=nFeature_RNA, fill= Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  theme_classic() +\n  ylab(\"Cell density\") +\n  ggtitle(\"nFeature_RNA\")\n```\n\n::: {.cell-output-display}\n![](02_quality_control_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## 3.3 `percent.mt` Mitochondrial percentage per cell\n\nWe look at `percent.mt` for mitochondrial percentage per cell. The majority of cells have mitochondrial percentage below 25%.\n\n\n::: {.cell hash='02_quality_control_cache/html/unnamed-chunk-8_fd51175ab01c1a4440bf83f8db2c9b8c'}\n\n```{.r .cell-code}\nrna@meta.data %>% \n  ggplot(aes(color=Sample_Name, x=percent.mt, fill=Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  theme_classic() +\n  ggtitle(\"percent.mt\")\n```\n\n::: {.cell-output-display}\n![](02_quality_control_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## 3.4 Combine metrics to come up filtering threshold\n\nWe can combine the metrics to decide the filtering threshold.\n\n\n::: {.cell hash='02_quality_control_cache/html/unnamed-chunk-9_17e8d76b53c10421a3c41345cd9937b3'}\n\n```{.r .cell-code}\nrna@meta.data %>% \n  ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) + \n  geom_point() + \n  scale_colour_gradient(low = \"gray90\", high = \"black\") +\n  stat_smooth(method=lm) +\n  scale_x_log10() + \n  scale_y_log10() + \n  theme_classic() +\n  geom_vline(xintercept = 500, colour = \"red\") +\n  geom_hline(yintercept = 300, colour = \"red\") +\n  facet_wrap(~Sample_Name) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n```\n\n::: {.cell-output-display}\n![](02_quality_control_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThe data is fitted with a linear regression line. We expect when UMI counts increase, gene counts also increase.\n\nUpper right quadrant: Cells with high number of genes and UMI counts. We generally consider these cells to be good-quality cells.\n\nBottom right quadrant: Cells with low number of genes and UMI counts. We generally consider these cells are low-quality cells.\n\nDarker cells: Cells with high mitochondrial percentage. Many of these cells have low gene counts. This could indicate damaged/dying cells whose cytoplasmic mRNA leaked out through a broken membrane, so only mRNA located in the mitochondria is still conserved.\n\n# 4. Filter\n\n## 4.1 Filter on cells\n\nBased on the quality metrics, we use the following thresholds to filter out low quality cells:\n\n`nCount_RNA` \\> 500\n\n`nFeature_RNA` \\> 300\n\n`nFeature_RNA` \\< 5000\n\n`percent.mt` \\< 25%\n\n\n::: {.cell hash='02_quality_control_cache/html/unnamed-chunk-10_0b5203e8dc2816504068ecf0dd70a48d'}\n\n```{.r .cell-code}\nfiltered.rna <- subset(x = rna, \n                       subset = (nCount_RNA >= 500) & \n                         (nFeature_RNA >= 300) &\n                         (nFeature_RNA <= 5000) &\n                         (percent.mt < 25))\n```\n:::\n\n\n## 4.2 Filter on genes\n\nSome of the genes have zero counts or are only expressed in a handful of cells. These genes don't bring much information, and they reduce the average expression of a cell.\n\nWe keep only genes that are expressed in **five or more cells**. `GetAssayData` is a convenient command to get information from the Seurat object. We use `GetAssayData` to extract the UMI counts.\n\n\n::: {.cell hash='02_quality_control_cache/html/unnamed-chunk-11_687d07f5a766fab380db170be81888a9'}\n\n```{.r .cell-code}\n# Extract counts\ncounts <- GetAssayData(object = filtered.rna, slot = \"counts\")\n\n# Output a logical matrix specifying for each gene whether or not there are more than zero counts per cell\nnonzero <- counts > 0\n\n# Sum all TRUE values and return TRUE if equal or more than 5 TRUE values per gene\nkeep_genes <- Matrix::rowSums(nonzero) >= 5\n\n# Only keep those genes\nfiltered_counts <- counts[keep_genes, ]\n\n# Create Seurat object\nfiltered.rna <- CreateSeuratObject(filtered_counts, meta.data = filtered.rna@meta.data)\n```\n:::\n\n\n::: callout-tip\nTargeted assay contains genes expressing in the profiling cells, so \"Filter on genes\" is usually not performed on targeted assays.\n:::\n\n# 5. Re-assess metrics\n\nAfter filtering, we look back to the metrics to ensure the filtered data matches expectations and is suitable for downstream analysis. We plot all QC metrics using the filtered data.\n\n\n::: {.cell hash='02_quality_control_cache/html/unnamed-chunk-12_f4b6d5320566c95767e5b8a62d2dc47a'}\n\n```{.r .cell-code}\nfiltered.rna@meta.data %>% \n  ggplot(aes(color=Sample_Name, x=nCount_RNA, fill= Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  theme_classic() +\n  ylab(\"Cell density\") +\n  ggtitle(\"nCount_RNA\")\n```\n\n::: {.cell-output-display}\n![](02_quality_control_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='02_quality_control_cache/html/unnamed-chunk-13_4cafec964757b66f230a949caabbe488'}\n\n```{.r .cell-code}\nfiltered.rna@meta.data %>% \n  ggplot(aes(color=Sample_Name, x=nFeature_RNA, fill= Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  theme_classic() +\n  ylab(\"Cell density\") +\n  ggtitle(\"nFeature_RNA\")\n```\n\n::: {.cell-output-display}\n![](02_quality_control_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='02_quality_control_cache/html/unnamed-chunk-14_d3c8d1051e9979f05db1011c0d8d2452'}\n\n```{.r .cell-code}\nfiltered.rna@meta.data %>% \n  ggplot(aes(color=Sample_Name, x=percent.mt, fill=Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  theme_classic() +\n  ggtitle(\"percent.mt\")\n```\n\n::: {.cell-output-display}\n![](02_quality_control_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='02_quality_control_cache/html/unnamed-chunk-15_909aadb9e5fbec42faf8ee9af11bdd02'}\n\n```{.r .cell-code}\nfiltered.rna@meta.data %>% \n  ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) + \n  geom_point() + \n  scale_colour_gradient(low = \"gray90\", high = \"black\") +\n  stat_smooth(method=lm) +\n  scale_x_log10() + \n  scale_y_log10() + \n  theme_classic() +\n  geom_vline(xintercept = 500, color = \"red\") +\n  geom_hline(yintercept = 300, color = \"red\") +\n  facet_wrap(~Sample_Name)\n```\n\n::: {.cell-output-display}\n![](02_quality_control_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nCells that are considered in low quality in the bottom right quadrant are removed. We can also compare the cell number before and after filtering. The majority of cells are kept.\n\nBefore filtering:\n\n\n::: {.cell hash='02_quality_control_cache/html/unnamed-chunk-16_92a45e45cdc1a98b053899fbe9d81fda'}\n\n```{.r .cell-code}\nrna@meta.data %>% \n  group_by(Sample_Name) %>% \n  dplyr::summarise(cell_number = length(Sample_Name))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  Sample_Name cell_number\n  <chr>             <int>\n1 naive              1901\n2 treated            2446\n```\n:::\n:::\n\n\nAfter filtering:\n\n\n::: {.cell hash='02_quality_control_cache/html/unnamed-chunk-17_9364d8290d819942c5ce39186e2303dc'}\n\n```{.r .cell-code}\nfiltered.rna@meta.data %>% \n  group_by(Sample_Name) %>% \n  dplyr::summarise(cell_number = length(Sample_Name))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  Sample_Name cell_number\n  <chr>             <int>\n1 naive              1850\n2 treated            2310\n```\n:::\n:::\n\n\n# 5. Save\n\nSave the files into RData for documentation. We do not need all files to continue the workshop, so we use `save` to save part of the files in RData.\n\n\n::: {.cell hash='02_quality_control_cache/html/unnamed-chunk-18_c5fe76e91e6fda469508aaccd8d1f4ac'}\n\n```{.r .cell-code}\n# save(filtered.rna, expMat, file = \"data/intermediate_data/chapter2.RData\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}