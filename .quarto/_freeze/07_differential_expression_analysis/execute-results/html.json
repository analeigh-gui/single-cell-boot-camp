{
  "hash": "b078536aa4cb9980c218518aca39e0ca",
  "result": {
    "markdown": "---\ntitle: \"Chapter 7 Differential Expression Analysis\"\nexecute:\n  warning: false\n  message: false\n---\n\n::: {.cell hash='07_differential_expression_analysis_cache/html/unnamed-chunk-1_05ee03ed5acafd1b250ca65b4cabbda8'}\n\n```{.r .cell-code}\n# libraries for this chapter\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(data.table)\nlibrary(celldex)\nlibrary(SingleR)\nlibrary(ExperimentHub)\nlibrary(muscat)\n```\n:::\n\n\n# Load RData\n\nLoad the RData which contain all files from previous chapter.\n\n\n::: {.cell hash='07_differential_expression_analysis_cache/html/unnamed-chunk-2_bbb934c1998fd2e9b767ed8ce73b1599'}\n\n```{.r .cell-code}\nload(\"data/intermediate_data/chapter6.RData\")\n```\n:::\n\n\n# 1. FindMarkers\n\nIn the last chapter, we used `FindMarkers` to find the marker genes between two clusters by specifying `ident.1` and `ident.2`.\n\nChanging the `ident.1` and `ident.2` arguments, we can perform differential expression analysis between two groups.\n\nFor instance, we want to find genes deferentially expressed between na√Øve and treated PBMC.\n\n\n::: {.cell hash='07_differential_expression_analysis_cache/html/unnamed-chunk-3_cf4c9aa9f0866c92486863b3633619ff'}\n\n```{.r .cell-code}\n# assign the sample identity that we want to work on different sample groups\nIdents(integrate.filtered.rna) <- \"Sample_Name\"\n\n# Find genes differentially expressed\ntreated_naive <- \n  FindMarkers(integrate.filtered.rna, ident.1 = \"treated\", ident.2 = \"naive\") %>% \n  rownames_to_column(\"gene\") %>% \n  dplyr::filter(p_val_adj < 0.05)\n```\n:::\n\n\nWe can compare the gene expression between two groups by specifying `ident.1` and `ident.2`.\n\n\n::: {.cell hash='07_differential_expression_analysis_cache/html/unnamed-chunk-4_1954058e0d2d46b86b759d566951cbd9'}\n\n```{.r .cell-code}\nhead(treated_naive)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   gene         p_val avg_log2FC pct.1 pct.2     p_val_adj\n1  GBP1  0.000000e+00   2.843551 0.688 0.072  0.000000e+00\n2 STAT1  0.000000e+00   2.745853 0.855 0.165  0.000000e+00\n3  TAP1 1.208876e-296   1.971221 0.758 0.178 2.338813e-292\n4  GBP4 7.757109e-268   2.250739 0.642 0.087 1.500768e-263\n5  XAF1 4.844772e-251   2.252528 0.639 0.114 9.373181e-247\n6  GBP5 3.297043e-247   2.334895 0.625 0.094 6.378789e-243\n```\n:::\n:::\n\n\n`gene` Gene symbol.\n\n`p_val` p-value without multiple testing.\n\n`avg_log2FC` log2 fold-change of the average expression between the two groups.\n\nWe can also find genes deferentially expressed in CD4 T cells between the two samples. We start by subsetting the cells being annotated as \"CD4 T\".\n\n\n::: {.cell hash='07_differential_expression_analysis_cache/html/unnamed-chunk-5_b67403db5738905a0cb9cca2c20e1fda'}\n\n```{.r .cell-code}\n# subset CD4 T cells\ncd4t <- subset(integrate.filtered.rna, subset = predicted.celltype.l1 == \"CD4 T\")\n\n# Find genes differentially expressed between activated vs. naive samples in CD4 T cells\ntreated_naive_cd4t <- \n  FindMarkers(cd4t, ident.1 = \"treated\", ident.2 = \"naive\", assay = \"RNA\", recorrect_umi = FALSE) %>% \n  rownames_to_column(\"gene\") %>% \n  dplyr::filter(p_val_adj < 0.05)\n```\n:::\n\n\n# 2. Muscat for Differential State analysis (DS)\n\nPseudo-bulk aggregation transforms scRNA-seq data into bulk-like data by aggregating gene counts within each cell type and subject. We use the package `Muscat` (Multi-sample multi-group scRNA-seq data analysis tools) to perform pseudo-bulk analysis.\n\n## 2.1 Setup\n\nLet's assume we have three biological replicates in each condition (we made them up for illustration).\n\n\n::: {.cell hash='07_differential_expression_analysis_cache/html/unnamed-chunk-6_24861c3eb038acf242811df7764e06e8'}\n\n```{.r .cell-code}\n# read in dummy group\ndummy <- read_csv(\"data/dummy.csv\")\n\n# add the dummy meta into the seurat object\nintegrate.filtered.rna <- AddMetaData(integrate.filtered.rna, dummy$dummy_group, col.name = \"dummy_group\")\n```\n:::\n\n\n## 2.2 Select cell groups\n\nLet's take a look at the cell type annotation in UMAP.\n\n\n::: {.cell hash='07_differential_expression_analysis_cache/html/unnamed-chunk-7_6b8041b3278417cab0769ec5198f8b07'}\n\n```{.r .cell-code}\n# visualize cell types in UMAP\nDimPlot(integrate.filtered.rna, \n        reduction = \"umap\", \n        group.by = \"predicted.celltype.l1\", \n        label = TRUE, \n        label.size = 3,\n        repel = TRUE, \n        split.by = \"Sample_Name\") + NoLegend()\n```\n\n::: {.cell-output-display}\n![](07_differential_expression_analysis_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nWe see some of the cell types have only a few cells.\n\nLet's look at how many cells are in each cell type per dummy group.\n\n\n::: {.cell hash='07_differential_expression_analysis_cache/html/unnamed-chunk-8_95c8c286f1fb22d13f892986c89f107e'}\n\n```{.r .cell-code}\n# Cell counts in per cell type per group\nFetchData(integrate.filtered.rna, \n                     vars = c(\"predicted.celltype.l1\", \"dummy_group\", \"Sample_Name\")) %>%\n  dplyr::count(predicted.celltype.l1, Sample_Name, dummy_group) %>%\n  tidyr::spread(predicted.celltype.l1, n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sample_Name dummy_group  B CD4 T CD8 T DC Mono  NK other other T\n1       naive     naive_1 22   309    65  3  127  68    19      14\n2       naive     naive_2 22   302    54  5  118  75    17       3\n3       naive     naive_3 24   311    58  4  113  93    12      12\n4     treated   treated_1 61   501    34 NA   36 137    15       1\n5     treated   treated_2 61   478    21 NA   35 123    21       2\n6     treated   treated_3 57   502    27 NA   36 137    22       3\n```\n:::\n:::\n\n\nDendritic cells, other T cells, and other don't have sufficient cells per dummy group. For demonstration, we will not include these cells for pseudo-bulk analysis. We will focus on \"CD4 T\", \"Mono\", and \"NK\".\n\n\n::: {.cell hash='07_differential_expression_analysis_cache/html/unnamed-chunk-9_428674795b3085a2b229b4387f3aab62'}\n\n```{.r .cell-code}\nsubset.rna <- subset(integrate.filtered.rna, \n                     subset = predicted.celltype.l1 %in% \n                       c(\"CD4 T\", \"Mono\", \"NK\"))\n```\n:::\n\n\n## 2.3 Setup `SingleCellExperiment`\n\nThe `muscat` package requires the input object as the `SingleCellExperiment` object. We first transform the Seurat object into SCE object.\n\n`muscat` requires three pieces of meta data information: `sample_id` sample IDs, corresponds to `dummy_group` in the `meta.data` `cluster_id` cell types, corresponds to `predicted.celltype.l1` in the `meta.data` `group_id` sample groups, corresponds to `sample` in the `meta.data`\n\nLet's first tidy up the meta data.\n\n\n::: {.cell hash='07_differential_expression_analysis_cache/html/unnamed-chunk-10_0cb1ff9c239b077f28af4e05f59a2537'}\n\n```{.r .cell-code}\nsubset.rna@meta.data <- subset.rna@meta.data %>% \n  dplyr::select(Sample_Name, predicted.celltype.l1, dummy_group) %>% \n  `colnames<-`(c(\"group_id\", \"cluster_id\", \"sample_id\"))\n```\n:::\n\n\nSeurat has a convenient function to convert Seurat object into SingleCellExperiment object, `as.SingleCellExperiment`.\n\n\n::: {.cell hash='07_differential_expression_analysis_cache/html/unnamed-chunk-11_ff83713c6d4b9722aa92cbe55fecd84b'}\n\n```{.r .cell-code}\n# construct experiment_info\nexperiment_info <- subset.rna@meta.data %>% \n  group_by(sample_id, group_id) %>% \n  dplyr::summarise(n_cells = length(group_id))\n\n# convert seurat object into SingleCellExperiment object\nsubset.rna <- as.SingleCellExperiment(subset.rna, assay = \"RNA\")\n```\n:::\n\n\nThe SCE object doesn't contain the experiment_info. We add the information into the SCE object.\n\n\n::: {.cell hash='07_differential_expression_analysis_cache/html/unnamed-chunk-12_c64ea488cf5d8d7adfc3f1ff03e03f4e'}\n\n```{.r .cell-code}\n# assign experiment info into the created SingleCellExperiment\nsubset.rna@metadata[[\"experiment_info\"]] <- experiment_info\n```\n:::\n\n\n## 2.4 Aggregation\n\nWe first aggregate measurements for each sample (in each cell type) to obtain pseudobulk data.\n\n\n::: {.cell hash='07_differential_expression_analysis_cache/html/unnamed-chunk-13_df952919b90ca7ba317c4b96ed0612d5'}\n\n```{.r .cell-code}\n# aggregate counts per cell type per dummy group\nsubset.pb <- aggregateData(subset.rna,\n                           assay = \"counts\", \n                           fun = \"sum\",\n                           by = c(\"cluster_id\", \"sample_id\"))\n```\n:::\n\n\nWe can look at how the pseudobulk samples cluster on the MDS plot.\n\n\n::: {.cell hash='07_differential_expression_analysis_cache/html/unnamed-chunk-14_9273cadfcdf2da3414a39679bc813b20'}\n\n```{.r .cell-code}\nmuscat::pbMDS(subset.pb)\n```\n\n::: {.cell-output-display}\n![](07_differential_expression_analysis_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nNext, we can run DS analysis by specifying `method` as `DESeq2`.\n\n\n::: {.cell hash='07_differential_expression_analysis_cache/html/unnamed-chunk-15_9c6c5680210a9b0ce368eef5096f6b48'}\n\n```{.r .cell-code}\n# change group_id into a factor\nsubset.pb$group_id <- subset.pb$group_id %>% as.factor()\n\n# run DS analysis with DESeq2\nres <- pbDS(subset.pb, method = \"DESeq2\", verbose = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n:::\n\n\nThe result is stored in the `table` slot of `res`.\n\nWe will focus on the deferentially expressed genes in CD4 T cells.\n\n\n::: {.cell hash='07_differential_expression_analysis_cache/html/unnamed-chunk-16_e2850d53857b74a0521b6f25243a86e3'}\n\n```{.r .cell-code}\ncd4t <- res$table$treated$`CD4 T`\n\n# Filter the results with p_adj.loc < 0.05, abs(logFC) > 1\ncd4t.sig <- dplyr::filter(cd4t, p_adj.loc < 0.05, abs(logFC) > 1) %>% \n  arrange(p_adj.loc)\n```\n:::\n\n\n`p_adj.loc` is produced by correcting for multiple testing across all genes tested within a cluster. `p_adj.glb` is produced by correcting for multiple testing across all genes tested in all clusters.\n\nWe can plot the DEGs from CD4+ T cells in a heatmap.\n\n\n::: {.cell hash='07_differential_expression_analysis_cache/html/unnamed-chunk-17_ab58e1bae9d13b131cb679264c833564'}\n\n```{.r .cell-code}\n# scale the RNA data\nintegrate.filtered.rna <- ScaleData(integrate.filtered.rna, features = rownames(integrate.filtered.rna), assay = \"RNA\")\n\n# plot heatmap\nintegrate.filtered.rna %>%\n  subset(., subset = predicted.celltype.l1 == \"CD4 T\") %>% \n  DoHeatmap(features = cd4t.sig$gene[1:40])\n```\n\n::: {.cell-output-display}\n![](07_differential_expression_analysis_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n# 3. Save\n\nSave the files into RData for documentation.\n\n\n::: {.cell hash='07_differential_expression_analysis_cache/html/unnamed-chunk-18_eba885ce79fa1ce589685e16bbb14ed7'}\n\n```{.r .cell-code}\n# save(integrate.filtered.rna, expMat, cd4t, file = \"data/intermediate_data/chapter7.RData\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}