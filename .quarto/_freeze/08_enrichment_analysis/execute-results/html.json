{
  "hash": "30d6cc31e83641bd8370d84f0467b172",
  "result": {
    "markdown": "---\ntitle: \"Chapter 8 Enrichment Analysis\"\nexecute:\n  warning: false\n  message: false\n---\n\n::: {.cell hash='08_enrichment_analysis_cache/html/unnamed-chunk-1_f21f2c7591494a4049a8102af6a36b6f'}\n\n```{.r .cell-code}\n# libraries for this chapter\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(data.table)\nlibrary(celldex)\nlibrary(SingleR)\nlibrary(ExperimentHub)\nlibrary(org.Hs.eg.db)\nlibrary(clusterProfiler)\nlibrary(AnnotationDbi)\nlibrary(enrichplot)\nlibrary(biomaRt)\n```\n:::\n\n\n# Load RData\n\nLoad the RData which contain all files from previous chapter.\n\n\n::: {.cell hash='08_enrichment_analysis_cache/html/unnamed-chunk-2_0795e94269fc78f11bc84464e6b2c17e'}\n\n```{.r .cell-code}\nload(\"data/intermediate_data/chapter7.RData\")\n```\n:::\n\n\nOftentimes, enrichment analysis takes in the differentially expressed genes and looks at which gene ontology (GO) terms are enriched.\n\nGO terms defines concepts/classes used to describe gene function and relationships between these concepts. `clusterProfiler` is an R package implementing many methods to analyze and visualize functional profiles from a group of features. It classifies functions along three aspects.\n\nMF: Molecular Function: molecular activities of gene products\n\nCC: Cellular Component: where gene products are active\n\nBP: Biological Process: pathways and larger processes made up of the activities of multiple gene products\n\nThis chapter uses the differentially expressed genes in CD4+ T cells from last chapter as an example.\n\n# 1. Get Entrez ID\n\n`clusterProfiler` prefers the input of Entrez ID. We use `biomaRt` package to convert the gene symbol into Entrez ID.\n\n::: callout-note\n`biomaRt` is handy for getting information about a group of features. You can use it to get gene symbols, genomic coordinates, transcripts, etc. You can explore what data is stored in `biomaRt` with `listAttributes`.\n:::\n\nThe differentially expressed genes in CD4+ T cells between na√Øve and activated PBMCs are stored in `cd4t`. The gene symbol in this list can be converted into Entrez ID by `biomaRt`.\n\nFirstly, connect to the Ensembl database and specify we want to retrieve information from the dataset of Homo Sapien.\n\n\n::: {.cell hash='08_enrichment_analysis_cache/html/unnamed-chunk-3_adb3a62d296658750c3a7f59dbd4f8d4'}\n\n```{.r .cell-code}\nmart <- useMart(biomart = \"ensembl\", dataset = \"hsapiens_gene_ensembl\")\n```\n:::\n\n\n`biomart` BioMart database connect to. Here, we want to connect to `ensembl` database.\n\n`dataset` Dataset to use. Here specify `hsapiens_gene_ensembl`.\n\nNext, we can give a list of gene symbols and retrieve the Entrez ID through `getBM`.\n\n\n::: {.cell hash='08_enrichment_analysis_cache/html/unnamed-chunk-4_3f38ccc885825e36d7134549c7e96d3d'}\n\n```{.r .cell-code}\nresults <- getBM(attributes = c(\"entrezgene_id\", \"external_gene_name\"),\n                 filters = \"external_gene_name\", values = cd4t$gene,\n                 mart = mart)\n```\n:::\n\n\n`attributes` Attributes to retrieve. We want to have the gene symbols and Entrez ID in the results.\n\n`filters` Which filter to use to filter the dataset.\n\n`values` A list of features as a query.\n\n`mart` Object of class Mart, created with the `useMart` function.\n\nA table of two columns is created and stored in `results`.\n\n\n::: {.cell hash='08_enrichment_analysis_cache/html/unnamed-chunk-5_cad68dcb9c21d1d8a9b7266bcd538ccf'}\n\n```{.r .cell-code}\nhead(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  entrezgene_id external_gene_name\n1         81532               MOB2\n2         79602            ADIPOR2\n3        196513              DCP1B\n4         55449          DHRS4-AS1\n5         80344             DCAF11\n6         51016               EMC9\n```\n:::\n:::\n\n\nNot every gene has the Entrez ID. We keep only genes that have a matched Entrez ID.\n\n\n::: {.cell hash='08_enrichment_analysis_cache/html/unnamed-chunk-6_39f4cbfe4abf5bc8b6994d755ff9e020'}\n\n```{.r .cell-code}\ncd4t <- left_join(cd4t, results, by = c(\"gene\" = \"external_gene_name\")) %>% \n  filter(!is.na(entrezgene_id))\n```\n:::\n\n\n# 2. GO over-representation analysis\n\nOver Representation Analysis (ORA) is a widely used approach to determine whether known biological functions or processes are over-represented (= enriched) in an experimentally-derived gene list, e.g. a list of differentially expressed genes (DEGs).\n\nWe use the `enrichGO` to get the enriched GO terms in the list of features.\n\n\n::: {.cell hash='08_enrichment_analysis_cache/html/unnamed-chunk-7_88fa70da0395c4d683b0ce61a7361a1b'}\n\n```{.r .cell-code}\ncd4t.sig <- dplyr::filter(cd4t, p_adj.loc < 0.05, logFC > 1) %>% \n  arrange(p_adj.loc)\n\n# get the enriched GO terms\nego <- enrichGO(gene = cd4t.sig$entrezgene_id,\n                keyType = \"ENTREZID\",\n                OrgDb = org.Hs.eg.db,\n                ont = \"BP\",\n                pAdjustMethod = \"BH\",\n                pvalueCutoff = 0.01,\n                qvalueCutoff = 0.05,\n                readable = TRUE)\n```\n:::\n\n\n`gene` A list of Entrez gene id.\n\n`keyType` The keytype of input gene.\n\n`OrgDb` The database with detailed information about the species.\n\n`org.Hs.eg.db` Specify the database of Homo Sapien.\n\n`ont` One of \"BP\" (biological process), \"MF\" (molecular function), and \"CC\" (cellular component) subontologies, or \"ALL\" for all three.\n\n`pAdjustMethod` Multiple testing method for p-value.\n\n`pvalueCutoff` Adjusted pvalue cutoff on enrichment tests to report.\n\n`qvalueCutoff` Tge qvalue cutoff on enrichment tests to report as significant.\n\n`readable` Whether mapping gene ID to gene Name.\n\nLet's convert the `ego` object into a data frame and visualize the results in a bar plot.\n\n\n::: {.cell hash='08_enrichment_analysis_cache/html/unnamed-chunk-8_4d256ac0c66efa59fca4772658c7eac7'}\n\n```{.r .cell-code}\nego.table <- as.data.frame(ego)\n```\n:::\n\n\n`GeneRatio` The gene counts from the input list found in the gene set of a GO term / gene counts of input list.\n\n`BgRatio` The gene counts of a geneset / size of all of the unique genes in the collection of genesets.\n\n\n::: {.cell hash='08_enrichment_analysis_cache/html/unnamed-chunk-9_9b8dca033d0b8ae4a79852318409ee52'}\n\n```{.r .cell-code}\nbarplot(ego, showCategory = 18)\n```\n\n::: {.cell-output-display}\n![](08_enrichment_analysis_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n# 3. GSEA\n\nAll genes can be used as input of GSEA (Gene set enrichment analysis). We first rank the genes based on `stat`.\n\n\n::: {.cell hash='08_enrichment_analysis_cache/html/unnamed-chunk-10_24297f670a373da659068eb98ee8a3e6'}\n\n```{.r .cell-code}\n# order genes based on stat\ncd4t <- cd4t[order(-cd4t$stat), ]\n\ngene_list <- cd4t$stat\nnames(gene_list) <- cd4t$entrezgene_id\n```\n:::\n\n\nWe use `gseGO` to perform GSEA and convert the results into a dataframe.\n\n\n::: {.cell hash='08_enrichment_analysis_cache/html/unnamed-chunk-11_c3ddcf5746ac5f8e593dca3b324db615'}\n\n```{.r .cell-code}\n# perform GSEA\ngse <- gseGO(gene_list,\n             keyType = \"ENTREZID\",\n             ont = \"BP\",\n             OrgDb = \"org.Hs.eg.db\")\n\n# convert the results into a dataframe\ngse.table <- as.data.frame(gse) %>% \n  mutate(geneSetID = 1:dim(.)[1])\n```\n:::\n\n\n`enrichmentScore` The enrichment score (ES) represents the degree to which a set S is over-represented at the top or bottom of the ranked list L.\n\nWe can look at the enrichment of some GO terms in GSEA plot.\n\n\n::: {.cell hash='08_enrichment_analysis_cache/html/unnamed-chunk-12_23dfc33f6e541815cd56776c8685e3f6'}\n\n```{.r .cell-code}\ngseaplot2(gse, geneSetID = c(158, 163))\n```\n\n::: {.cell-output-display}\n![](08_enrichment_analysis_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nWe have significant enriched term in the unregulated genes. Along the x axis is the ranked genes. Each of the vertical line is one of those genes that are found in this gene set. Along the running line, you can see a lot of genes running together and it falls out when the gene becomes more sparse in the list.\n\n# 4. Save\n\nSave the files into RData for documentation.\n\n\n::: {.cell hash='08_enrichment_analysis_cache/html/unnamed-chunk-13_7a84f4e79d067f2476b14a2853f1fa5a'}\n\n```{.r .cell-code}\n# save(integrate.filtered.rna, expMat, cd4t, ego.table, gse.table, file = \"data/intermediate_data/chapter8.RData\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}