{
  "hash": "55b2ed5877c3e5ffe84e00e4fa13e3ec",
  "result": {
    "markdown": "---\ntitle: \"Chapter 1 Data Import\"\nexecute:\n  warning: false\n  message: false\n---\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-1_968c271daec74896bc880d9ef1539f13'}\n\n```{.r .cell-code}\n# libraries for this chapter\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(data.table)\nlibrary(celldex)\nlibrary(SingleR)\nlibrary(ExperimentHub)\n```\n:::\n\n\n# Demo data\n\nThe demo data is generated from freshly isolated human PBMCs. The PBMCs were grown for 24 hours in the presence of CD3/CD28 stimulation (\"treated\") and compared to PBMCs grown for 24 hours in regular media (\"naive\"). Cells were then labeled with a 20plex AbSeq panel consisting of lineage markers and T-cell activation markers, as well as unique Sample Tags from the BD Rhapsody^™^ Human Single Cell Multiplexing Kit (resting PBMC: ST1; treated PBMC: ST2). The cells were mixed at a 1:1 ratio and processed using the BD Rhapsody^™^ Single-Cell Analysis System. Sequencing libraries for RNA and AbSeq antibodies were generated using the BD Rhapsody WTA Amplification kit.\n\n::: callout-note\nPlease review the **setup** chapter to ensure that R packages are installed and data is downloaded.\n:::\n\n# 1. Data import\n\nThe expression matrix stores the UMI counts of a feature (gene or protein). Depending on the single cell platform, common format of expression matrix include CSV, MEX (Market Exchange) or H5AD.\n\nRhapsody single cell platform outputs expression matrix in two formats: MEX and H5AD.\n\nWe import MEX using the function from Seurat, `Read10x`. We assign a name to the created object, `expMat` (**exp**ression **Mat**rix).\n\n::: callout-note\nThe expression matrix in Rhapsody v1 pipeline is in CSV format. If you run Rhapsody v2 pipeline, the expression matrix is available in MEX format.\n:::\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-2_1f4c30234e193fac937deb1d4188a53c'}\n\n```{.r .cell-code}\nexpMat <- Read10X(\"data/raw_data/WTA-AB-SMK-v2-0_DBEC_MolsPerCell_MEX/\",\n                  gene.column = 2,\n                  cell.column = 1,\n                  unique.features = TRUE)\n```\n:::\n\n\nClick on the `expMat` on the right.\n\n![](pics/1-1-expMat.png)\n\nA window will pop up and you should be able to see the structure of `expMat`.\n\n![](pics/1-2-expMat.png)\n\n`expMat` contains two matrices: **Gene Expression** and **Antibody Capture**. You may recall that the demo dataset has two assays: WTA, whole transcriptome analysis, to capture **Gene Expression**; and AbSeq for **Antibody Capture**.\n\nWe will first focus on **Gene Expression, the scRNA-seq**.\n\nTake a look on the first 5 row x first 5 column of **Gene Expression** matrix. It is organized as feature x cell.\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-3_effd23606f9076dd8dd10e33363f6baa'}\n\n```{.r .cell-code}\nexpMat$`Gene Expression`[1:5, 1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5 x 5 sparse Matrix of class \"dgCMatrix\"\n         74 391 440 1222 2690\nA1BG      .   .   .    .    .\nA1BG-AS1  .   .   .    .    .\nA1CF      .   .   .    .    .\nA2M       .   .   .    .    .\nA2M-AS1   .   .   .    .    .\n```\n:::\n:::\n\n\n::: callout-important\n## Question\n\nWhat are the dots \".\" in the matrix?\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Answer\n\nThe \".\" corresponds to 0.\n\nscRNA-seq usually contains many zeros. The zeros can come from\n\n-   Stochastic gene expression\n\n-   Limitation of single cell technology: On average, 5-8% of mRNA transcripts can be captured by the machine.\n:::\n\n# 2. Create a Seurat object to store Gene Expression\n\nLet's create a Seurat object to store Gene Expression.\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-4_43440ab02bd861b0fa120a2b23155365'}\n\n```{.r .cell-code}\nrna <- CreateSeuratObject(counts = expMat$`Gene Expression`, \n                                min.cells = 1, \n                                min.features = 100, \n                                assay = \"RNA\")\n```\n:::\n\n\n`min.cells` Specify the minimum number of cells that need to be detected per feature. Setting this argument will filter out zero or lowly expressed features.\n\n`min.features` Specify the minimum number of features that need to be detected per cell. Setting this argument will filter out cell indexes with random counts but without any cell present.\n\n`assay` Specify the name of the created assay. By default, it is \"RNA\".\n\n::: callout-note\n## Question\n\n`CreateSeuratObject` has many arguments in the function. These arguments allow users to control the behavior of the function. One can look at the Help tab to see the arguments and their default settings.\n\n![](pics/1-3-helpDesk.png)\n:::\n\nWhen creating a Seurat object, Seurat automatically creates some metadata for each cell. This information is stored in the `meta.data` slot.\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-5_bc9f9d8fce91165394093b5d49ac1b74'}\n\n```{.r .cell-code}\nrna@meta.data %>% head\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        orig.ident nCount_RNA nFeature_RNA\n74   SeuratProject       2389         1135\n391  SeuratProject       5252         2088\n440  SeuratProject       1205          630\n1222 SeuratProject       2390         1152\n2690 SeuratProject       1533          810\n2782 SeuratProject       1106          105\n```\n:::\n:::\n\n\n`meta.data` stores information related to each cell. We will add more information into the `meta.data` later. For now, it contains three columns:\n\n`orig.ident` Sample identity or sample name. By default, it is `SeuratProject`.\n\n`nCount_RNA` UMI counts per gene per cell.\n\n`nFeature_RNA` Genes counts per cell.\n\n# 3. Add cell assignment into `meta.data`\n\nThe demo dataset has **Sample Multiplexing Kit (SMK)** to pool two samples in one cartridge.\n\nTo demultiplex the samples, we need to use Demo-WTA-AbSeq-SMK_Sample_Tag_Calls.csv.\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-6_63c549bb01a7f6571f5ad9df5cb779ee'}\n\n```{.r .cell-code}\nsmk <- fread(file = \"data/raw_data/WTA-AB-SMK-v2-0_Sample_Tag_Calls.csv\", \n                     sep = \",\", \n                     header=TRUE) %>% \n  data.frame(row.names = 1)\n```\n:::\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-7_5f598dae7940d3e17d31a5d815af10d5'}\n\n```{.r .cell-code}\nsmk[1:5, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Sample_Tag Sample_Name\n74   SampleTag01_hs       naive\n391  SampleTag02_hs     treated\n440  SampleTag01_hs       naive\n1222 SampleTag01_hs       naive\n2690 SampleTag01_hs       naive\n```\n:::\n:::\n\n\n`smk` is a matrix with two columns. The row names are the cell labels.\n\n`Sample_Tag`: Which tag the cell belongs to.\n\n`Sample_Name`: Which sample the cell belongs to.\n\nWe can add the cell assignment into the `meta.data` of Seurat object by `AddMetaData`.\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-8_b83114bb43c4a44ce3d47afba890b01d'}\n\n```{.r .cell-code}\nrna <- AddMetaData(object = rna, metadata = smk)\n```\n:::\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-9_c92de0f642c4819a6b32811407e52645'}\n\n```{.r .cell-code}\nrna@meta.data %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        orig.ident nCount_RNA nFeature_RNA     Sample_Tag Sample_Name\n74   SeuratProject       2389         1135 SampleTag01_hs       naive\n391  SeuratProject       5252         2088 SampleTag02_hs     treated\n440  SeuratProject       1205          630 SampleTag01_hs       naive\n1222 SeuratProject       2390         1152 SampleTag01_hs       naive\n2690 SeuratProject       1533          810 SampleTag01_hs       naive\n2782 SeuratProject       1106          105      Multiplet   Multiplet\n```\n:::\n:::\n\n\nNow we know which cell belongs to which sample.\n\n# 4. Remove Multiplet and Undetermined\n\nThe **Multiplet** are cell labels with more than one SMK tags. They could be Multiplets from one microwell containing two cells, or single cells with high ambient SMK noise.\n\nThe **Undetermined** are cell labels without sufficient SMK tag reads. They could be noisy cell labels, or single cells without SMK tag reads.\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-10_6570ba55e971882ea4375142a9fe17ae'}\n\n```{.r .cell-code}\nrna@meta.data %>% \n  group_by(Sample_Name) %>% \n  tally() %>% \n  mutate(pct = n/sum(n)) %>% \n  ggplot(aes(x=Sample_Name, y=n, fill= Sample_Name)) + \n  geom_bar(stat = \"identity\") +\n  geom_text(aes(y = n,\n                label = paste0(n, \"\\n\", scales::percent(pct)),\n                vjust= -0.5, size = 2.5), show.legend = FALSE) + \n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](01_data_import_files/figure-html/unnamed-chunk-10-1.png){width=1920}\n:::\n:::\n\n\nMultiplet and Undetermined are removed from the downstream analysis by `subset`.\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-11_18e7645701fdfdf303ad63791ea87cf2'}\n\n```{.r .cell-code}\nrna <- subset(rna, subset = Sample_Name %in% c(\"Multiplet\", \"Undetermined\"), invert = T)\n```\n:::\n\n\n# 5. Save\n\nSave the files into RData for documentation.\n\n\n::: {.cell hash='01_data_import_cache/html/unnamed-chunk-12_4f3bcf9938f7062dcc1687e4ce23b963'}\n\n```{.r .cell-code}\n# save.image(\"data/intermediate_data/chapter1.RData\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}