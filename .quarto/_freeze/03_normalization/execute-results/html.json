{
  "hash": "f879297db8ba80492602eb27e0fa07db",
  "result": {
    "markdown": "---\ntitle: \"Chapter 3 Normalization and PCA\"\nexecute:\n  warning: false\n  message: false\n---\n\n::: {.cell hash='03_normalization_cache/html/unnamed-chunk-1_6c162086bab9534c351beb917fb18ab1'}\n\n```{.r .cell-code}\n# libraries for this chapter\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(data.table)\nlibrary(celldex)\nlibrary(SingleR)\nlibrary(ExperimentHub)\n```\n:::\n\n\n# Load RData\n\nLoad the RData which contains all files from previous chapter.\n\n\n::: {.cell hash='03_normalization_cache/html/unnamed-chunk-2_e6efc49f7ebad2bd517f564ff43e40f6'}\n\n```{.r .cell-code}\nload(\"data/intermediate_data/chapter2.RData\")\n```\n:::\n\n\n# \n\n# 1. Normalization\n\nWe will perform normalization on UMI counts using `LogNormalize`.\n\n`LogNormalize` divides the UMI counts of a gene in a cell into the total UMI counts in that cell. After division, we take the natural log.\n\n\n::: {.cell hash='03_normalization_cache/html/unnamed-chunk-3_0de1def568299c60629a58f7e31cd965'}\n\n```{.r .cell-code}\nfiltered.rna <- NormalizeData(filtered.rna, \n                              normalization.method = \"LogNormalize\")\n```\n:::\n\n\n::: callout-important\n## Question\n\nWhere are the normalized counts stored?\n:::\n\n::: {.callout-tip collapse=\"T\"}\n## Answer\n\nThe normalizaed counts are stored in the slot `RNA`.\n\n\n::: {.cell hash='03_normalization_cache/html/unnamed-chunk-4_106076b7b01b939c3e43e7afad3163db'}\n\n```{.r .cell-code}\nfiltered.rna@assays[[\"RNA\"]]@data[1:5, 1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5 x 5 sparse Matrix of class \"dgCMatrix\"\n          74 391 440 1222 2690\nA1BG-AS1   .   .   .    .    .\nA1CF       .   .   .    .    .\nA2M        .   .   .    .    .\nA2M-AS1    .   .   .    .    .\nA2ML1-AS1  .   .   .    .    .\n```\n:::\n:::\n\n:::\n\n# 2. Evaluating effects of mitochondrial percentage (optional)\n\nThe unwanted variation, such as the difference in mitochondrial percentage, could bias the downstream analysis.\n\nFor example, we don't want the cells clustered based on the difference in mitochondrial percentage.\n\nLet's first has a look if the mitochondrial percentage introduces unwanted variation in the dataset or not. We take the normalized counts and follow the below steps to check.\n\n1.  The mitochondrial percentage is a series of numbers. We can turn the mitochondrial percentage variable into a categorical variable based on quartiles.\n\n\n::: {.cell hash='03_normalization_cache/html/unnamed-chunk-5_f1cc602b865d415edd327837d81b9f63'}\n\n```{.r .cell-code}\nsummary(filtered.rna$percent.mt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.2155 10.1004 12.4155 12.6649 15.1489 24.9487 \n```\n:::\n:::\n\n\nThe cells can be grouped into 4 categories.\n\nMT% \\< 1st quartile: Low.\n\nMT% between 1st quartile and Median: Median.\n\nMT% between Median and 3rd quartile: Median high.\n\nMT% \\> 3rd quartile (15.4158%): High.\n\nNext, we create a new variable based on the thretholds.\n\n\n::: {.cell hash='03_normalization_cache/html/unnamed-chunk-6_7b76edd8ca312f3b720767c71c07f1a2'}\n\n```{.r .cell-code}\nfiltered.rna$quartile.mt <- cut(filtered.rna$percent.mt, \n                                breaks=c(-Inf, 10.1004, 12.4155, 15.1489, Inf),\n                                labels=c(\"Low\",\"Medium\",\"Medium high\", \"High\"))\n```\n:::\n\n\nWe use PCA to check whether the mitochondrial percentage is a source of variation. We plot the first two principal components and visualize the data.\n\n\n::: {.cell hash='03_normalization_cache/html/unnamed-chunk-7_e42c74b82136230e4c8c3f3a4fb7b188'}\n\n```{.r .cell-code}\n# Identify the most variable genes\nfiltered.rna <- FindVariableFeatures(filtered.rna,\n                                     selection.method = \"vst\",\n                                     nfeatures = 2000, \n                                     verbose = FALSE)\n\t\t     \n# Scale the data\nfiltered.rna <- ScaleData(filtered.rna, \n                          features = rownames(filtered.rna))\n\n# perform PCA\nfiltered.rna <- RunPCA(filtered.rna)\n\n# Plot pc1 and pc2\nDimPlot(filtered.rna,\n        reduction = \"pca\",\n        group.by= \"quartile.mt\",\n        split.by = \"quartile.mt\")\n```\n\n::: {.cell-output-display}\n![](03_normalization_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nBased on the above plot, we can see a different scatter pattern in cells with \"Low\" mitochondrial percentage.\n\nWe observe that the lobe of cells on the right middle side of the plot is only in the category \"Low\". For all other levels of mitochondrial percentage, we see a more even distribution of cells across the PCA plot.\n\n::: callout-tip\nOftentimes, it is helpful to regress out variation due to mitochondrial percentage. However, if the differences in mitochondrial percentation has the biological meaning that might help to distinguish cell clusters, then we do not regress it out.\n:::\n\n::: callout-tip\nCell cycle is another common source of bias. For instructions on how to remove cell cycle bias, please refer to <https://satijalab.org/seurat/articles/cell_cycle_vignette.html>\n:::\n\nTo regress out the effect of mitochondrial percentage, add the argument `vars.to.regress = \"percent.mt\"` to the `ScaleData`.\n\n\n::: {.cell hash='03_normalization_cache/html/unnamed-chunk-8_819ff283fcbdd38eda0905c9ddb22cbe'}\n\n```{.r .cell-code}\n# Scale the data\nfiltered.rna <- ScaleData(filtered.rna, \n                          features = rownames(filtered.rna), \n                          vars.to.regress = \"percent.mt\")\n\n# Recalculate PCA\nfiltered.rna <- RunPCA(filtered.rna)\n```\n:::\n\n\n# 3. Save\n\nSave the files into RData for documentation.\n\n\n::: {.cell hash='03_normalization_cache/html/unnamed-chunk-9_76800b2b08a02a561042665283c8b2a1'}\n\n```{.r .cell-code}\n# save(filtered.rna, expMat, file = \"data/intermediate_data/chapter3.RData\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}