{"title":"Chapter 7 Differential Expression Analysis","markdown":{"yaml":{"title":"Chapter 7 Differential Expression Analysis","execute":{"warning":false,"message":false}},"headingText":"libraries for this chapter","containsRefs":false,"markdown":"\n\n```{r}\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(data.table)\nlibrary(celldex)\nlibrary(SingleR)\nlibrary(ExperimentHub)\nlibrary(muscat)\n```\n\n# Load RData\n\nLoad the RData which contains all files from the previous chapter.\n\n```{r}\nload(\"data/intermediate_data/chapter6.RData\")\n```\n\n# 1. FindMarkers\n\nIn the last chapter, we used `FindMarkers` to find the marker genes between two clusters by specifying `ident.1` and `ident.2`.\n\nChanging the `ident.1` and `ident.2` arguments, we can perform differential expression analysis between two groups.\n\nFor instance, we want to find genes deferentially expressed between naïve and treated PBMC.\n\n```{r}\n# assign the sample identity that we want to work on different sample groups\nIdents(integrate.filtered.rna) <- \"Sample_Name\"\n\n# Find genes differentially expressed\ntreated_naive <- \n  FindMarkers(integrate.filtered.rna, ident.1 = \"treated\", ident.2 = \"naive\") %>% \n  rownames_to_column(\"gene\") %>% \n  dplyr::filter(p_val_adj < 0.05)\n```\n\nWe can compare the gene expression between two groups by specifying `ident.1` and `ident.2`.\n\n```{r}\nhead(treated_naive)\n```\n\n-   `gene` Gene symbol.\n\n-   `p_val` P-value without multiple testing.\n\n-   `avg_log2FC` log2 fold-change of the average expression between the two groups.\n\nWe can also find genes deferentially expressed in CD4 T cells between the two samples. We start by subsetting the cells annotated as \"CD4 T\".\n\n```{r}\n# subset CD4 T cells\ncd4t <- subset(integrate.filtered.rna, subset = predicted.celltype.l1 == \"CD4 T\")\n\n# Find genes differentially expressed between activated vs. naive samples in CD4 T cells\ntreated_naive_cd4t <- \n  FindMarkers(cd4t, ident.1 = \"treated\", ident.2 = \"naive\", \n              assay = \"RNA\", recorrect_umi = FALSE) %>% \n  rownames_to_column(\"gene\") %>% \n  dplyr::filter(p_val_adj < 0.05)\n```\n\n# 2. `muscat` for Differential State analysis (DS)\n\nPseudo-bulk aggregation transforms scRNA-seq data into bulk-like data by aggregating gene counts within each cell type and subject. We use the package `muscat` (Multi-sample multi-group scRNA-seq data analysis tools) to perform pseudo-bulk analysis.\n\n## 2.1 Setup\n\nLet's assume we have three biological replicates in each condition (we make them up for the purpose of illustration).\n\n```{r}\n# read in dummy group\ndummy <- read_csv(\"data/dummy.csv\")\n\n# add the dummy meta into the seurat object\nintegrate.filtered.rna <- AddMetaData(integrate.filtered.rna, \n                                      dummy$dummy_group, \n                                      col.name = \"dummy_group\")\n```\n\n## 2.2 Select cell groups\n\nLet's take a look at the cell type annotation in UMAP.\n\n```{r}\n# visualize cell types in UMAP\nDimPlot(integrate.filtered.rna, \n        reduction = \"umap\", \n        group.by = \"predicted.celltype.l1\", \n        label = TRUE, \n        label.size = 3,\n        repel = TRUE, \n        split.by = \"Sample_Name\") + NoLegend()\n```\n\nWe see some of the cell types have only a few cells.\n\nLet's look at how many cells are in each cell type per dummy group.\n\n```{r}\n# Cell counts in per cell type per group\nFetchData(integrate.filtered.rna, \n                     vars = c(\"predicted.celltype.l1\", \"dummy_group\", \"Sample_Name\")) %>%\n  dplyr::count(predicted.celltype.l1, Sample_Name, dummy_group) %>%\n  tidyr::spread(predicted.celltype.l1, n)\n```\n\nDendritic cells, other T cells, and the group of other don't have sufficient cells per dummy group. For demonstration, we will not include these cell types for pseudo-bulk analysis. We will focus on \"CD4 T\", \"Mono\", and \"NK\".\n\n```{r}\nsubset.rna <- subset(integrate.filtered.rna, \n                     subset = predicted.celltype.l1 %in% \n                       c(\"CD4 T\", \"Mono\", \"NK\"))\n```\n\n## 2.3 Setup `SingleCellExperiment`\n\nThe `muscat` package requires the input object as the `SingleCellExperiment` object. We first transform the Seurat object into SCE object.\n\n`muscat` requires three pieces of meta data information: `sample_id` sample IDs, corresponds to `dummy_group` in the `meta.data` `cluster_id` cell types, corresponds to `predicted.celltype.l1` in the `meta.data` `group_id` sample groups, corresponds to `sample` in the `meta.data`\n\nLet's first tidy up the meta data.\n\n```{r}\nsubset.rna@meta.data <- subset.rna@meta.data %>% \n  dplyr::select(Sample_Name, predicted.celltype.l1, dummy_group) %>% \n  `colnames<-`(c(\"group_id\", \"cluster_id\", \"sample_id\"))\n```\n\nSeurat has a convenient function to convert Seurat object into SingleCellExperiment object, `as.SingleCellExperiment`.\n\n```{r}\n# construct experiment_info\nexperiment_info <- subset.rna@meta.data %>% \n  group_by(sample_id, group_id) %>% \n  dplyr::summarise(n_cells = length(group_id))\n\n# convert seurat object into SingleCellExperiment object\nsubset.rna <- as.SingleCellExperiment(subset.rna, assay = \"RNA\")\n```\n\nThe SCE object doesn't contain the experiment_info. We add the information into the SCE object.\n\n```{r}\n# assign experiment info into the created SingleCellExperiment\nsubset.rna@metadata[[\"experiment_info\"]] <- experiment_info\n```\n\n## 2.4 Aggregation\n\nWe first aggregate measurements for each sample (in each cell type) to obtain pseudobulk data.\n\n```{r}\n# aggregate counts per cell type per dummy group\nsubset.pb <- aggregateData(subset.rna,\n                           assay = \"counts\", \n                           fun = \"sum\",\n                           by = c(\"cluster_id\", \"sample_id\"))\n```\n\nWe can look at how the pseudobulk samples cluster on the MDS plot.\n\n```{r}\nmuscat::pbMDS(subset.pb)\n```\n\nNext, we can run DS analysis by specifying `method` as `DESeq2`.\n\n```{r}\n# change group_id into a factor\nsubset.pb$group_id <- subset.pb$group_id %>% factor(levels = c(\"treated\", \"naive\"))\n\n# run DS analysis with DESeq2\nres <- pbDS(subset.pb, method = \"DESeq2\", verbose = F)\n```\n\nThe result is stored in the `table` slot of `res`.\n\nWe will focus on the deferentially expressed genes in CD4 T cells.\n\n```{r}\ncd4t <- res$table$naive$`CD4 T`\n\n# Filter the results with p_adj.loc < 0.05, abs(logFC) > 1\ncd4t.sig <- dplyr::filter(cd4t, p_adj.loc < 0.05, abs(logFC) > 1) %>% \n  arrange(p_adj.loc)\n\nhead(cd4t.sig)\n```\n\n-   `p_adj.loc` is produced by correcting for multiple testing across all genes tested within a cluster.\n\n-   `p_adj.glb` is produced by correcting for multiple testing across all genes tested in all clusters.\n\nWe can plot the DEGs from CD4+ T cells in a heatmap.\n\n```{r}\n# scale the RNA data\nintegrate.filtered.rna <- ScaleData(integrate.filtered.rna, features = rownames(integrate.filtered.rna), assay = \"RNA\")\n\n# plot heatmap\nintegrate.filtered.rna %>%\n  subset(., subset = predicted.celltype.l1 == \"CD4 T\") %>% \n  DoHeatmap(features = cd4t.sig$gene[1:40])\n```\n\n# 3. Save\n\nSave the files into RData for documentation.\n\n```{r}\n# save(integrate.filtered.rna, expMat, cd4t, file = \"data/intermediate_data/chapter7.RData\")\n```\n","srcMarkdownNoYaml":"\n\n```{r}\n# libraries for this chapter\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(data.table)\nlibrary(celldex)\nlibrary(SingleR)\nlibrary(ExperimentHub)\nlibrary(muscat)\n```\n\n# Load RData\n\nLoad the RData which contains all files from the previous chapter.\n\n```{r}\nload(\"data/intermediate_data/chapter6.RData\")\n```\n\n# 1. FindMarkers\n\nIn the last chapter, we used `FindMarkers` to find the marker genes between two clusters by specifying `ident.1` and `ident.2`.\n\nChanging the `ident.1` and `ident.2` arguments, we can perform differential expression analysis between two groups.\n\nFor instance, we want to find genes deferentially expressed between naïve and treated PBMC.\n\n```{r}\n# assign the sample identity that we want to work on different sample groups\nIdents(integrate.filtered.rna) <- \"Sample_Name\"\n\n# Find genes differentially expressed\ntreated_naive <- \n  FindMarkers(integrate.filtered.rna, ident.1 = \"treated\", ident.2 = \"naive\") %>% \n  rownames_to_column(\"gene\") %>% \n  dplyr::filter(p_val_adj < 0.05)\n```\n\nWe can compare the gene expression between two groups by specifying `ident.1` and `ident.2`.\n\n```{r}\nhead(treated_naive)\n```\n\n-   `gene` Gene symbol.\n\n-   `p_val` P-value without multiple testing.\n\n-   `avg_log2FC` log2 fold-change of the average expression between the two groups.\n\nWe can also find genes deferentially expressed in CD4 T cells between the two samples. We start by subsetting the cells annotated as \"CD4 T\".\n\n```{r}\n# subset CD4 T cells\ncd4t <- subset(integrate.filtered.rna, subset = predicted.celltype.l1 == \"CD4 T\")\n\n# Find genes differentially expressed between activated vs. naive samples in CD4 T cells\ntreated_naive_cd4t <- \n  FindMarkers(cd4t, ident.1 = \"treated\", ident.2 = \"naive\", \n              assay = \"RNA\", recorrect_umi = FALSE) %>% \n  rownames_to_column(\"gene\") %>% \n  dplyr::filter(p_val_adj < 0.05)\n```\n\n# 2. `muscat` for Differential State analysis (DS)\n\nPseudo-bulk aggregation transforms scRNA-seq data into bulk-like data by aggregating gene counts within each cell type and subject. We use the package `muscat` (Multi-sample multi-group scRNA-seq data analysis tools) to perform pseudo-bulk analysis.\n\n## 2.1 Setup\n\nLet's assume we have three biological replicates in each condition (we make them up for the purpose of illustration).\n\n```{r}\n# read in dummy group\ndummy <- read_csv(\"data/dummy.csv\")\n\n# add the dummy meta into the seurat object\nintegrate.filtered.rna <- AddMetaData(integrate.filtered.rna, \n                                      dummy$dummy_group, \n                                      col.name = \"dummy_group\")\n```\n\n## 2.2 Select cell groups\n\nLet's take a look at the cell type annotation in UMAP.\n\n```{r}\n# visualize cell types in UMAP\nDimPlot(integrate.filtered.rna, \n        reduction = \"umap\", \n        group.by = \"predicted.celltype.l1\", \n        label = TRUE, \n        label.size = 3,\n        repel = TRUE, \n        split.by = \"Sample_Name\") + NoLegend()\n```\n\nWe see some of the cell types have only a few cells.\n\nLet's look at how many cells are in each cell type per dummy group.\n\n```{r}\n# Cell counts in per cell type per group\nFetchData(integrate.filtered.rna, \n                     vars = c(\"predicted.celltype.l1\", \"dummy_group\", \"Sample_Name\")) %>%\n  dplyr::count(predicted.celltype.l1, Sample_Name, dummy_group) %>%\n  tidyr::spread(predicted.celltype.l1, n)\n```\n\nDendritic cells, other T cells, and the group of other don't have sufficient cells per dummy group. For demonstration, we will not include these cell types for pseudo-bulk analysis. We will focus on \"CD4 T\", \"Mono\", and \"NK\".\n\n```{r}\nsubset.rna <- subset(integrate.filtered.rna, \n                     subset = predicted.celltype.l1 %in% \n                       c(\"CD4 T\", \"Mono\", \"NK\"))\n```\n\n## 2.3 Setup `SingleCellExperiment`\n\nThe `muscat` package requires the input object as the `SingleCellExperiment` object. We first transform the Seurat object into SCE object.\n\n`muscat` requires three pieces of meta data information: `sample_id` sample IDs, corresponds to `dummy_group` in the `meta.data` `cluster_id` cell types, corresponds to `predicted.celltype.l1` in the `meta.data` `group_id` sample groups, corresponds to `sample` in the `meta.data`\n\nLet's first tidy up the meta data.\n\n```{r}\nsubset.rna@meta.data <- subset.rna@meta.data %>% \n  dplyr::select(Sample_Name, predicted.celltype.l1, dummy_group) %>% \n  `colnames<-`(c(\"group_id\", \"cluster_id\", \"sample_id\"))\n```\n\nSeurat has a convenient function to convert Seurat object into SingleCellExperiment object, `as.SingleCellExperiment`.\n\n```{r}\n# construct experiment_info\nexperiment_info <- subset.rna@meta.data %>% \n  group_by(sample_id, group_id) %>% \n  dplyr::summarise(n_cells = length(group_id))\n\n# convert seurat object into SingleCellExperiment object\nsubset.rna <- as.SingleCellExperiment(subset.rna, assay = \"RNA\")\n```\n\nThe SCE object doesn't contain the experiment_info. We add the information into the SCE object.\n\n```{r}\n# assign experiment info into the created SingleCellExperiment\nsubset.rna@metadata[[\"experiment_info\"]] <- experiment_info\n```\n\n## 2.4 Aggregation\n\nWe first aggregate measurements for each sample (in each cell type) to obtain pseudobulk data.\n\n```{r}\n# aggregate counts per cell type per dummy group\nsubset.pb <- aggregateData(subset.rna,\n                           assay = \"counts\", \n                           fun = \"sum\",\n                           by = c(\"cluster_id\", \"sample_id\"))\n```\n\nWe can look at how the pseudobulk samples cluster on the MDS plot.\n\n```{r}\nmuscat::pbMDS(subset.pb)\n```\n\nNext, we can run DS analysis by specifying `method` as `DESeq2`.\n\n```{r}\n# change group_id into a factor\nsubset.pb$group_id <- subset.pb$group_id %>% factor(levels = c(\"treated\", \"naive\"))\n\n# run DS analysis with DESeq2\nres <- pbDS(subset.pb, method = \"DESeq2\", verbose = F)\n```\n\nThe result is stored in the `table` slot of `res`.\n\nWe will focus on the deferentially expressed genes in CD4 T cells.\n\n```{r}\ncd4t <- res$table$naive$`CD4 T`\n\n# Filter the results with p_adj.loc < 0.05, abs(logFC) > 1\ncd4t.sig <- dplyr::filter(cd4t, p_adj.loc < 0.05, abs(logFC) > 1) %>% \n  arrange(p_adj.loc)\n\nhead(cd4t.sig)\n```\n\n-   `p_adj.loc` is produced by correcting for multiple testing across all genes tested within a cluster.\n\n-   `p_adj.glb` is produced by correcting for multiple testing across all genes tested in all clusters.\n\nWe can plot the DEGs from CD4+ T cells in a heatmap.\n\n```{r}\n# scale the RNA data\nintegrate.filtered.rna <- ScaleData(integrate.filtered.rna, features = rownames(integrate.filtered.rna), assay = \"RNA\")\n\n# plot heatmap\nintegrate.filtered.rna %>%\n  subset(., subset = predicted.celltype.l1 == \"CD4 T\") %>% \n  DoHeatmap(features = cd4t.sig$gene[1:40])\n```\n\n# 3. Save\n\nSave the files into RData for documentation.\n\n```{r}\n# save(integrate.filtered.rna, expMat, cd4t, file = \"data/intermediate_data/chapter7.RData\")\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"tidy":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"07_differential_expression_analysis.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.340","theme":"cosmo","title":"Chapter 7 Differential Expression Analysis"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}