{"title":"Chapter 6 Marker Identification","markdown":{"yaml":{"title":"Chapter 6 Marker Identification","execute":{"warning":false,"message":false}},"headingText":"libraries for this chapter","containsRefs":false,"markdown":"\n\n```{r}\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(data.table)\nlibrary(celldex)\nlibrary(SingleR)\nlibrary(ExperimentHub)\nlibrary(cellpypes)\n```\n\n# Load RData\n\nLoad the RData which contains all files from the previous chapter.\n\n```{r}\nload(\"data/intermediate_data/chapter5.RData\")\n```\n\n# 1. Find marker genes\n\n## 1.1 `FindAllMarkers`\n\nThis type of analysis is typically for evaluating a single sample group/condition. With the `FindAllMarkers` function, we are comparing each cluster to all other clusters to identify potential marker genes. The cells in each cluster are treated as replicates, and essentially a differential expression analysis is performed with some statistical test. By default, the test is Wilcoxon Rank Sum test.\n\nThe `FindAllMarkers` function has three arguments to determine if a gene is a marker gene.\n\n-   `logfc.threshold` Limit testing to genes that show, on average, at least an X-fold difference (log-scale) between the two groups of cells. The default is 0.25. Increasing `logfc.threshold` speeds up the function but can miss weaker signals.\n\n-   `min.pct` Only test genes that are detected in a minimum fraction of cells in either of the two populations. It is meant to speed up the function by not testing infrequently expressed genes. The default is 0.1.\n\n-   `only.pos` Only return positive markers (FALSE by default).\n\nOne may change the arguments depending on how stringent to be.\n\nWe look at the marker genes in the clusters in sample \"treated\".\n\n```{r}\ntreated.markers <- FindAllMarkers(subset(integrate.filtered.rna, subset = Sample_Name == \"treated\"), \n                                  assay = \"RNA\",\n                                  only.pos = TRUE, \n                                  min.pct = 0.25, \n                                  logfc.threshold = 0.25)\n```\n\nLet's look at the top 2 significant marker genes in each cluster.\n\n```{r}\ntreated.markers %>%\n    group_by(cluster) %>%\n    slice_max(n = 2, order_by = avg_log2FC)\n```\n\nWe get a table with the information on marker genes.\n\n`p_val` P-value before multiple testing.\n\n`avg_log2FC` Log2 fold change on the average gene expression between one cluster and the rest of cluster combined.\n\n`pct.1` Percentage of cells expressing the gene in one group. Here is one cluster.\n\n`pct.2` Percentage of cells expressing the gene in another group. Here is the rest of cluster combined.\n\n`p_val_adj` p-value with multiple testing correction.\n\n## 1.2 `FindConservedMarkers`\n\nWe have two samples, naïve and treated. We can find conserved markers between the conditions with the function, `FindConservedMarkers`.\n\nThis function internally separates out cells by sample group/condition, then performs differential gene expression testing for a single specified cluster against all other clusters.\n\nGene-level p-values are computed for each condition and then combined across groups using meta-analysis methods from the `MetaDE` R package.\n\nMany of the arguments in `FindConservedMarkers` are shared with `FindAllMarkers`. Here, we list some additional arguments when using `FindConservedMarkers`.\n\n-   `ident.1` This function only evaluates one cluster at a time; here, you would specify the cluster of interest.\n\n-   `grouping.var` The variable (column name) in your metadata specifies the separation of cells into groups.\n\n```{r}\nfcm <- FindConservedMarkers(integrate.filtered.rna,\n                     assay = \"RNA\",\n                     ident.1 = \"1\",\n                     grouping.var = \"Sample_Name\",\n                     only.pos = TRUE,\n                     min.diff.pct = 0.25,\n                     min.pct = 0.25,\n                     logfc.threshold = 0.25)\n\nhead(fcm)\n```\n\nWe also get a table with information on marker genes. The statistics are computed for each group (naïve vs. treated), and the last two columns are the combined p-value across the two groups.\n\n-   `condition_p_val` P-value before multiple testing.\n\n-   `condition_avg_log2FC` Log2 fold change on the average of gene expression between one cluster and the rest of the clusters combined.\n\n-   `condition_pct.1` Percentage of cells expressing the gene in one group.\n\n-   `condition_pct.2` Percentage of cells expressing the gene in another group.\n\n-   `condition_p_val_adj` P-value with multiple testing correction.\n\n::: callout-note\nThe more significant the difference between `pct.1` and `pct.2`, the higher the confidence for the marker gene. If `pct.1` is 0.9 and `pct.2` is 0.8, it is not as interesting as if `pct.2` is 0.1.\n\nMarker genes express in a specific cell type. If `pct.1` is low, such as 0.3, it is not as interesting as if it is 0.9.\n:::\n\nWe can visualize the marker gene expression by `FeaturePlot` and `VlnPlot`.\n\n```{r}\nFeaturePlot(object = integrate.filtered.rna, \n            features = c(\"GNLY\", \"GZMA\"),\n            order = TRUE,\n            min.cutoff = 'q10', \n            label = TRUE,\n            repel = TRUE)\n```\n\n```{r}\nVlnPlot(object = integrate.filtered.rna, \n        features = c(\"GNLY\", \"GZMA\"))\n```\n\n## 1.3 `FindMarkers`\n\nWe can use the `FindMarkers` to determine the differentially expressed genes between two clusters.\n\n```{r}\nexample_findmarkers <- FindMarkers(integrate.filtered.rna,\n                          assay = \"RNA\",\n                          ident.1 = 1,\n                          ident.2 = 2) %>% \n  rownames_to_column(\"gene\")\n```\n\n# 2. Automatic annotation\n\nSo far, we already look at the marker genes based on knowledge (manual annotation) and between clusters by differential expression analysis. The manual annotation usually takes time, and we might need to go back and forth to annotate the clusters. Another way to annotate the clusters is through the automatic annotation.\n\n## 2.1 Reference-based\n\nWe look at the publicly available dataset with annotation and build a reference set based on its information. Then we can \"transfer\" the annotation from the reference to the query. Seurat provides the interface to connect with `Azimuth`.\n\n::: callout-note\nBecause the annotation information is based on the reference set, the reference ideally is similar to the query. They may come from the same tissue, same organism, similar experimental procedure, etc.\n:::\n\n```{r}\nintegrate.filtered.rna <- Azimuth::RunAzimuth(integrate.filtered.rna,\n                                              reference = \"pbmcref\",\n                                              verbose = F)\n```\n\nWe can look at the automatic annotation on UMAP.\n\n```{r}\np1 <- DimPlot(integrate.filtered.rna, reduction = \"umap\", \n              group.by = \"predicted.celltype.l1\", \n              label = TRUE, label.size = 3 ,repel = TRUE) + \n  NoLegend()\n\np2 <- DimPlot(integrate.filtered.rna, reduction = \"umap\", \n              group.by = \"integrated_snn_res.0.6\", \n              label = TRUE, label.size = 3 ,repel = TRUE) + \n  NoLegend()\n\np1|p2\n```\n\n## 2.1 Marker-based\n\nThe `celldex` contains several curated reference datasets, mostly assembled from bulk RNA-seq or microarray data of sorted cell types. Here, we will use a reference constructed from Blueprint and ENCODE data (Martens and Stunnenberg 2013; The ENCODE Project Consortium 2012).\n\n```{r}\n# get reference\n# ref_encode <- BlueprintEncodeData()\nref_encode <- readRDS(\"data/blueprint_encode_ref.rds\")\n\n# perform annotation\nannot_encode <- SingleR(test = as.SingleCellExperiment(integrate.filtered.rna), \n                        ref = ref_encode, \n                        labels = ref_encode$label.main)\n\n# get labels into Seurat object\nintegrate.filtered.rna$annot_encode <- annot_encode$labels\n\n# Visualizae\nDimPlot(integrate.filtered.rna, \n        group.by = \"annot_encode\", \n        label = T, reduction = \"umap\")\n```\n\n# 3. Save\n\nSave the files into RData for documentation.\n\n```{r}\n# save(integrate.filtered.rna, expMat, file = \"data/intermediate_data/chapter6.RData\")\n```\n","srcMarkdownNoYaml":"\n\n```{r}\n# libraries for this chapter\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(data.table)\nlibrary(celldex)\nlibrary(SingleR)\nlibrary(ExperimentHub)\nlibrary(cellpypes)\n```\n\n# Load RData\n\nLoad the RData which contains all files from the previous chapter.\n\n```{r}\nload(\"data/intermediate_data/chapter5.RData\")\n```\n\n# 1. Find marker genes\n\n## 1.1 `FindAllMarkers`\n\nThis type of analysis is typically for evaluating a single sample group/condition. With the `FindAllMarkers` function, we are comparing each cluster to all other clusters to identify potential marker genes. The cells in each cluster are treated as replicates, and essentially a differential expression analysis is performed with some statistical test. By default, the test is Wilcoxon Rank Sum test.\n\nThe `FindAllMarkers` function has three arguments to determine if a gene is a marker gene.\n\n-   `logfc.threshold` Limit testing to genes that show, on average, at least an X-fold difference (log-scale) between the two groups of cells. The default is 0.25. Increasing `logfc.threshold` speeds up the function but can miss weaker signals.\n\n-   `min.pct` Only test genes that are detected in a minimum fraction of cells in either of the two populations. It is meant to speed up the function by not testing infrequently expressed genes. The default is 0.1.\n\n-   `only.pos` Only return positive markers (FALSE by default).\n\nOne may change the arguments depending on how stringent to be.\n\nWe look at the marker genes in the clusters in sample \"treated\".\n\n```{r}\ntreated.markers <- FindAllMarkers(subset(integrate.filtered.rna, subset = Sample_Name == \"treated\"), \n                                  assay = \"RNA\",\n                                  only.pos = TRUE, \n                                  min.pct = 0.25, \n                                  logfc.threshold = 0.25)\n```\n\nLet's look at the top 2 significant marker genes in each cluster.\n\n```{r}\ntreated.markers %>%\n    group_by(cluster) %>%\n    slice_max(n = 2, order_by = avg_log2FC)\n```\n\nWe get a table with the information on marker genes.\n\n`p_val` P-value before multiple testing.\n\n`avg_log2FC` Log2 fold change on the average gene expression between one cluster and the rest of cluster combined.\n\n`pct.1` Percentage of cells expressing the gene in one group. Here is one cluster.\n\n`pct.2` Percentage of cells expressing the gene in another group. Here is the rest of cluster combined.\n\n`p_val_adj` p-value with multiple testing correction.\n\n## 1.2 `FindConservedMarkers`\n\nWe have two samples, naïve and treated. We can find conserved markers between the conditions with the function, `FindConservedMarkers`.\n\nThis function internally separates out cells by sample group/condition, then performs differential gene expression testing for a single specified cluster against all other clusters.\n\nGene-level p-values are computed for each condition and then combined across groups using meta-analysis methods from the `MetaDE` R package.\n\nMany of the arguments in `FindConservedMarkers` are shared with `FindAllMarkers`. Here, we list some additional arguments when using `FindConservedMarkers`.\n\n-   `ident.1` This function only evaluates one cluster at a time; here, you would specify the cluster of interest.\n\n-   `grouping.var` The variable (column name) in your metadata specifies the separation of cells into groups.\n\n```{r}\nfcm <- FindConservedMarkers(integrate.filtered.rna,\n                     assay = \"RNA\",\n                     ident.1 = \"1\",\n                     grouping.var = \"Sample_Name\",\n                     only.pos = TRUE,\n                     min.diff.pct = 0.25,\n                     min.pct = 0.25,\n                     logfc.threshold = 0.25)\n\nhead(fcm)\n```\n\nWe also get a table with information on marker genes. The statistics are computed for each group (naïve vs. treated), and the last two columns are the combined p-value across the two groups.\n\n-   `condition_p_val` P-value before multiple testing.\n\n-   `condition_avg_log2FC` Log2 fold change on the average of gene expression between one cluster and the rest of the clusters combined.\n\n-   `condition_pct.1` Percentage of cells expressing the gene in one group.\n\n-   `condition_pct.2` Percentage of cells expressing the gene in another group.\n\n-   `condition_p_val_adj` P-value with multiple testing correction.\n\n::: callout-note\nThe more significant the difference between `pct.1` and `pct.2`, the higher the confidence for the marker gene. If `pct.1` is 0.9 and `pct.2` is 0.8, it is not as interesting as if `pct.2` is 0.1.\n\nMarker genes express in a specific cell type. If `pct.1` is low, such as 0.3, it is not as interesting as if it is 0.9.\n:::\n\nWe can visualize the marker gene expression by `FeaturePlot` and `VlnPlot`.\n\n```{r}\nFeaturePlot(object = integrate.filtered.rna, \n            features = c(\"GNLY\", \"GZMA\"),\n            order = TRUE,\n            min.cutoff = 'q10', \n            label = TRUE,\n            repel = TRUE)\n```\n\n```{r}\nVlnPlot(object = integrate.filtered.rna, \n        features = c(\"GNLY\", \"GZMA\"))\n```\n\n## 1.3 `FindMarkers`\n\nWe can use the `FindMarkers` to determine the differentially expressed genes between two clusters.\n\n```{r}\nexample_findmarkers <- FindMarkers(integrate.filtered.rna,\n                          assay = \"RNA\",\n                          ident.1 = 1,\n                          ident.2 = 2) %>% \n  rownames_to_column(\"gene\")\n```\n\n# 2. Automatic annotation\n\nSo far, we already look at the marker genes based on knowledge (manual annotation) and between clusters by differential expression analysis. The manual annotation usually takes time, and we might need to go back and forth to annotate the clusters. Another way to annotate the clusters is through the automatic annotation.\n\n## 2.1 Reference-based\n\nWe look at the publicly available dataset with annotation and build a reference set based on its information. Then we can \"transfer\" the annotation from the reference to the query. Seurat provides the interface to connect with `Azimuth`.\n\n::: callout-note\nBecause the annotation information is based on the reference set, the reference ideally is similar to the query. They may come from the same tissue, same organism, similar experimental procedure, etc.\n:::\n\n```{r}\nintegrate.filtered.rna <- Azimuth::RunAzimuth(integrate.filtered.rna,\n                                              reference = \"pbmcref\",\n                                              verbose = F)\n```\n\nWe can look at the automatic annotation on UMAP.\n\n```{r}\np1 <- DimPlot(integrate.filtered.rna, reduction = \"umap\", \n              group.by = \"predicted.celltype.l1\", \n              label = TRUE, label.size = 3 ,repel = TRUE) + \n  NoLegend()\n\np2 <- DimPlot(integrate.filtered.rna, reduction = \"umap\", \n              group.by = \"integrated_snn_res.0.6\", \n              label = TRUE, label.size = 3 ,repel = TRUE) + \n  NoLegend()\n\np1|p2\n```\n\n## 2.1 Marker-based\n\nThe `celldex` contains several curated reference datasets, mostly assembled from bulk RNA-seq or microarray data of sorted cell types. Here, we will use a reference constructed from Blueprint and ENCODE data (Martens and Stunnenberg 2013; The ENCODE Project Consortium 2012).\n\n```{r}\n# get reference\n# ref_encode <- BlueprintEncodeData()\nref_encode <- readRDS(\"data/blueprint_encode_ref.rds\")\n\n# perform annotation\nannot_encode <- SingleR(test = as.SingleCellExperiment(integrate.filtered.rna), \n                        ref = ref_encode, \n                        labels = ref_encode$label.main)\n\n# get labels into Seurat object\nintegrate.filtered.rna$annot_encode <- annot_encode$labels\n\n# Visualizae\nDimPlot(integrate.filtered.rna, \n        group.by = \"annot_encode\", \n        label = T, reduction = \"umap\")\n```\n\n# 3. Save\n\nSave the files into RData for documentation.\n\n```{r}\n# save(integrate.filtered.rna, expMat, file = \"data/intermediate_data/chapter6.RData\")\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"tidy":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"06_marker_identification.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.340","theme":"cosmo","title":"Chapter 6 Marker Identification"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}