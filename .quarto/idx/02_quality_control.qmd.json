{"title":"Chapter 2 Quality Control","markdown":{"yaml":{"title":"Chapter 2 Quality Control","execute":{"warning":false,"message":false}},"headingText":"libraries for this chapter","containsRefs":false,"markdown":"\n\n```{r}\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(data.table)\nlibrary(celldex)\nlibrary(SingleR)\nlibrary(ExperimentHub)\n```\n\n# Load RData\n\nLoad the RData which contains all files from previous chapter.\n\n```{r}\nload(\"data/intermediate_data/chapter1.RData\")\n```\n\n# 1. Metrics for quality control\n\nWhen creating a Seurat object, Seurat automatically creates some metadata for each cell. This information is stored in the `meta.data`.\n\n```{r}\nrna@meta.data %>% head()\n```\n\n`orig.ident` Sample identity or sample name. By default, it is \"SeuratProject\".\n\n`nCount_RNA` UMI counts per cell.\n\n`nFeature_RNA` Gene counts per cell.\n\n`Sample_Tag` The cell is from which sample tag.\n\n`Sample_Name` The cell is from which sample.\n\nQuality control is to filter out cell labels that are of low quality, e.g. dead cells.\n\nThe quality control of WTA relies on three **quality metrics**: `nCount_RNA`, `nFeature_RNA`, and mitochondrial percentage (percentage of UMIs of mitochondrial genes in a cell).\n\nLow quality cells have the below characteristics:\n\n1.  Low number of UMIs (`nCount_RNA` is low).\n2.  Low number of genes (`nFeature_RNA` is low).\n3.  High mitochondrial percentage.\n\nIn practice, we look at the distribution of quality metrics in cell population and set appropriate cutoff to filter out low quality cells.\n\n::: callout-tip\nThe targeted assay profiles a subset of genes, which are usually the genes of interest. Mitochondrial genes are often not included in the gene panel of the targeted assay.\n\nSo, the quality control of targeted assays will not look at mitochondrial percentage, and focus on `nCount_RNA` and `nFeature_RNA` only.\n:::\n\n# 2. Calculate mitochondrial percentage per cell\n\nSeurat has a convenient function, `PercentageFeatureSet`, to calculate the percentage of UMIs of mitochondrial genes in a cell.\n\n```{r}\nrna[[\"percent.mt\"]] <- PercentageFeatureSet(rna, pattern = \"^MT.\")\n```\n\n::: callout-tip\nThe mitochondrial genes typically include \"MT\" in their gene symbol. However, the pattern could be different, such as MT. or MT- or mt-. You may need to adjust the pattern to correctly calculate the percentage.\n:::\n\nThe `PercentageFeatureSet` takes in a `pattern` argument and searches through all feature names in the dataset for that pattern.\n\nSince we are looking for mitochondrial genes, we are searching for any gene names that begin with the pattern `^MT.`. For each cell, the function takes the sum of counts across all genes belonging to `^MT.`, and then divides it by the total counts for all genes. The result is stored in the `percent.mt` of `meta.data` .\n\n```{r}\nrna@meta.data %>% head\n```\n\n# 3. Assessing the quality metrics\n\nWe will assess the quality metrics, `nCount_RNA`, `nFeature_RNA`, `percent.mt`, and decide on which cells are of low quality and should be removed from the analysis.\n\n## 3.1 `nCount_RNA` UMI counts per cell\n\nWe look at `nCount_RNA` for the sum of UMI counts per cell.\n\n```{r}\nrna@meta.data %>% \n  ggplot(aes(color=Sample_Name, x=nCount_RNA, fill= Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  theme_classic() +\n  ylab(\"Cell density\") +\n  ggtitle(\"nCount_RNA\")\n```\n\n## 3.2 `nFeature_RNA` Gene counts per cell\n\nWe look at `nFeature_RNA` for sum of gene counts per cell. The majority of cells have gene counts more than 300.\n\n```{r}\nrna@meta.data %>% \n  ggplot(aes(color=Sample_Name, x=nFeature_RNA, fill= Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  theme_classic() +\n  ylab(\"Cell density\") +\n  ggtitle(\"nFeature_RNA\")\n```\n\n## 3.3 `percent.mt` Mitochondrial percentage per cell\n\nWe look at `percent.mt` for mitochondrial percentage per cell. The majority of cells have mitochondrial percentage below 25%.\n\n```{r}\nrna@meta.data %>% \n  ggplot(aes(color=Sample_Name, x=percent.mt, fill=Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  theme_classic() +\n  ggtitle(\"percent.mt\")\n```\n\n## 3.4 Combine metrics to come up the filtering threshold\n\nWe can combine the metrics to decide the filtering threshold.\n\n```{r}\nrna@meta.data %>% \n  ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) + \n  geom_point() + \n  scale_colour_gradient(low = \"gray90\", high = \"black\") +\n  stat_smooth(method=lm) +\n  scale_x_log10() + \n  scale_y_log10() + \n  theme_classic() +\n  geom_vline(xintercept = 500, colour = \"red\") +\n  geom_hline(yintercept = 300, colour = \"red\") +\n  facet_wrap(~Sample_Name) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n```\n\nThe data is fitted with a linear regression line. We expect when UMI counts increase, gene counts also increase.\n\nUpper right quadrant: Cells with high gene counts and UMI counts. We generally consider these cells to be good-quality cells.\n\nBottom right quadrant: Cells with low gene counts and UMI counts. We generally consider these cells are low-quality cells.\n\nDarker cells: Cells with high mitochondrial percentage. Many of these cells have low gene counts at the same time. This may indicate damaged/dying cells whose cytoplasmic mRNA leaks out through a broken membrane, so only mRNA located in the mitochondria is still conserved.\n\n# 4. Filter\n\n## 4.1 Filter on cells\n\nBased on the quality metrics, we use the following thresholds to filter out low quality cells:\n\n`nCount_RNA` \\> 500\n\n`nFeature_RNA` \\> 300\n\n`nFeature_RNA` \\< 5000\n\n`percent.mt` \\< 25%\n\n```{r}\nfiltered.rna <- subset(x = rna, \n                       subset = (nCount_RNA >= 500) & \n                         (nFeature_RNA >= 300) &\n                         (nFeature_RNA <= 5000) &\n                         (percent.mt < 25))\n```\n\n::: callout-important\nThe filtering thresholds should be decided based on assessing the quality metrics. They may change depending on the sample types, sequencing depth and other factors.\n:::\n\n## 4.2 Filter on genes\n\nAfter filtering on cells, some genes may have zero counts or are only expressed in few cells. These genes do not bring much information, and they reduce the average expression of a cell.\n\nWe keep only genes that are expressed in **five or more cells**. `GetAssayData` is a convenient command to get information from the Seurat object. We use `GetAssayData` to extract the UMI counts.\n\n```{r}\n# Extract counts\ncounts <- GetAssayData(object = filtered.rna, slot = \"counts\")\n\n# Output a logical matrix specifying for each gene whether or not \n# there are more than zero counts per cell\nnonzero <- counts > 0\n\n# Sum all TRUE values and return TRUE \n# if equal or more than 5 TRUE values per gene\nkeep_genes <- Matrix::rowSums(nonzero) >= 5\n\n# Only keep those genes\nfiltered_counts <- counts[keep_genes, ]\n\n# Create Seurat object\nfiltered.rna <- CreateSeuratObject(filtered_counts, meta.data = filtered.rna@meta.data)\n```\n\n::: callout-tip\nTargeted assay contains genes expressing in the profiling cells, so \"Filter on genes\" is usually not performed on targeted assays.\n:::\n\n::: callout-important\nIn this example, we keep only genes that are expressed in five or more cells. One may need to adjust the threshold.\n:::\n\n# 5. Re-assess metrics\n\nAfter filtering, we look back to the metrics to ensure the filtered data matches expectations and is suitable for downstream analysis. We plot all QC metrics using the filtered data.\n\n```{r}\nfiltered.rna@meta.data %>% \n  ggplot(aes(color=Sample_Name, x=nCount_RNA, fill= Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  theme_classic() +\n  ylab(\"Cell density\") +\n  ggtitle(\"nCount_RNA\")\n```\n\n```{r}\nfiltered.rna@meta.data %>% \n  ggplot(aes(color=Sample_Name, x=nFeature_RNA, fill= Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  theme_classic() +\n  ylab(\"Cell density\") +\n  ggtitle(\"nFeature_RNA\")\n```\n\n```{r}\nfiltered.rna@meta.data %>% \n  ggplot(aes(color=Sample_Name, x=percent.mt, fill=Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  theme_classic() +\n  ggtitle(\"percent.mt\")\n```\n\n```{r}\nfiltered.rna@meta.data %>% \n  ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) + \n  geom_point() + \n  scale_colour_gradient(low = \"gray90\", high = \"black\") +\n  stat_smooth(method=lm) +\n  scale_x_log10() + \n  scale_y_log10() + \n  theme_classic() +\n  geom_vline(xintercept = 500, color = \"red\") +\n  geom_hline(yintercept = 300, color = \"red\") +\n  facet_wrap(~Sample_Name)\n```\n\nCells that are considered of low quality in the bottom right quadrant are removed. We can also compare the cell number before and after filtering. The majority of cells are kept after filtering.\n\nBefore filtering:\n\n```{r}\nrna@meta.data %>% \n  group_by(Sample_Name) %>% \n  dplyr::summarise(cell_number = length(Sample_Name))\n```\n\nAfter filtering:\n\n```{r}\nfiltered.rna@meta.data %>% \n  group_by(Sample_Name) %>% \n  dplyr::summarise(cell_number = length(Sample_Name))\n```\n\n# 6. Save\n\nSave the files into RData for documentation. We do not need all files to continue the course, so we use `save` to save part of the files in RData.\n\n```{r}\n# save(filtered.rna, expMat, file = \"data/intermediate_data/chapter2.RData\")\n```\n","srcMarkdownNoYaml":"\n\n```{r}\n# libraries for this chapter\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(data.table)\nlibrary(celldex)\nlibrary(SingleR)\nlibrary(ExperimentHub)\n```\n\n# Load RData\n\nLoad the RData which contains all files from previous chapter.\n\n```{r}\nload(\"data/intermediate_data/chapter1.RData\")\n```\n\n# 1. Metrics for quality control\n\nWhen creating a Seurat object, Seurat automatically creates some metadata for each cell. This information is stored in the `meta.data`.\n\n```{r}\nrna@meta.data %>% head()\n```\n\n`orig.ident` Sample identity or sample name. By default, it is \"SeuratProject\".\n\n`nCount_RNA` UMI counts per cell.\n\n`nFeature_RNA` Gene counts per cell.\n\n`Sample_Tag` The cell is from which sample tag.\n\n`Sample_Name` The cell is from which sample.\n\nQuality control is to filter out cell labels that are of low quality, e.g. dead cells.\n\nThe quality control of WTA relies on three **quality metrics**: `nCount_RNA`, `nFeature_RNA`, and mitochondrial percentage (percentage of UMIs of mitochondrial genes in a cell).\n\nLow quality cells have the below characteristics:\n\n1.  Low number of UMIs (`nCount_RNA` is low).\n2.  Low number of genes (`nFeature_RNA` is low).\n3.  High mitochondrial percentage.\n\nIn practice, we look at the distribution of quality metrics in cell population and set appropriate cutoff to filter out low quality cells.\n\n::: callout-tip\nThe targeted assay profiles a subset of genes, which are usually the genes of interest. Mitochondrial genes are often not included in the gene panel of the targeted assay.\n\nSo, the quality control of targeted assays will not look at mitochondrial percentage, and focus on `nCount_RNA` and `nFeature_RNA` only.\n:::\n\n# 2. Calculate mitochondrial percentage per cell\n\nSeurat has a convenient function, `PercentageFeatureSet`, to calculate the percentage of UMIs of mitochondrial genes in a cell.\n\n```{r}\nrna[[\"percent.mt\"]] <- PercentageFeatureSet(rna, pattern = \"^MT.\")\n```\n\n::: callout-tip\nThe mitochondrial genes typically include \"MT\" in their gene symbol. However, the pattern could be different, such as MT. or MT- or mt-. You may need to adjust the pattern to correctly calculate the percentage.\n:::\n\nThe `PercentageFeatureSet` takes in a `pattern` argument and searches through all feature names in the dataset for that pattern.\n\nSince we are looking for mitochondrial genes, we are searching for any gene names that begin with the pattern `^MT.`. For each cell, the function takes the sum of counts across all genes belonging to `^MT.`, and then divides it by the total counts for all genes. The result is stored in the `percent.mt` of `meta.data` .\n\n```{r}\nrna@meta.data %>% head\n```\n\n# 3. Assessing the quality metrics\n\nWe will assess the quality metrics, `nCount_RNA`, `nFeature_RNA`, `percent.mt`, and decide on which cells are of low quality and should be removed from the analysis.\n\n## 3.1 `nCount_RNA` UMI counts per cell\n\nWe look at `nCount_RNA` for the sum of UMI counts per cell.\n\n```{r}\nrna@meta.data %>% \n  ggplot(aes(color=Sample_Name, x=nCount_RNA, fill= Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  theme_classic() +\n  ylab(\"Cell density\") +\n  ggtitle(\"nCount_RNA\")\n```\n\n## 3.2 `nFeature_RNA` Gene counts per cell\n\nWe look at `nFeature_RNA` for sum of gene counts per cell. The majority of cells have gene counts more than 300.\n\n```{r}\nrna@meta.data %>% \n  ggplot(aes(color=Sample_Name, x=nFeature_RNA, fill= Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  theme_classic() +\n  ylab(\"Cell density\") +\n  ggtitle(\"nFeature_RNA\")\n```\n\n## 3.3 `percent.mt` Mitochondrial percentage per cell\n\nWe look at `percent.mt` for mitochondrial percentage per cell. The majority of cells have mitochondrial percentage below 25%.\n\n```{r}\nrna@meta.data %>% \n  ggplot(aes(color=Sample_Name, x=percent.mt, fill=Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  theme_classic() +\n  ggtitle(\"percent.mt\")\n```\n\n## 3.4 Combine metrics to come up the filtering threshold\n\nWe can combine the metrics to decide the filtering threshold.\n\n```{r}\nrna@meta.data %>% \n  ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) + \n  geom_point() + \n  scale_colour_gradient(low = \"gray90\", high = \"black\") +\n  stat_smooth(method=lm) +\n  scale_x_log10() + \n  scale_y_log10() + \n  theme_classic() +\n  geom_vline(xintercept = 500, colour = \"red\") +\n  geom_hline(yintercept = 300, colour = \"red\") +\n  facet_wrap(~Sample_Name) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n```\n\nThe data is fitted with a linear regression line. We expect when UMI counts increase, gene counts also increase.\n\nUpper right quadrant: Cells with high gene counts and UMI counts. We generally consider these cells to be good-quality cells.\n\nBottom right quadrant: Cells with low gene counts and UMI counts. We generally consider these cells are low-quality cells.\n\nDarker cells: Cells with high mitochondrial percentage. Many of these cells have low gene counts at the same time. This may indicate damaged/dying cells whose cytoplasmic mRNA leaks out through a broken membrane, so only mRNA located in the mitochondria is still conserved.\n\n# 4. Filter\n\n## 4.1 Filter on cells\n\nBased on the quality metrics, we use the following thresholds to filter out low quality cells:\n\n`nCount_RNA` \\> 500\n\n`nFeature_RNA` \\> 300\n\n`nFeature_RNA` \\< 5000\n\n`percent.mt` \\< 25%\n\n```{r}\nfiltered.rna <- subset(x = rna, \n                       subset = (nCount_RNA >= 500) & \n                         (nFeature_RNA >= 300) &\n                         (nFeature_RNA <= 5000) &\n                         (percent.mt < 25))\n```\n\n::: callout-important\nThe filtering thresholds should be decided based on assessing the quality metrics. They may change depending on the sample types, sequencing depth and other factors.\n:::\n\n## 4.2 Filter on genes\n\nAfter filtering on cells, some genes may have zero counts or are only expressed in few cells. These genes do not bring much information, and they reduce the average expression of a cell.\n\nWe keep only genes that are expressed in **five or more cells**. `GetAssayData` is a convenient command to get information from the Seurat object. We use `GetAssayData` to extract the UMI counts.\n\n```{r}\n# Extract counts\ncounts <- GetAssayData(object = filtered.rna, slot = \"counts\")\n\n# Output a logical matrix specifying for each gene whether or not \n# there are more than zero counts per cell\nnonzero <- counts > 0\n\n# Sum all TRUE values and return TRUE \n# if equal or more than 5 TRUE values per gene\nkeep_genes <- Matrix::rowSums(nonzero) >= 5\n\n# Only keep those genes\nfiltered_counts <- counts[keep_genes, ]\n\n# Create Seurat object\nfiltered.rna <- CreateSeuratObject(filtered_counts, meta.data = filtered.rna@meta.data)\n```\n\n::: callout-tip\nTargeted assay contains genes expressing in the profiling cells, so \"Filter on genes\" is usually not performed on targeted assays.\n:::\n\n::: callout-important\nIn this example, we keep only genes that are expressed in five or more cells. One may need to adjust the threshold.\n:::\n\n# 5. Re-assess metrics\n\nAfter filtering, we look back to the metrics to ensure the filtered data matches expectations and is suitable for downstream analysis. We plot all QC metrics using the filtered data.\n\n```{r}\nfiltered.rna@meta.data %>% \n  ggplot(aes(color=Sample_Name, x=nCount_RNA, fill= Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  theme_classic() +\n  ylab(\"Cell density\") +\n  ggtitle(\"nCount_RNA\")\n```\n\n```{r}\nfiltered.rna@meta.data %>% \n  ggplot(aes(color=Sample_Name, x=nFeature_RNA, fill= Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  theme_classic() +\n  ylab(\"Cell density\") +\n  ggtitle(\"nFeature_RNA\")\n```\n\n```{r}\nfiltered.rna@meta.data %>% \n  ggplot(aes(color=Sample_Name, x=percent.mt, fill=Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  theme_classic() +\n  ggtitle(\"percent.mt\")\n```\n\n```{r}\nfiltered.rna@meta.data %>% \n  ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) + \n  geom_point() + \n  scale_colour_gradient(low = \"gray90\", high = \"black\") +\n  stat_smooth(method=lm) +\n  scale_x_log10() + \n  scale_y_log10() + \n  theme_classic() +\n  geom_vline(xintercept = 500, color = \"red\") +\n  geom_hline(yintercept = 300, color = \"red\") +\n  facet_wrap(~Sample_Name)\n```\n\nCells that are considered of low quality in the bottom right quadrant are removed. We can also compare the cell number before and after filtering. The majority of cells are kept after filtering.\n\nBefore filtering:\n\n```{r}\nrna@meta.data %>% \n  group_by(Sample_Name) %>% \n  dplyr::summarise(cell_number = length(Sample_Name))\n```\n\nAfter filtering:\n\n```{r}\nfiltered.rna@meta.data %>% \n  group_by(Sample_Name) %>% \n  dplyr::summarise(cell_number = length(Sample_Name))\n```\n\n# 6. Save\n\nSave the files into RData for documentation. We do not need all files to continue the course, so we use `save` to save part of the files in RData.\n\n```{r}\n# save(filtered.rna, expMat, file = \"data/intermediate_data/chapter2.RData\")\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"tidy":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"02_quality_control.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.340","theme":"cosmo","title":"Chapter 2 Quality Control"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}