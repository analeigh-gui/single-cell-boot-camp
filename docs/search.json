[
  {
    "objectID": "log.html",
    "href": "log.html",
    "title": "Log",
    "section": "",
    "text": "Extra plots\n\nseuratObj$test &lt;- ifelse(seuratObj$nFeature_RNA &lt; 300 | seuratObj$nCount_RNA &lt; 500, \"low\", \"high\")\n\n\nseuratObj@meta.data %&gt;%\n  ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=test)) +\n  geom_point() +\n  scale_colour_manual(values = c(\"black\", \"white\")) +\n  # stat_smooth(method=lm) +\n  scale_x_log10() +\n  scale_y_log10() +\n  theme_classic() +\n  geom_vline(xintercept = 500, colour = \"red\") +\n  geom_hline(yintercept = 300, colour = \"red\") +\n  facet_wrap(~Sample_Name) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\nMove “multiplet” and “undetermined” removal to Chapter 02 Quality Control\nChapter 01 Update data import\n\n# update Seurat object\nseuratObj[[\"RNA\"]] &lt;- as(object = seuratObj[[\"RNA\"]], Class = \"Assay5\") \n\n# get bioproduct names for RNA and AbSeq\nab_name &lt;- grep(\"pAbO\", rownames(seuratObj), value = T, ignore.case = T)\nrna_name &lt;- rownames(seuratObj)[-which(rownames(seuratObj) %in% ab_name)]\n\n# get rna and AbSeq UMI counts, meta data\nab &lt;- GetAssayData(seuratObj[[\"RNA\"]], features = ab_name)\nrna &lt;- GetAssayData(seuratObj[[\"RNA\"]], features = rna_name)\n\n# recreate seurat object\nseuratObj[[\"RNA\"]] &lt;- CreateAssay5Object(counts = rna)\nseuratObj[[\"ADT\"]] &lt;- CreateAssay5Object(counts = ab)"
  },
  {
    "objectID": "log.html#setup",
    "href": "log.html#setup",
    "title": "Log",
    "section": "Setup",
    "text": "Setup\n\nAdd instruction to install Seurat V4.\nAdd instruction to update packages.\nDelete packages to be installed: SingleR, celldex, muscat.\nAdd packages to be installed: HGNChelper, ggpubr, RTools.\nUpdate Data download link."
  },
  {
    "objectID": "log.html#precourse-preperation---r",
    "href": "log.html#precourse-preperation---r",
    "title": "Log",
    "section": "Precourse preperation - R",
    "text": "Precourse preperation - R\n\nAdd data download link"
  },
  {
    "objectID": "log.html#chapter-5-clustering",
    "href": "log.html#chapter-5-clustering",
    "title": "Log",
    "section": "Chapter 5 Clustering",
    "text": "Chapter 5 Clustering\n\nAdd clustree"
  },
  {
    "objectID": "log.html#chapter-6-marker-identification",
    "href": "log.html#chapter-6-marker-identification",
    "title": "Log",
    "section": "Chapter 6 Marker Identification",
    "text": "Chapter 6 Marker Identification\n\nReplace singleR with ScType\n\nAdd VlnPlot stack plot"
  },
  {
    "objectID": "log.html#chapter-7-differential-expression-analysis",
    "href": "log.html#chapter-7-differential-expression-analysis",
    "title": "Log",
    "section": "Chapter 7 Differential Expression Analysis",
    "text": "Chapter 7 Differential Expression Analysis\n\nReplace muscat with functions in Seurat V4 to perform pseudobulk analysis"
  },
  {
    "objectID": "log.html#chapter-8",
    "href": "log.html#chapter-8",
    "title": "Log",
    "section": "Chapter 8",
    "text": "Chapter 8\n\nReplace ranking in GSEA gene list from stat to log2FC\nForce enrich bar plots to plot GO terms with the key word “T Cell”"
  },
  {
    "objectID": "log.html#error-log",
    "href": "log.html#error-log",
    "title": "Log",
    "section": "Error log",
    "text": "Error log\n\nWhen you run RunUMAP…\n\n\nSolution: Downgrading Matrix\nIf Mac is updated to Sonoma 14.x.x, you may see errors related to gfortran, like:\nld: warning: search path ‘/opt/R/arm64/gfortran/lib/gcc/aarch64-apple-darwin20.2.0/11.0.0’ not found\nld: warning: search path ‘/opt/R/arm64/gfortran/lib’ not found\nld: library ‘gfortran’ not found\nIf that’s the case, please download and install gfortran-12.2-universal.pkg https://cran.r-project.org/bin/macosx/tools/ before proceed.\n\ninstall.packages(\"remotes\")\nremotes::install_version(\"Matrix\", version = \"1.6-1\")\npackageVersion(\"Matrix\")\n\nSource: https://cran.r-project.org/bin/macosx/tools/\n\nWhen you run getBM…\n\n\nSolution: Downgrading dbplyr\n\ndevtools::install_version(\"dbplyr\", version = \"2.3.4\")\n\nSource: https://stackoverflow.com/questions/77370659/error-failed-to-collect-lazy-table-caused-by-error-in-db-collect-using\n\nWhen you run useMart…\n\n\nSolution: Go to http://status.ensembl.org to check the status of Ensembl. If it says service is down, wait a few hours and try again."
  },
  {
    "objectID": "bioinformatics_update.html",
    "href": "bioinformatics_update.html",
    "title": "Bioinformatics update",
    "section": "",
    "text": "https://github.com/crazyhottommy/TCR-BCR-seq-analysis"
  },
  {
    "objectID": "bioinformatics_update.html#tcr-bcr-seq-analysis",
    "href": "bioinformatics_update.html#tcr-bcr-seq-analysis",
    "title": "Bioinformatics update",
    "section": "",
    "text": "https://github.com/crazyhottommy/TCR-BCR-seq-analysis"
  },
  {
    "objectID": "bioinformatics_update.html#mpg-primer-understand-single-cell-atac-seq-data-analysis-2024",
    "href": "bioinformatics_update.html#mpg-primer-understand-single-cell-atac-seq-data-analysis-2024",
    "title": "Bioinformatics update",
    "section": "MPG Primer: Understand Single Cell ATAC-Seq Data Analysis (2024)",
    "text": "MPG Primer: Understand Single Cell ATAC-Seq Data Analysis (2024)\nhttps://www.youtube.com/watch?v=sUq4yTIJqvk&t=555s"
  },
  {
    "objectID": "bioinformatics_update.html#sctopogan-diagnosis-of-single-cell-rna-seq-data-using-topological-generative-adversarial-networks",
    "href": "bioinformatics_update.html#sctopogan-diagnosis-of-single-cell-rna-seq-data-using-topological-generative-adversarial-networks",
    "title": "Bioinformatics update",
    "section": "scTopoGAN: Diagnosis of single-cell RNA-seq data using topological generative adversarial networks",
    "text": "scTopoGAN: Diagnosis of single-cell RNA-seq data using topological generative adversarial networks\nhttps://academic.oup.com/bioinformaticsadvances/article/3/1/vbad171/7450146"
  },
  {
    "objectID": "bioinformatics_update.html#review-article-single-cell-immune-repertoire-analysis",
    "href": "bioinformatics_update.html#review-article-single-cell-immune-repertoire-analysis",
    "title": "Bioinformatics update",
    "section": "Review article: Single-cell immune repertoire analysis",
    "text": "Review article: Single-cell immune repertoire analysis\nhttps://www.nature.com/articles/s41592-024-02243-4"
  },
  {
    "objectID": "bioinformatics_update.html#gptcelltype",
    "href": "bioinformatics_update.html#gptcelltype",
    "title": "Bioinformatics update",
    "section": "GPTCelltype",
    "text": "GPTCelltype\nGithub repository: https://github.com/Winnie09/GPTCelltype\nGPTCelltype is a package that uses OpenAI’s GPT-3 and GPT-4 models to annotate cell types based on marker genes. The package is designed to work with Seurat objects and can be used to annotate cell types in single-cell RNA-seq data."
  },
  {
    "objectID": "06_differential_expression_analysis.html",
    "href": "06_differential_expression_analysis.html",
    "title": "Chapter 6 Differential Expression Analysis",
    "section": "",
    "text": "# libraries for this chapter\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(data.table)\nlibrary(ggpubr)"
  },
  {
    "objectID": "06_differential_expression_analysis.html#de-analysis-across-conditions",
    "href": "06_differential_expression_analysis.html#de-analysis-across-conditions",
    "title": "Chapter 6 Differential Expression Analysis",
    "section": "1.1 DE analysis across conditions",
    "text": "1.1 DE analysis across conditions\nIn the last chapter, we used FindMarkers to find the marker genes between two clusters by specifying ident.1 and ident.2.\nChanging the ident.1 and ident.2 arguments, we can perform differential expression analysis between two groups.\nFor instance, we want to find genes deferentially expressed between naïve and treated PBMC.\n\n# change default assay to \"RNA\"\nDefaultAssay(filtered) &lt;- \"RNA\"\n\n# change default identity to \"Sample_Name\"\nIdents(filtered) &lt;- \"Sample_Name\"\n\n# Find genes differentially expressed\n# SampleTag02_hs: treated, SampleTag01_hs: naive\ntreated_naive &lt;- \n  FindMarkers(filtered, ident.1 = \"SampleTag02_hs\", ident.2 = \"SampleTag01_hs\") %&gt;% \n  rownames_to_column(\"gene\") %&gt;% \n  dplyr::filter(p_val_adj &lt; 0.05)\n\nWe can compare the gene expression between two groups by specifying ident.1 and ident.2.\n\nhead(treated_naive)\n\n   gene         p_val avg_log2FC pct.1 pct.2     p_val_adj\n1 STAT1  0.000000e+00   3.536478 0.855 0.165  0.000000e+00\n2  GBP1  0.000000e+00   4.261958 0.688 0.072  0.000000e+00\n3  TAP1 6.548471e-297   2.605137 0.758 0.178 1.847127e-292\n4  GBP4 5.149525e-268   3.292704 0.642 0.087 1.452527e-263\n5  XAF1 3.277283e-251   3.115752 0.639 0.113 9.244233e-247\n6  GBP5 2.251508e-247   3.182798 0.625 0.094 6.350828e-243\n\n\n\ngene Gene symbol.\np_val P-value without multiple testing.\navg_log2FC log2 fold-change of the average expression between the two groups.\npct.1 Percentage of cells in ident.1 expressing the gene.\npct.2 Percentage of cells in ident.2 expressing the gene.\np_val_adj Adjusted p-value."
  },
  {
    "objectID": "06_differential_expression_analysis.html#perform-de-analysis-within-the-same-cell-type-across-conditions",
    "href": "06_differential_expression_analysis.html#perform-de-analysis-within-the-same-cell-type-across-conditions",
    "title": "Chapter 6 Differential Expression Analysis",
    "section": "1.2 Perform DE analysis within the same cell type across conditions",
    "text": "1.2 Perform DE analysis within the same cell type across conditions\nWe can also perform DE analysis within the same cell type across conditions.\n\nfiltered$predicted.celltype.l1.tag &lt;- paste(filtered$predicted.celltype.l1, filtered$Sample_Name, sep = \"_\")\n\n# Find genes differentially expressed between activated vs. naive samples in CD4 T cells\nIdents(filtered) &lt;- \"predicted.celltype.l1.tag\"\n\ncd4t.deg &lt;- FindMarkers(filtered, \n                       ident.1 = \"CD4 T_SampleTag02_hs\", \n                       ident.2 = \"CD4 T_SampleTag01_hs\", \n                       verbose = FALSE)\n\nhead(cd4t.deg, n = 10)\n\n                 p_val avg_log2FC pct.1 pct.2     p_val_adj\nSTAT1    5.243685e-251  3.5416430 0.887 0.150 1.479086e-246\nIL7R     1.388277e-199 -2.7488648 0.404 0.856 3.915912e-195\nENO1     1.086061e-190  3.3819451 0.772 0.208 3.063453e-186\nTAP1     2.524773e-174  2.7602697 0.765 0.144 7.121627e-170\nHSP90AB1 1.010564e-172  2.5879009 0.864 0.532 2.850497e-168\nHSP90AA1 2.939542e-160  2.7729586 0.841 0.483 8.291566e-156\nGBP1     3.035576e-156  3.2311894 0.673 0.081 8.562448e-152\nLDHA     2.262665e-154  2.9055736 0.712 0.194 6.382300e-150\nTUBA1B   1.419730e-152  3.7297385 0.669 0.160 4.004633e-148\nRPS27    7.055812e-149 -0.8902341 0.981 1.000 1.990233e-144"
  },
  {
    "objectID": "06_differential_expression_analysis.html#setup",
    "href": "06_differential_expression_analysis.html#setup",
    "title": "Chapter 6 Differential Expression Analysis",
    "section": "2.1 Setup",
    "text": "2.1 Setup\nLet’s assume we have three biological replicates in each condition (we make them up for the purpose of illustration).\n\n# make a fake group information\nfiltered$donor &lt;- sample(x = c('A', 'B', 'C'), size = ncol(filtered), replace = TRUE)\n\npseudo &lt;- AggregateExpression(filtered, assays = \"RNA\", return.seurat = T, \n                              group.by = c(\"Sample_Name\", \"donor\", \"predicted.celltype.l1\"))\n\n# perform pseudobulk\npseudo$predicted.celltype.l1.tag &lt;- paste(pseudo$predicted.celltype.l1, pseudo$Sample_Name, sep = \"_\")\n\nIdents(pseudo) &lt;- \"predicted.celltype.l1.tag\"\n\ncd4t.bulk &lt;- FindMarkers(object = pseudo, \n                         ident.1 = \"CD4 T_SampleTag02-hs\", \n                         ident.2 = \"CD4 T_SampleTag01-hs\",\n                         test.use = \"DESeq2\")\n\nhead(cd4t.bulk, n = 15)\n\n         p_val avg_log2FC pct.1 pct.2 p_val_adj\nACTB         0   1.858575     1     1         0\nACTG1        0   2.514958     1     1         0\nENO1         0   3.640279     1     1         0\nFYB1         0  -2.422661     1     1         0\nHSP90AA1     0   3.279807     1     1         0\nHSP90AB1     0   3.037042     1     1         0\nHSPA8        0   2.439773     1     1         0\nIL7R         0  -3.625866     1     1         0\nMALAT1       0  -2.352007     1     1         0\nNPM1         0   1.765282     1     1         0\nPFN1         0   1.688739     1     1         0\nPPIA         0   2.053361     1     1         0\nPTMA         0   1.211173     1     1         0\nRAN          0   2.966751     1     1         0\nRPS27        0  -1.502292     1     1         0"
  },
  {
    "objectID": "04_clustering.html",
    "href": "04_clustering.html",
    "title": "Chapter 4 Clustering",
    "section": "",
    "text": "# libraries for this chapter\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(data.table)\nlibrary(clustree)\nlibrary(HGNChelper)\n\n1. Clustering\nNow that we have our high quality cells, we want to know the population has how many cell clusters.\nSeurat uses a graph-based clustering approach, which embeds cells in a graph structure, using a K-nearest neighbor (KNN) graph (by default), with edges drawn between cells with similar gene expression patterns. Then, it attempts to partition this graph into highly interconnected ‘quasi-cliques’ or ‘communities’.\nWe will use the FindClusters function to perform the graph-based clustering. The resolution is an important argument that sets the “granularity” of the downstream clustering and will need to be optimized for every individual experiment.\n\n\n\n\n\n\nImportant\n\n\n\nIncreasing resolution value leads to a greater number of clusters, which is often required for larger datasets.\n\n\nThe FindClusters function allows us to enter a series of resolutions and will calculate the “granularity” of the clustering. This is very helpful for testing which resolution works for moving forward without having to run the function for each resolution.\n\n# Determine the K-nearest neighbor graph\nfiltered &lt;- FindNeighbors(object = filtered, dims = 1:20)\n                                \n# Determine the clusters for various resolutions                                \nfiltered &lt;- FindClusters(object = filtered,\n                         resolution = c(0.2, 0.4, 0.6,  0.8, 1, 1.2, 1.4),\n                         verbose = F)\n\nThe meta.data has a separate column for each of the different resolution calculated. We can look at how many clusters in each resolution.\n\nfiltered@meta.data %&gt;% \n  dplyr::select(contains(\"RNA_snn\")) %&gt;% \n  map_int(~ unique(.x) %&gt;% length)\n\nRNA_snn_res.0.2 RNA_snn_res.0.4 RNA_snn_res.0.6 RNA_snn_res.0.8   RNA_snn_res.1 \n              9              12              15              16              17 \nRNA_snn_res.1.2 RNA_snn_res.1.4 \n             18              19 \n\n\nWe can use plot the clustree to see how cells change clusters in different resolutions.\n\nclustree(filtered, prefix = \"RNA_snn_res.\")\n\n\n\n\nWe can see that some clusters are very distinct and do not change with the value of resolution. On the right side of the tree, we see a single cluster that splits into the multiple clusters. The tree becomes messier as the resolution increases. There are nodes with multiple incoming edges. This is a good indication that we have over clustered the data.\nWe start with the resolution of 0.2. We assign the identity of the clusters using the Idents function to specify that we want to look at the clusters calculating with resolution = 0.2.\n\nIdents(object = filtered) &lt;- \"RNA_snn_res.0.2\"\n\n# UMAP visualization\nDimPlot(filtered,\n        reduction = \"umap\",\n        label = TRUE,\n        label.size = 6)\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nChange to other resolution values. How do the clusters change?\n\n\n2. Distribution of cells per cluster\nThe number of clusters are sensitive to the resolution. The two sampels in the demo dataset are both PBMC, so we expect each cluster contains cells from both samples.\n\nFetchData(filtered, \n          vars = c(\"ident\", \"Sample_Name\")) %&gt;%\n  dplyr::count(ident, Sample_Name) %&gt;%\n  tidyr::spread(ident, n)\n\n     Sample_Name    0   1   2   3   4   5  6  7  8\n1 SampleTag01_hs 1101   2   7 285 253  68 91 34 10\n2 SampleTag02_hs  573 916 451  11   6 178 71 59 45\n\n\nWe can split the UMAP by sample.\n\n# UMAP of cells in each cluster by sample\nDimPlot(filtered, \n        label = TRUE, \n        split.by = \"Sample_Name\")  + NoLegend()\n\n\n\n\n3. Exploring known cell type markers\nWe can explore some known cell type markers to get an idea about the identity of clusters.\nSome typical cell type markers:\n\nCD14+ monocytes: CD14, LYZ\nConventional dendritic cells: FCER1A, CST3\nB cells: CD79A, MS4A1\nT cells: CD3D\nCD4+ T cells: CD3D, IL7R, CCR7\nCD8+ T cells: CD3D, CD8A\nNK cells: GNLY, NKG7\nMacrophages: MARCO, ITGAM, ADGRE1\n\nThe FeaturePlot makes it easy to visualize a handful of genes using the gene IDs stored in the Seurat object. We can easily explore the expression of known gene markers on top of our UMAPs. Let’s go through and determine the identities of the clusters. To access the normalized expression levels of all genes, we can use the normalized counts stored in the RNA assay slot.\n\nDefaultAssay(filtered) &lt;- \"RNA\"\n\n\nCD14+ monocytes: CD14, LYZ\n\n\nFeaturePlot(filtered, \n            reduction = \"umap\", \n            features = c(\"CD14\", \"LYZ\"), \n            order = TRUE,\n            min.cutoff = 'q10', \n            label = TRUE)\n\n\n\n\n\nB cells: CD79A, MS4A1\n\n\nFeaturePlot(filtered, \n            reduction = \"umap\", \n            features = c(\"CD79A\", \"MS4A1\"), \n            order = TRUE,\n            min.cutoff = 'q10', \n            label = TRUE)\n\n\n\n\n\nNK cells: GNLY, NKG7\n\n\nFeaturePlot(filtered, \n            reduction = \"umap\", \n            features = c(\"GNLY\", \"NKG7\"), \n            order = TRUE,\n            min.cutoff = 'q10', \n            label = TRUE)\n\n\n\n\n\nT cells: CD3D\n\n\nFeaturePlot(filtered, \n            reduction = \"umap\", \n            features = c(\"CD3D\"), \n            order = TRUE,\n            min.cutoff = 'q10', \n            label = TRUE)\n\n\n\n\n\nCD4+ T cells: CD3D, IL7R, CCR7\n\n\nFeaturePlot(filtered, \n            reduction = \"umap\", \n            features = c(\"CD3D\", \"IL7R\", \"CCR7\"), \n            order = TRUE,\n            min.cutoff = 'q10', \n            label = TRUE)\n\n\n\n\n\nCD8+ T cells: CD3D, CD8A\n\n\nFeaturePlot(filtered, \n            reduction = \"umap\", \n            features = c(\"CD3D\", \"CD8A\"), \n            order = TRUE,\n            min.cutoff = 'q10', \n            label = TRUE)"
  },
  {
    "objectID": "02_quality_control.html",
    "href": "02_quality_control.html",
    "title": "Chapter 2 Quality Control",
    "section": "",
    "text": "# libraries for this chapter\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(data.table)"
  },
  {
    "objectID": "02_quality_control.html#ncount_rna-umi-counts-per-cell",
    "href": "02_quality_control.html#ncount_rna-umi-counts-per-cell",
    "title": "Chapter 2 Quality Control",
    "section": "4.1 nCount_RNA UMI counts per cell",
    "text": "4.1 nCount_RNA UMI counts per cell\nWe look at nCount_RNA for the sum of UMI counts per cell. The majority of cells have UMI counts above 500.\n\nseuratObj@meta.data %&gt;% \n  ggplot(aes(color=Sample_Name, x=nCount_RNA, fill= Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  theme_classic() +\n  ylab(\"Cell density\") +\n  ggtitle(\"nCount_RNA\")"
  },
  {
    "objectID": "02_quality_control.html#nfeature_rna-gene-counts-per-cell",
    "href": "02_quality_control.html#nfeature_rna-gene-counts-per-cell",
    "title": "Chapter 2 Quality Control",
    "section": "4.2 nFeature_RNA Gene counts per cell",
    "text": "4.2 nFeature_RNA Gene counts per cell\nWe look at nFeature_RNA for sum of gene counts per cell. The majority of cells have gene counts above 300.\n\nseuratObj@meta.data %&gt;% \n  ggplot(aes(color=Sample_Name, x=nFeature_RNA, fill= Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  theme_classic() +\n  ylab(\"Cell density\") +\n  ggtitle(\"nFeature_RNA\")"
  },
  {
    "objectID": "02_quality_control.html#percent.mt-mitochondrial-percentage-per-cell",
    "href": "02_quality_control.html#percent.mt-mitochondrial-percentage-per-cell",
    "title": "Chapter 2 Quality Control",
    "section": "3.3 percent.mt Mitochondrial percentage per cell",
    "text": "3.3 percent.mt Mitochondrial percentage per cell\nWe look at percent.mt for mitochondrial percentage per cell. The majority of cells have mitochondrial percentage below 25%.\n\nseuratObj@meta.data %&gt;% \n  ggplot(aes(color=Sample_Name, x=percent.mt, fill=Sample_Name)) + \n  geom_density(alpha = 0.2) + \n  theme_classic() +\n  ggtitle(\"percent.mt\")"
  },
  {
    "objectID": "02_quality_control.html#combine-metrics-to-come-up-with-the-filtering-threshold",
    "href": "02_quality_control.html#combine-metrics-to-come-up-with-the-filtering-threshold",
    "title": "Chapter 2 Quality Control",
    "section": "3.4 Combine metrics to come up with the filtering threshold",
    "text": "3.4 Combine metrics to come up with the filtering threshold\nWe can combine the metrics to decide the filtering threshold.\n\nseuratObj@meta.data %&gt;% \n  ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) + \n  geom_point() + \n  scale_colour_gradient(low = \"gray90\", high = \"black\") +\n  stat_smooth(method=lm) +\n  scale_x_log10() + \n  scale_y_log10() + \n  theme_classic() +\n  geom_vline(xintercept = 500, colour = \"red\") +\n  geom_hline(yintercept = 300, colour = \"red\") +\n  facet_wrap(~Sample_Name) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\n\n\n\nThe data is fitted with a linear regression line. We expect when UMI counts increase, gene counts also increase.\nUpper right quadrant: Cells with high gene counts and UMI counts. We generally consider these cells to be good-quality cells.\nBottom right quadrant: Cells with low gene counts and UMI counts. We generally consider these cells are low-quality cells.\nDarker cells: Cells with high mitochondrial percentage. Many of these cells have low gene counts at the same time. This may indicate damaged/dying cells whose cytoplasmic mRNA leaks out through a broken membrane, so only mRNA located in the mitochondria is still conserved."
  },
  {
    "objectID": "02_quality_control.html#filter-on-cells",
    "href": "02_quality_control.html#filter-on-cells",
    "title": "Chapter 2 Quality Control",
    "section": "5.1 Filter on cells",
    "text": "5.1 Filter on cells\nBased on the quality metrics, we use the following thresholds to filter out low quality cells. The filtering thresholds should be decided based on the distribution of quality metrics.\nnCount_RNA &gt; 500\nnFeature_RNA &gt; 300\nnFeature_RNA &lt; 5000\npercent.mt &lt; 25%\n\nfiltered &lt;- subset(x = seuratObj, \n                       subset = (nCount_RNA &gt;= 500) & \n                         (nFeature_RNA &gt;= 300) &\n                         (nFeature_RNA &lt;= 5000) &\n                         (percent.mt &lt; 25))"
  },
  {
    "objectID": "00_setup.html",
    "href": "00_setup.html",
    "title": "Setup R and RStudio on Desktop",
    "section": "",
    "text": "1. R and RStudio\nPlease follow the instruction to set up the most up to date R and RStudio on desktop: https://posit.co/download/rstudio-desktop/\n2. Install R packages\n\n\n\n\n\n\nNote\n\n\n\nInstall the packages in the order listed below. The package names are case sensitive.\n\n\n\nOnly for windows machines: Please download and install RTools from https://cran.r-project.org/bin/windows/Rtools/.\nInstall the packages listed below one by one from CRAN using the install.packages() function.\n\ninstall.packages(\"tidyverse\")\ninstall.packages(\"Matrix\")\ninstall.packages(\"RCurl\")\ninstall.packages(\"scales\")\ninstall.packages(\"data.table\")\ninstall.packages(\"readxl\")\ninstall.packages(\"BiocManager\")\ninstall.packages(\"ggpubr\")\ninstall.packages(\"Seurat\")\n\nInstall the packages listed below one by one from bioconductor using the BiocManager::install() function.\n\nBiocManager::install(\"ensembldb\")\nBiocManager::install(\"org.Hs.eg.db\")\nBiocManager::install(\"clusterProfiler\")\nBiocManager::install(\"AnnotationDbi\")\nBiocManager::install(\"biomaRt\")\nBiocManager::install(\"enrichplot\")\nBiocManager::install(\"HGNChelper\")\nOptional: The materials are updated to Seurat V5. If you want to use Seurat V4, you can follow the below instruction to install Seurat V4. Please note that you may need to adapt the code to fit Seurat V4 structure.\nFirst check the version of installed SeuratObject and Seurat.\n\npackageVersion(\"SeuratObject\")\npackageVersion(\"Seurat\")\n\nIf the version is 5.0.x, please follow the below instructions to remove the existing Seurat package and install Seurat V4.\n\nremove.packages(\"SeuratObject\")\nremove.packages(\"Seurat\")\n\n\npackageurl &lt;- \"https://cran.r-project.org/src/contrib/Archive/SeuratObject/SeuratObject_4.1.4.tar.gz\" \ninstall.packages(packageurl, repos=NULL, type=\"source\")\n\n\npackageurl &lt;- \"https://cran.r-project.org/src/contrib/Archive/Seurat/Seurat_4.4.0.tar.gz\" \ninstall.packages(packageurl, repos=NULL, type=\"source\")\n\nValidate the installation is successful by running packageVersion.\n\npackageVersion(\"SeuratObject\")\npackageVersion(\"Seurat\")\n\n\nCheck that all the packages were installed successfully by loading them one by one at a time using the library() function.\n\n\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(BiocManager)\nlibrary(Matrix)\nlibrary(RCurl)\nlibrary(readxl)\nlibrary(scales)\nlibrary(ggpubr)\nlibrary(data.table)\nlibrary(AnnotationHub)\nlibrary(ensembldb)\nlibrary(HGNChelper)\nlibrary(clusterProfiler)\nlibrary(AnnotationDbi)\nlibrary(biomaRt)\nlibrary(enrichplot)\n\n3. Download dataset and code\nPlease follow the below steps if you would like to run the materials locally.\n\n\nDataset: Please download the data here: Data.\n\nGithub folder: You will also need to download the entire repository as a .zip from https://github.com/material-share/material-share-single-cell-boot-camp/tree/master.\n\n\nAfter download, unzip the repository and put the Data folder in the repository.\n\nTo run the analysis, double click on single-cell-boot-camp.Rproj. One should be able to bring out the RStudio console on desktop.\n4. Contribution\nIf you would like to contribute, report bugs, or suggest any tools or workflow, please open on issue at: https://github.com/material-share/material-share-single-cell-boot-camp/issues."
  },
  {
    "objectID": "00_about.html",
    "href": "00_about.html",
    "title": "Introduction",
    "section": "",
    "text": "This repository contains the teaching materials for the Single Cell Boot Camp - Analyzing scRNA-seq with R. The boot camp is to provide an overview of analyzing single-cell sequencing data with R. It starts with a fast-paced training session on the common workflow, then continues with hands-on practice using the bioinformatics packages like Seurat."
  },
  {
    "objectID": "00_about.html#prerequisites",
    "href": "00_about.html#prerequisites",
    "title": "Introduction",
    "section": "Prerequisites",
    "text": "Prerequisites\nEach participant are expected to have:\n1. An introductory background in statistics, specifically in the below concepts: Median, log2 fold change, p-value, adjusted p-value, variance, PCA.\n2. Basic familiarity with R and tidyr package, specifically in the below functions: %&gt;% (pipe), filter, mutate, pivot_longer, pivot_wider, map, pmap, select, left_join.\nIf you would like to learn on your own with publicly available resources:\nChapter 1 - 4 from MordernDive."
  },
  {
    "objectID": "00_about.html#expected-outcome",
    "href": "00_about.html#expected-outcome",
    "title": "Introduction",
    "section": "Expected outcome",
    "text": "Expected outcome\nBy the end of the workshop, participants will be familiar with the following topics: the common workflow of single cell analysis (pre-processing, quality control, filtering, normalization, Clustering, Cell type annotation)."
  },
  {
    "objectID": "00_about.html#reference",
    "href": "00_about.html#reference",
    "title": "Introduction",
    "section": "Reference",
    "text": "Reference\nThe building of materials for the course references and relies on many excellent and well written public avaialbe materials.\n\nSeurat https://satijalab.org/seurat/\nSingle Cell Best Practices: https://www.sc-best-practices.org/preamble.html\nOrchestrating Single-Cell Analysis with Bioconductor: https://bioconductor.org/books/release/OSCA/\nMary Piper, Meeta Mistry, Jihe Liu, William Gammerdinger, & Radhika Khetani. (2022, January 6). hbctraining/scRNA-seq_online: scRNA-seq Lessons from HCBC (first release). Zenodo. https://doi.org/10.5281/zenodo.5826256"
  },
  {
    "objectID": "00_about.html#disclaimer",
    "href": "00_about.html#disclaimer",
    "title": "Introduction",
    "section": "Disclaimer",
    "text": "Disclaimer\nRecommendations given by representatives of BD in the context of the creation and setup of customer-specific applications and assays, the composition of antibody panels and suggestions for data analysis are provided in a diligent manner. However, the Customer acknowledges that (i) such recommendations should not be treated as a substitute for the Customer’s own examination, (ii) BD does not make any promises nor guarantees that recommendations are accurate and complete and will meet the Customer’s present or future needs or will produce positive or specific results and (iii) Customer remains solely responsible for validating and deciding on any such recommendations.\nBD therefore accepts no liability whatsoever in connection with any such recommendation and/or any results generated on the basis of such recommendations and, to the fullest extent permitted by law, expressly disclaims any and all warranties and any liability in this respect. In particular, the Customer assumes sole responsibility for the validation, use, selection, and suitability of the recommendations for its needs and objectives."
  },
  {
    "objectID": "00_about.html#license",
    "href": "00_about.html#license",
    "title": "Introduction",
    "section": "License",
    "text": "License\nMIT License\nCopyright (c) 2023 material-share\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "01_data_import.html",
    "href": "01_data_import.html",
    "title": "Chapter 1 Data Import",
    "section": "",
    "text": "# libraries for this chapter\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(data.table)\n\nDemo data\nThe demo data is generated from freshly isolated human PBMCs. The PBMCs were grown for 24 hours in the presence of CD3/CD28 stimulation (“treated”) and compared to PBMCs grown for 24 hours in regular media (“naive”). Cells were then labeled with a 20 plex AbSeq panel consisting of lineage markers and T-cell activation markers, as well as unique Sample Tags from the BD Rhapsody™ Human Single Cell Multiplexing Kit (resting PBMC: ST1; treated PBMC: ST2). The cells were mixed at a 1:1 ratio and processed using the BD Rhapsody™ Single-Cell Analysis System. Sequencing libraries for RNA and AbSeq antibodies were generated using the BD Rhapsody WTA Amplification kit.\n\n\n\n\n\n\nNote\n\n\n\nPlease review the setup chapter to install the R packages and download the demo dataset.\n\n\n1. Data import\nRhapsody single cell platform outputs a rds file containing the expression matrix as a Seurat object. The expression matrix stores the UMI counts of a feature (gene or AbSeq).\nLet’s import the rds file in RStudio.\n\nseuratObj &lt;- readRDS(\"processed_BD-Demo-WTA-AbSeq-SMK_Seurat.rds\")\n\nClick on the seuratObj on the right. A window will pop up and you should be able to see the structure of seuratObj.\nseuratObj contains two assays: RNA and ADT. RNA stores Gene Expression; ADT stores AbSeq.\nmeta.data stores information related to each cell. We will add more information into the meta.data later. For now, it has the below columns:\n\norig.ident Sample identity or sample name. By default, it is “SeuratProject”.\nnCount_RNA UMI counts per gene per cell.\nnFeature_RNA Genes counts per cell.\nCell_Type_Experiment Cell annotation based on 100 marker genes of immune cell types.\nSample_Tag The cell is from which sample tag.\nSample_Name The cell is from which sample.\nPutative_Cell_Algorithm Which algorithm is used to call the cell. Default is “Basic”.\nnCount_ADT UMI counts per AB per cell.\nnFeature_ADT AB counts per cell."
  },
  {
    "objectID": "03_normalization.html",
    "href": "03_normalization.html",
    "title": "Chapter 3 Normalization, Scale data and Find highly variable features",
    "section": "",
    "text": "# libraries for this chapter\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(data.table)"
  },
  {
    "objectID": "03_normalization.html#exercise-1",
    "href": "03_normalization.html#exercise-1",
    "title": "Chapter 3 Normalization, Scale data and Find highly variable features",
    "section": "Exercise 1",
    "text": "Exercise 1\nChange the number of PCs and see how the UMAP changes.\nTips: You can change the PC numbers by dims argument in RunUMAP."
  },
  {
    "objectID": "03_normalization.html#exercise-2",
    "href": "03_normalization.html#exercise-2",
    "title": "Chapter 3 Normalization, Scale data and Find highly variable features",
    "section": "Exercise 2",
    "text": "Exercise 2\nDimplot has many arguments to control the plots.\n\nSearch Dimplot in the “Help” tab and read the documentation.\nChange group.by to split.by. What is the difference?\n\n\np1 &lt;- DimPlot(filtered, group.by = \"Sample_Name\") + NoLegend()\np2 &lt;- DimPlot(filtered, split.by = \"Sample_Name\")  + NoLegend()\n\np1|p2"
  },
  {
    "objectID": "05_marker_identification.html",
    "href": "05_marker_identification.html",
    "title": "Chapter 5 Marker Identification",
    "section": "",
    "text": "# libraries for this chapter\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(data.table)\nlibrary(HGNChelper)"
  },
  {
    "objectID": "05_marker_identification.html#findallmarkers",
    "href": "05_marker_identification.html#findallmarkers",
    "title": "Chapter 5 Marker Identification",
    "section": "1.1 FindAllMarkers\n",
    "text": "1.1 FindAllMarkers\n\nThis type of analysis is typically for evaluating a single sample group/condition. With the FindAllMarkers function, we are comparing each cluster to all other clusters to identify potential marker genes. The cells in each cluster are treated as replicates, and essentially a differential expression analysis is performed with some statistical test. By default, the test is Wilcoxon Rank Sum test.\nThe FindAllMarkers function has three arguments to determine if a gene is a marker gene.\n\nlogfc.threshold Limit testing to genes that show, on average, at least an X-fold difference (log-scale) between the two groups of cells. The default is 0.25. Increasing logfc.threshold speeds up the function but can miss weaker signals.\nmin.pct Only test genes that are detected in a minimum fraction of cells in either of the two populations. It is meant to speed up the function by not testing infrequently expressed genes. The default is 0.1.\nonly.pos Only return positive markers (FALSE by default).\n\nOne may change the arguments depending on how stringent to be.\nWe look at the marker genes in the clusters in sample “treated”.\n\ntreated.markers &lt;- FindAllMarkers(subset(filtered, subset = Sample_Name == \"SampleTag02_hs\"), \n                                  assay = \"RNA\",\n                                  only.pos = TRUE, \n                                  min.pct = 0.25, \n                                  logfc.threshold = 0.25)\n\nLet’s look at the top 2 significant marker genes in each cluster.\n\ntreated.markers %&gt;%\n    group_by(cluster) %&gt;%\n    slice_max(n = 2, order_by = avg_log2FC)\n\n# A tibble: 18 × 7\n# Groups:   cluster [9]\n       p_val avg_log2FC pct.1 pct.2 p_val_adj cluster gene     \n       &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt; &lt;fct&gt;   &lt;chr&gt;    \n 1 2.79e- 99       7.17 0.271 0.007 7.88e- 95 0       NSMCE1-DT\n 2 1.49e-163       3.62 0.719 0.2   4.20e-159 0       MAL      \n 3 1.27e- 92       4.68 0.296 0.009 3.60e- 88 1       EXO1     \n 4 7.51e-184       4.39 0.555 0.025 2.12e-179 1       SLC29A1  \n 5 0               7.59 0.876 0.018 0         2       GNLY     \n 6 0               7.15 0.86  0.026 0         2       PRF1     \n 7 0              16.1  0.727 0     0         3       CCL24    \n 8 1.31e-229      12.4  0.455 0     3.71e-225 3       CXCL3    \n 9 5.71e-  6       6.20 0.333 0.029 1.61e-  1 4       H1-3     \n10 1.48e-  6       6.14 0.333 0.026 4.18e-  2 4       ZNF8     \n11 0              10.8  0.888 0.007 0         5       IGHM     \n12 2.96e-230      10.8  0.556 0.008 8.34e-226 5       IGKC     \n13 1.61e-238      13.4  0.479 0     4.54e-234 6       CEACAM8  \n14 1.82e-231      12.8  0.465 0     5.12e-227 6       PADI2    \n15 0              13.1  0.898 0.002 0         7       GCSAML   \n16 1.21e-280      12.5  0.593 0.001 3.41e-276 7       SLC45A3  \n17 1.31e-217      12.1  0.556 0.003 3.69e-213 8       PI3      \n18 1.30e-112       8.36 0.578 0.018 3.67e-108 8       C15orf48 \n\n\nWe get a table with the information on marker genes.\np_val P-value before multiple testing.\navg_log2FC Log2 fold change on the average gene expression between one cluster and the rest of cluster combined.\npct.1 Percentage of cells expressing the gene in one group. Here is one cluster.\npct.2 Percentage of cells expressing the gene in another group. Here is the rest of cluster combined.\np_val_adj p-value with multiple testing correction.\ngene Gene name."
  },
  {
    "objectID": "05_marker_identification.html#findmarkers",
    "href": "05_marker_identification.html#findmarkers",
    "title": "Chapter 5 Marker Identification",
    "section": "1.2 FindMarkers\n",
    "text": "1.2 FindMarkers\n\nWe can use the FindMarkers to determine the differentially expressed genes between two clusters.\n\nexample_findmarkers &lt;- FindMarkers(filtered,\n                          assay = \"RNA\",\n                          ident.1 = 1,\n                          ident.2 = 2) %&gt;% \n  rownames_to_column(\"gene\")"
  },
  {
    "objectID": "05_marker_identification.html#reference-based",
    "href": "05_marker_identification.html#reference-based",
    "title": "Chapter 5 Marker Identification",
    "section": "2.1 Reference-based",
    "text": "2.1 Reference-based\nWe look at the publicly available dataset with annotation and build a reference set based on its information. Then we can “transfer” the annotation from the reference to the query. Seurat provides the interface to connect with Azimuth.\n\n\n\n\n\n\nNote\n\n\n\nBecause the annotation information is based on the reference set, the reference ideally is similar to the query. They may come from the same tissue, same organism, similar experimental procedure, etc.\n\n\n\nfiltered &lt;- Azimuth::RunAzimuth(filtered, reference = \"pbmcref\", verbose = F)\n\nWe can look at the automatic annotation on UMAP.\n\np1 &lt;- DimPlot(filtered, reduction = \"umap\", \n              group.by = \"predicted.celltype.l1\", \n              label = TRUE, label.size = 3 ,repel = TRUE) + \n  NoLegend()\n\np2 &lt;- DimPlot(filtered, reduction = \"umap\", \n              group.by = \"RNA_snn_res.0.2\", \n              label = TRUE, label.size = 3 ,repel = TRUE) + \n  NoLegend()\n\np1|p2"
  },
  {
    "objectID": "05_marker_identification.html#marker-based",
    "href": "05_marker_identification.html#marker-based",
    "title": "Chapter 5 Marker Identification",
    "section": "2.1 Marker-based",
    "text": "2.1 Marker-based\nWe use ScType (https://github.com/IanevskiAleksandr/sc-type/blob/master/README.md) to annotate cell population based on known immune markers.\nScType also has an open source portal: https://sctype.app/.\n\n# load ScType R functions\nsource(\"https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/R/gene_sets_prepare.R\"); source(\"https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/R/sctype_score_.R\")\n\n# get cell-type-specific gene sets from our in-built database (DB)\n# list downloaded from https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/ScTypeDB_short.xlsx\n# e.g. Immune system, Liver, Pancreas, Kidney, Eye, Brain\ngs_list &lt;-  gene_sets_prepare(\"ScTypeDB_short.xlsx\", \"Immune system\")\n\n# assign cell types\n# NOTE: scRNAseqData parameter should correspond to your input scRNA-seq matrix.\n# In case Seurat is used, it is either GetAssayData(seuratObj[[\"RNA\"]], layer = \"scale.data\"), in case sctransform is used for normalization,\n# or GetAssayData(seuratObj[[\"integrated\"]], layer = \"scale.data\"), in case a joint analysis of multiple single-cell datasets is performed.\nes.max &lt;-  sctype_score(scRNAseqData = GetAssayData(filtered[[\"RNA\"]], layer = \"scale.data\"),\n                        scaled = TRUE,\n                        gs = gs_list$gs_positive,\n                        gs2 = gs_list$gs_negative)\n\n# merge by cluster\ncL_resutls = do.call(\"rbind\", lapply(unique(filtered@meta.data$RNA_snn_res.0.4), function(cl){\n    es.max.cl = sort(rowSums(es.max[ ,rownames(filtered@meta.data[filtered@meta.data$RNA_snn_res.0.4==cl, ])]), decreasing = !0)\n    head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(filtered@meta.data$filtered==cl)), 10)\n}))\n\nsctype_scores = cL_resutls %&gt;% group_by(cluster) %&gt;% top_n(n = 1, wt = scores)\n\n# set low-confident (low ScType score) clusters to \"unknown\"\nsctype_scores$type[as.numeric(as.character(sctype_scores$scores)) &lt; sctype_scores$ncells/4] = \"Unknown\"\n\n\nfiltered@meta.data$customclassif = \"\"\n\nfor(j in unique(sctype_scores$cluster)){\n  cl_type = sctype_scores[sctype_scores$cluster==j,];\n  filtered@meta.data$customclassif[filtered@meta.data$RNA_snn_res.0.4 == j] = as.character(cl_type$type[1])\n}\n\nDimPlot(filtered, reduction = \"umap\", label = TRUE, repel = TRUE, group.by = 'customclassif')"
  },
  {
    "objectID": "07_enrichment_analysis.html",
    "href": "07_enrichment_analysis.html",
    "title": "Chapter 7 Enrichment Analysis",
    "section": "",
    "text": "# libraries for this chapter\nlibrary(tidyverse)\nlibrary(Seurat)\nlibrary(data.table)\nlibrary(org.Hs.eg.db)\nlibrary(clusterProfiler)\nlibrary(AnnotationDbi)\nlibrary(enrichplot)\nlibrary(biomaRt)\n\nOftentimes, enrichment analysis takes the differentially expressed genes and looks at which gene ontology (GO) terms are enriched.\nGO terms defines concepts/classes used to describe gene function and relationships between these concepts. clusterProfiler is an R package implementing many methods to analyze and visualize functional profiles from a group of features. It classifies functions in three aspects.\n\nMF: Molecular Function: molecular activities of gene products.\nCC: Cellular Component: where gene products are active.\nBP: Biological Process: pathways and larger processes made up of the activities of multiple gene products.\n\nThis chapter uses the differentially expressed genes in CD4+ T cells from last chapter as an example.\n1. Get Entrez ID\nclusterProfiler prefers the input of Entrez ID. We use biomaRt package to convert the gene symbol into Entrez ID.\n\n\n\n\n\n\nNote\n\n\n\nbiomaRt is handy to get information about features. You can use it to get gene symbols, genomic coordinates, transcript sequences, etc. You can explore what data is stored in biomaRt with listAttributes.\n\n\nThe differentially expressed genes in CD4+ T cells between naïve and treated PBMCs are stored in the matrix cd4t. The gene symbol in this list can be converted into Entrez ID by biomaRt.\nFirstly, connect to the Ensembl database and specify we want to retrieve information from the dataset of Homo Sapien.\n\nmart &lt;- useMart(biomart = \"ensembl\", dataset = \"hsapiens_gene_ensembl\")\n\n\nbiomart BioMart database connect to. Here, we want to connect to ensembl database.\ndataset Dataset to use. Here specify hsapiens_gene_ensembl.\n\nNext, we can give a list of gene symbols and retrieve the Entrez ID through getBM.\n\nresults &lt;- getBM(attributes = c(\"entrezgene_id\", \"external_gene_name\"),\n                 filters = \"external_gene_name\", \n                 values = rownames(cd4t.deg),\n                 mart = mart)\n\n\nattributes Attributes to retrieve. We want to have the gene symbols and Entrez ID in the results.\nfilters Which filter to use to filter the dataset.\nvalues A list of features as a query.\nmart Object of class Mart, created with the useMart function.\n\nA table of two columns is created and stored in the matrix of results.\n\nresults %&gt;% head\n\n  entrezgene_id external_gene_name\n1          4535             MT-ND1\n2          4536             MT-ND2\n3          4512             MT-CO1\n4          4514             MT-CO3\n5          4537             MT-ND3\n6          4540             MT-ND5\n\n\nNot every gene has the Entrez ID. We keep only genes that have a matched Entrez ID.\n\ncd4t.deg &lt;- cd4t.deg %&gt;% \n  rownames_to_column(\"gene\") %&gt;% \n  left_join(., results, by = c(\"gene\" = \"external_gene_name\")) %&gt;% \n  filter(!is.na(entrezgene_id)) %&gt;% \n  filter(!is.na(p_val_adj))\n\n2. GO over-representation analysis\nOver Representation Analysis (ORA) is a widely used approach to determine whether known biological functions or processes are over-represented (= enriched) in an experimentally-derived gene list, e.g. a list of differentially expressed genes (DEGs).\nWe use the enrichGO to get the enriched GO terms in the list of DEGs.\n\ncd4t.deg.sig &lt;- dplyr::filter(cd4t.deg, p_val_adj &lt; 0.05, \n                               abs(avg_log2FC) &gt; 1)\n\n# get the enriched GO terms\nego &lt;- enrichGO(gene = cd4t.deg.sig$entrezgene_id,\n                keyType = \"ENTREZID\",\n                OrgDb = org.Hs.eg.db,\n                ont = \"BP\",\n                pAdjustMethod = \"BH\",\n                pvalueCutoff = 0.01,\n                qvalueCutoff = 0.05,\n                readable = TRUE)\n\n\ngene A list of Entrez gene id.\nkeyType The keytype of input gene.\nOrgDb The database with detailed information about the species.\norg.Hs.eg.db Specify the database of Homo Sapien.\nont One of “BP” (biological process), “MF” (molecular function), and “CC” (cellular component) subontologies, or “ALL” for all three.\npAdjustMethod Multiple testing method for p-value.\npvalueCutoff Adjusted pvalue cutoff on enrichment tests to report.\nqvalueCutoff Tge qvalue cutoff on enrichment tests to report as significant.\nreadable Whether mapping gene ID to gene Name.\n\nLet’s convert the ego object into a data frame and visualize the results in a bar plot.\n\nego.table &lt;- as.data.frame(ego)\n\n\nGeneRatio The gene counts from the input list found in the gene set of a GO term / gene counts of input list.\nBgRatio The gene counts of a geneset / size of all of the unique genes in the collection of genesets.\n\n\nfilter(ego, Description %in% grep(\"T cell\", ego.table$Description, ignore.case = T, value = T)) %&gt;% \nbarplot(showCategory = 18)\n\n\n\n\n3. Gene set enrichment analysis - Optional\nAll genes can be used as input of gene set enrichment analysis (GSEA). We first rank the genes based on stat.\n\n# order genes\ncd4t.deg &lt;- cd4t.deg[order(-cd4t.deg$avg_log2FC), ]\n\ngene_list &lt;- cd4t.deg$avg_log2FC\nnames(gene_list) &lt;- cd4t.deg$entrezgene_id\n\nWe use gseGO to perform GSEA and convert the results into a dataframe.\n\n# perform GSEA\ngse &lt;- gseGO(gene_list,\n             keyType = \"ENTREZID\",\n             ont = \"BP\",\n             OrgDb = \"org.Hs.eg.db\")\n\n# convert the results into a dataframe\ngse.table &lt;- as.data.frame(gse) %&gt;% \n  mutate(geneSetID = 1:dim(.)[1])\n\nenrichmentScore The enrichment score (ES) represents the degree to which a set S is over-represented at the top or bottom of the ranked list L.\nWe can look at the enrichment of some GO terms in GSEA plot.\n\ngseaplot2(gse, geneSetID = c(161, 171))\n\n\n\n\nWe have significant enriched term in the unregulated genes. Along the x axis is the ranked genes. Each of the vertical line is one of those genes that are found in this gene set. Along the running line, you can see a lot of genes running together and it falls out when the gene becomes more sparse in the list."
  },
  {
    "objectID": "sessioninfo.html",
    "href": "sessioninfo.html",
    "title": "SessionInfo",
    "section": "",
    "text": "Note\n\n\n\n\nsessionInfo()\n\nR version 4.3.0 (2023-04-21)\nPlatform: x86_64-apple-darwin20 (64-bit)\nRunning under: macOS 14.4.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Amsterdam\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.3.0    fastmap_1.1.1     cli_3.6.2        \n [5] tools_4.3.0       htmltools_0.5.8   rstudioapi_0.16.0 yaml_2.3.8       \n [9] rmarkdown_2.26    knitr_1.45        jsonlite_1.8.8    xfun_0.42        \n[13] digest_0.6.35     rlang_1.1.3       evaluate_0.23"
  }
]