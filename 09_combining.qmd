---
title: "Chapter 9 Combine scRNAseq and AbSeq"
execute:
  warning: false
  message: false
---

```{r}
# libraries for this chapter
library(tidyverse)
library(Seurat)
library(data.table)
```

# Load RData

Load the RData which contains all files from the previous chapter.

```{r}
load("data/intermediate_data/chapter8.RData")
```

When the experiment has RNA profiling (scRNA) and protein profiling (AbSeq) in single cell resolution, each measurement is one modality. The combined analysis of scRNA and AbSeq is so called "multimodal analysis".

Seurat package also provides the framework to analyze multimodal data. The framework is the the weighted nearest neighbors (WNN) approach, which enables simultaneous clustering of cells based on weighted combination of both modalities.

::: callout-note
RNA profiling and protein profiling should be analyzed separately before combing for downstream analysis.
:::

# 1. Processing AbSeq

When we analyzed the scRNAseq in the previous chapters, the dataset was filtered and only high quality cells are kept. AbSeq dataset is filtered to have the same cells.

```{r}
# get AbSeq from expMat
ab <- expMat$`Antibody Capture`

# filter abseq data based on cell id from rna seurat object
ab <- ab[, colnames(integrate.filtered.rna)]
```

Creating a new Seurat object with AbSeq.

```{r}
# create a new assay to store AbSeq information
ab <- CreateAssayObject(counts = ab)

# create a new Seurat object to store the combined analysis
combined <- integrate.filtered.rna
combined[["AB"]] <- ab

# Validate that the object now contains multiple assays
combined
```

Next, we normalize the AbSeq counts.

The recommended normalization method for AbSeq is CLR, Centered Log Ratio. Due to the unspecific binding background signal of antibody, log-normalization doesn't work well in AbSeq data.

There are 20 AbSeq in the experiment. We are going to use all of them as variable features.

```{r}
# switch the default assay to AbSeq
DefaultAssay(combined) <- 'AB'

# set variable features
VariableFeatures(combined) <- rownames(combined[["AB"]])

# set a name for the dimentionality reduction to avoid overwriting
combined <- NormalizeData(combined, normalization.method = 'CLR', margin = 2) %>% 
  ScaleData() %>% 
  RunPCA(reduction.name = 'apca', approx = F)
```

# 2. Weighted nearest neighbour (WNN)

The weighted nearest neighbor (WNN) is a statistical framework implemented in Seurat for the multimodal analysis. WNN requires pre-processing and dimentionality reduction on both assays independently upfront.

```{r}
combined <- FindMultiModalNeighbors(combined, 
                                    reduction.list = list("pca", "apca"), 
                                    dims.list = list(1:15, 1:18), 
                                    modality.weight.name = "RNA.weight")
```

-   `reduction.list` Dimentionality reduction to use from each element

-   `dims.list` Number of PCs to include from each element

-   `modality.weight.name` Give a name to the weight of each element

Now, we run UMAP using the calculated WNN.

For each cell, we calculate its closest neighbors in the dataset based on a weighted combination of RNA and protein similarities. We specify the dimensionality of each modality (similar to specifying the number of PCs to include in scRNA-seq clustering). We use the same number of PCs as we did in previous steps.

```{r}
# run UMAP
combined <- RunUMAP(combined, 
                    nn.name = "weighted.nn", 
                    reduction.name = "wnn.umap", 
                    reduction.key = "wnnUMAP_")

# find clusters
combined <- FindClusters(combined, 
                         graph.name = "wsnn", 
                         resolution = 0.4, 
                         verbose = FALSE)
```

Look at the results in UMAP.

```{r}
# visualize the result in UMAP
p1 <- DimPlot(combined, reduction = 'wnn.umap', 
              label = TRUE, repel = TRUE, label.size = 2.5, 
              group.by = "predicted.celltype.l1")

p2 <- DimPlot(combined, reduction = 'wnn.umap', 
              label = TRUE, repel = TRUE, label.size = 2.5)

p1|p2
```

Let's compare the UMAPs from RNA only and from WNN. The T cells cluster better in WNN UMAP. Because AbSeq is often handpicked and cell type specific, bringing AbSeq in can have a better resolution.

```{r}
# compare the UMAPs based on RNA and on WNN
p1 <- DimPlot(combined, reduction = 'umap', group.by = 'predicted.celltype.l1', 
              label = TRUE, repel = TRUE, label.size = 2.5) + 
  NoLegend() + ggtitle("RNA")

p2 <- DimPlot(combined, reduction = 'wnn.umap', group.by = 'predicted.celltype.l1', 
              label = TRUE, repel = TRUE, label.size = 2.5) + 
  NoLegend() + ggtitle("WNN")

p1|p2
```

# 3. AbSeq visualization

We have several assays stored in the Seurat object. We can easily switch between them and work on different assays.

::: callout-important
It is important to know which assay you are working on. We may get unexpected results if working on the wrong assay.
:::

Let's look at the protein and gene expression side by side. By setting the default assay, we can visualize one or the other.

CD19 is a B cell marker. We can plot the UMAP with annotation side by side with the CD19 AbSeq.

```{r}
# switch default assay to AbSeq to plot protein expression
DefaultAssay(combined) <- "AB"
p1 <- FeaturePlot(combined, "CD19-CD19-AHS0030-pAbO", 
                  cols = c("lightgrey", "darkgreen"), 
                  reduction = 'wnn.umap')

# switch default to RNA to plot gene expression
DefaultAssay(combined) <- "RNA"
p2 <- FeaturePlot(combined, "CD19", reduction = 'wnn.umap')

# place plots side-by-side
p1 | p2
```

# 4. Save

Save the files into RData for documentation.

```{r}
# save(combined, expMat, ab, integrate.filtered.rna, file = "data/intermediate_data/chapter9.RData")
```
