---
title: "Chapter 2 Quality Control"
execute:
  warning: false
  message: false
format:
  html:
    embed-resources: true
---

```{r}
#| echo: false

# Load RData
load("data/chapter1.RData")
```

```{r}
# libraries for this chapter
library(tidyverse)
library(Seurat)
library(data.table)
```

# 1. Metrics for quality control

The single cell dataset will include some low quality cells, such as dead cells. These low quality cells have low UMI counts, low gene counts, and high mitochondrial percentage. We can rely on the distribution of metrics to set appropriate cut off to filter out the low quality cells.

# 2. Only applicable of SMK: Multiplet and Undetermined

If the experiment uses Sample Multiplexing Kit (SMK) to multiplex samples, we will find some cells are labelled as "Multiplets" and "Undetermined".

::: callout-important
Multiplets of SMK kit is not the same as the comment concept of duplets where one microwell containing two cells.

Multiplets of SMK could be the conventional duplets. It also involves singlets where one cell has two SMK tags detected.
:::

The **Undetermined** are cell labels with zero or very low SMK tag reads detected. They could be noisy cell labels, or singlets which are not labelled with SMK tags.

We can use the bar plot to check the number cells in each SMK tag.

```{r}
seuratObj@meta.data %>% 
  group_by(Sample_Name) %>% 
  tally(name = "cell_count") %>% 
  ggplot(aes(x=Sample_Name, y=cell_count, fill= Sample_Name)) + 
  geom_bar(stat = "identity") +
  geom_text(aes(y = cell_count,
                label = cell_count,
                vjust= -0.5, size = 2.5), show.legend = FALSE) + 
  theme_classic()
```

Multiplets and Undetermined are removed from the downstream analysis. We can use the function `subset` to remove Multiplets and Undetermined cells.

```{r}
seuratObj <- subset(seuratObj, subset = Sample_Name %in% c("Multiplet", "Undetermined"), invert = T)
```

# 3. Calculate mitochondrial percentage per cell

When creating a `Seurat` object, `Seurat` automatically creates some metadata for each cell. This information is stored in the `meta.data`. We can use the metadata to filter out low quality cells. The metadata contains two columns: `nCount_RNA`, `nFeature_RNA`.

We need to first calculate the mitochondrial percentage for each cell. Seurat has a convenient function, `PercentageFeatureSet`, to calculate the percentage of UMIs of mitochondrial genes in a cell.

```{r}
seuratObj[["percent.mt"]] <- PercentageFeatureSet(seuratObj, pattern = "^MT-")
```

::: callout-tip
The name patterns of mitochondrial genes are different according to genome versions. To make sure that the mitochondrial percentage is calculated correctly, one can use grep to check the gene name pattern of mitochondrial genes. For example, the mitochondrial genes in the demo dataset start with "MT-".

```{r}
#| eval: false
grep(pattern = "mt-", rownames(seuratObj), ignore.case = T, value = T)
```
:::

The `PercentageFeatureSet` takes in a `pattern` argument and searches through all feature names in the dataset for that pattern.

Since we are looking for mitochondrial genes, we are searching for any gene names that begin with the pattern of mitochondrial genes. For each cell, the function takes the sum of counts across all genes belonging to mitochondrial genes, and then divides it by the total counts for all genes. The result is stored in the `percent.mt` of `meta.data` .

# 4. Assessing the quality metrics

We will assess the quality metrics, `nCount_RNA`, `nFeature_RNA`, `percent.mt`, and decide which cells are of low quality and should be removed from the analysis.

## 4.1 `nCount_RNA` UMI counts per cell

We look at `nCount_RNA` for the sum of UMI counts per cell. The majority of cells have UMI counts above 500.

```{r}
seuratObj@meta.data %>% 
  ggplot(aes(color=Sample_Name, x=nCount_RNA, fill= Sample_Name)) + 
  geom_density(alpha = 0.2) + 
  scale_x_log10() + 
  theme_classic() +
  ylab("Cell density") +
  ggtitle("nCount_RNA")
```

## 4.2 `nFeature_RNA` Gene counts per cell

We look at `nFeature_RNA` for sum of gene counts per cell. The majority of cells have gene counts above 300.

```{r}
seuratObj@meta.data %>% 
  ggplot(aes(color=Sample_Name, x=nFeature_RNA, fill= Sample_Name)) + 
  geom_density(alpha = 0.2) + 
  scale_x_log10() + 
  theme_classic() +
  ylab("Cell density") +
  ggtitle("nFeature_RNA")
```

## 3.3 `percent.mt` Mitochondrial percentage per cell

We look at `percent.mt` for mitochondrial percentage per cell. The majority of cells have mitochondrial percentage below 25%.

```{r}
seuratObj@meta.data %>% 
  ggplot(aes(color=Sample_Name, x=percent.mt, fill=Sample_Name)) + 
  geom_density(alpha = 0.2) + 
  theme_classic() +
  ggtitle("percent.mt")
```

## 3.4 Combine metrics to come up with the filtering threshold

We can combine the metrics to decide the filtering threshold.

```{r}
seuratObj@meta.data %>% 
  ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) + 
  geom_point() + 
  scale_colour_gradient(low = "gray90", high = "black") +
  stat_smooth(method=lm) +
  scale_x_log10() + 
  scale_y_log10() + 
  theme_classic() +
  geom_vline(xintercept = 500, colour = "red") +
  geom_hline(yintercept = 300, colour = "red") +
  facet_wrap(~Sample_Name) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

The data is fitted with a linear regression line. We expect when UMI counts increase, gene counts also increase.

Upper right quadrant: Cells with high gene counts and UMI counts. We generally consider these cells to be good-quality cells.

Bottom right quadrant: Cells with low gene counts and UMI counts. We generally consider these cells are low-quality cells.

Darker cells: Cells with high mitochondrial percentage. Many of these cells have low gene counts at the same time. This may indicate damaged/dying cells whose cytoplasmic mRNA leaks out through a broken membrane, so only mRNA located in the mitochondria is still conserved.

# 5. Filter

## 5.1 Filter on cells

Based on the quality metrics, we use the following thresholds to filter out low quality cells. The filtering thresholds should be decided based on the distribution of quality metrics.

`nCount_RNA` \> 500

`nFeature_RNA` \> 300

`nFeature_RNA` \< 5000

`percent.mt` \< 25%

```{r}
filtered <- subset(x = seuratObj, 
                       subset = (nCount_RNA >= 500) & 
                         (nFeature_RNA >= 300) &
                         (nFeature_RNA <= 5000) &
                         (percent.mt < 25))
```

# 6. Re-assess metrics

After filtering, we look back the metrics to ensure the filtered data matches expectations. We plot all QC metrics again using the filtered data.

```{r}
filtered@meta.data %>% 
  ggplot(aes(color=Sample_Name, x=nCount_RNA, fill= Sample_Name)) + 
  geom_density(alpha = 0.2) + 
  scale_x_log10() + 
  theme_classic() +
  ylab("Cell density") +
  ggtitle("nCount_RNA")
```

```{r}
filtered@meta.data %>% 
  ggplot(aes(color=Sample_Name, x=nFeature_RNA, fill= Sample_Name)) + 
  geom_density(alpha = 0.2) + 
  scale_x_log10() + 
  theme_classic() +
  ylab("Cell density") +
  ggtitle("nFeature_RNA")
```

```{r}
filtered@meta.data %>% 
  ggplot(aes(color=Sample_Name, x=percent.mt, fill=Sample_Name)) + 
  geom_density(alpha = 0.2) + 
  theme_classic() +
  ggtitle("percent.mt")
```

```{r}
filtered@meta.data %>% 
  ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) + 
  geom_point() + 
  scale_colour_gradient(low = "gray90", high = "black") +
  stat_smooth(method=lm) +
  scale_x_log10() + 
  scale_y_log10() + 
  theme_classic() +
  geom_vline(xintercept = 500, color = "red") +
  geom_hline(yintercept = 300, color = "red") +
  facet_wrap(~Sample_Name)
```

Low quality cells in the bottom right quadrant are removed. We can also compare the cell number before and after filtering. The majority of cells are kept after filtering.

Before filtering:

```{r}
seuratObj@meta.data %>% 
  group_by(Sample_Name) %>% 
  dplyr::summarise(cell_number = length(Sample_Name))
```

After filtering:

```{r}
filtered@meta.data %>% 
  group_by(Sample_Name) %>% 
  dplyr::summarise(cell_number = length(Sample_Name))
```

```{r}
#| echo: false

# save the seurat object
save(filtered, file = "data/chapter2.RData")
```
