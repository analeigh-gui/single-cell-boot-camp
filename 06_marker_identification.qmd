---
title: "Chapter 6 Marker Identification"
execute:
  warning: false
  message: false
---

```{r}
# libraries for this chapter
library(tidyverse)
library(Seurat)
library(data.table)
library(celldex)
library(SingleR)
library(ExperimentHub)
library(cellpypes)
```

# Load RData

Load the RData which contain all files from previous chapter.

```{r}
load("data/intermediate_data/chapter5.RData")
```

# 1. Find marker genes

## 1.1 FindAllMarkers

This type of analysis is typically for evaluating a single sample group/condition. With the `FindAllMarkers` function we are comparing each cluster against all other clusters to identify potential marker genes. The cells in each cluster are treated as replicates, and essentially a differential expression analysis is performed with some statistical test. By default, the test is Wilcoxon Rank Sum test.

The `FindAllMarkers` function has three arguments to determine if a gene is a marker gene.

`logfc.threshold` Limit testing to genes that show, on average, at least an X-fold difference (log-scale) between the two groups of cells. The default is 0.25. Increasing logfc.threshold speeds up the function but can miss weaker signals.

`min.pct` Only test genes that are detected in a minimum fraction of min.pct cells in either of the two populations. It is meant to speed up the function by not testing infrequently expressed genes. The default is 0.1.

`only.pos` Only return positive markers (FALSE by default)

We can combine these arguments. We can change the arguments depending on how stringent we want to be. Here we will use the default settings.

We look at the marker genes in the clusters in sample "activated".

```{r}
treated.markers <- FindAllMarkers(subset(integrate.filtered.rna, subset = Sample_Name == "treated"), 
                                    assay = "RNA",
                                    only.pos = TRUE, 
                                    min.pct = 0.25, 
                                    logfc.threshold = 0.25)
```

Let's look at the top 2 significant marker genes in each cluster.

```{r}
treated.markers %>%
    group_by(cluster) %>%
    slice_max(n = 2, order_by = avg_log2FC)
```

We get a table with the information on marker genes.

`p_val` p-value before multiple testing.

`avg_log2FC` log2 fold change on the average of gene expression between one cluster and the rest of cluster combined.

`pct.1` Percentage of cells express the gene in one group. Here is one cluster.

`pct.2` Percentage of cells express the gene in another group. Here is the rest of cluster combined.

`p_val_adj` p-value with multiple testing correction.

## 1.2 FindConservedMarkers

We have two samples, naïve and treated. We can find conserved markers between the conditions with the function, `FindConservedMarkers`.

This function internally separates out cells by sample group/condition, then performs differential gene expression testing for a single specified cluster against all other clusters (or a second cluster, if specified).

Gene-level p-values are computed for each condition and then combined across groups using meta-analysis methods from the `MetaDE` R package.

Many of the arguments in `FindConservedMarkers` are shared with `FindAllMarkers`. Here, we list some additional arguments when using `FindConservedMarkers`:

`ident.1` This function only evaluates one cluster at a time; here, you would specify the cluster of interest. `grouping.var` The variable (column header) in your metadata specifies the separation of cells into groups.

```{r}
fcm <- FindConservedMarkers(integrate.filtered.rna,
                     assay = "RNA",
                     ident.1 = "1",
                     grouping.var = "Sample_Name",
                     only.pos = TRUE,
                     min.diff.pct = 0.25,
                     min.pct = 0.25,
                     logfc.threshold = 0.25)

head(fcm)
```

We also get a table with information on marker genes. The statistics are computed for each group (naïve vs. treated), and the last two columns are the combined p-value across the two groups.

`condition_p_val` p-value before multiple testing.

`condition_avg_log2FC` log2 fold change on the average of gene expression between one cluster and the rest of the clusters combined.

`condition_pct.1` Percentage of cells expressing the gene in one group.

`condition_pct.2` Percentage of cells expressing the gene in another group.

`condition_p_val_adj` p-value with multiple testing correction.

::: callout-note
The more significant the difference between `pct.1` and `pct.2`, the higher the confidence for the marker gene. If `pct.1` is 0.9 and `pct.2` is 0.8, it is not as interesting as if `pct.2` is 0.1.

Marker genes express in a specific cell type. If `pct.1` is low, such as 0.3, it is not as interesting as if it is 0.9.
:::

We can visualize the marker gene expression by `FeaturePlot` and `VlnPlot`.

```{r}
FeaturePlot(object = integrate.filtered.rna, 
            features = c("GNLY", "GZMA"),
            order = TRUE,
            min.cutoff = 'q10', 
            label = TRUE,
            repel = TRUE)
```

```{r}
VlnPlot(object = integrate.filtered.rna, 
        features = c("GNLY", "GZMA"))
```

## 1.3 FindMarkers

We can use the `FindMarkers` to determine the differentially expressed genes between two clusters.

```{r}
example_findmarkers <- FindMarkers(integrate.filtered.rna,
                          assay = "RNA",
                          ident.1 = 1,
                          ident.2 = 2) %>% 
  rownames_to_column("gene")
```

# 2. Automatic annotation

So far, we already look at the marker genes based on knowledge (last chapter) and between clusters. The manual annotation usually takes time, and we might need to go back and forth to annotate the clusters. Another way to annotate the clusters is through the automatic annotation.

## 2.1 Reference-based

We look at the publicly available dataset with annotation and build a reference set based on its information. Then we can "transfer" the annotation from the reference to the query. Seurat provides the interface to connect with Azimuth.

::: callout-note
Because the annotation information is based on the reference set, the reference ideally are similar to the query. They may come from the same tissue, same organism, similar experimental procedure, etc.
:::

```{r}
integrate.filtered.rna <- Azimuth::RunAzimuth(integrate.filtered.rna, reference = "pbmcref")
```

We can look at the prediction on UMAP.

```{r}
p1 <- DimPlot(integrate.filtered.rna, reduction = "umap", group.by = "predicted.celltype.l1", label = TRUE, label.size = 3 ,repel = TRUE) + NoLegend()

p2 <- DimPlot(integrate.filtered.rna, reduction = "umap", group.by = "integrated_snn_res.0.6", label = TRUE, label.size = 3 ,repel = TRUE) + NoLegend()

p1|p2
```

## 2.1 Marker-based

The `celldex` contains several curated reference datasets, mostly assembled from bulk RNA-seq or microarray data of sorted cell types. Here, we will use a reference constructed from Blueprint and ENCODE data (Martens and Stunnenberg 2013; The ENCODE Project Consortium 2012).

```{r}
# get reference
# ref_encode <- BlueprintEncodeData()
ref_encode <- readRDS("data/blueprint_encode_ref.rds")

# perform annotation
annot_encode <- SingleR(test = as.SingleCellExperiment(integrate.filtered.rna), ref = ref_encode, labels = ref_encode$label.main)

# get labels into Seurat object
integrate.filtered.rna$annot_encode <- annot_encode$labels

# Visualizae
DimPlot(integrate.filtered.rna, group.by = "annot_encode", label = T, reduction = "umap")
```

# 3. Save

Save the files into RData for documentation.

```{r}
# save(integrate.filtered.rna, expMat, file = "data/intermediate_data/chapter6.RData")
```
