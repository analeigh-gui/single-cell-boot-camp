---
title: "Chapter 7 Differential Expression Analysis"
execute:
  warning: false
  message: false
---

```{r}
# libraries for this chapter
library(tidyverse)
library(Seurat)
library(data.table)
library(celldex)
library(SingleR)
library(ExperimentHub)
library(muscat)
```

# Load RData

Load the RData which contains all files from the previous chapter.

```{r}
load("data/intermediate_data/chapter6.RData")
```

# 1. FindMarkers

In the last chapter, we used `FindMarkers` to find the marker genes between two clusters by specifying `ident.1` and `ident.2`.

Changing the `ident.1` and `ident.2` arguments, we can perform differential expression analysis between two groups.

For instance, we want to find genes deferentially expressed between na√Øve and treated PBMC.

```{r}
# assign the sample identity that we want to work on different sample groups
Idents(integrate.filtered.rna) <- "Sample_Name"

# Find genes differentially expressed
treated_naive <- 
  FindMarkers(integrate.filtered.rna, ident.1 = "treated", ident.2 = "naive") %>% 
  rownames_to_column("gene") %>% 
  dplyr::filter(p_val_adj < 0.05)
```

We can compare the gene expression between two groups by specifying `ident.1` and `ident.2`.

```{r}
head(treated_naive)
```

-   `gene` Gene symbol.

-   `p_val` P-value without multiple testing.

-   `avg_log2FC` log2 fold-change of the average expression between the two groups.

We can also find genes deferentially expressed in CD4 T cells between the two samples. We start by subsetting the cells annotated as "CD4 T".

```{r}
# subset CD4 T cells
cd4t <- subset(integrate.filtered.rna, subset = predicted.celltype.l1 == "CD4 T")

# Find genes differentially expressed between activated vs. naive samples in CD4 T cells
treated_naive_cd4t <- 
  FindMarkers(cd4t, ident.1 = "treated", ident.2 = "naive", 
              assay = "RNA", recorrect_umi = FALSE) %>% 
  rownames_to_column("gene") %>% 
  dplyr::filter(p_val_adj < 0.05)
```

# 2. `muscat` for Differential State analysis (DS)

Pseudo-bulk aggregation transforms scRNA-seq data into bulk-like data by aggregating gene counts within each cell type and subject. We use the package `muscat` (Multi-sample multi-group scRNA-seq data analysis tools) to perform pseudo-bulk analysis.

## 2.1 Setup

Let's assume we have three biological replicates in each condition (we make them up for the purpose of illustration).

```{r}
# read in dummy group
dummy <- read_csv("data/dummy.csv")

# add the dummy meta into the seurat object
integrate.filtered.rna <- AddMetaData(integrate.filtered.rna, 
                                      dummy$dummy_group, 
                                      col.name = "dummy_group")
```

## 2.2 Select cell groups

Let's take a look at the cell type annotation in UMAP.

```{r}
# visualize cell types in UMAP
DimPlot(integrate.filtered.rna, 
        reduction = "umap", 
        group.by = "predicted.celltype.l1", 
        label = TRUE, 
        label.size = 3,
        repel = TRUE, 
        split.by = "Sample_Name") + NoLegend()
```

We see some of the cell types have only a few cells.

Let's look at how many cells are in each cell type per dummy group.

```{r}
# Cell counts in per cell type per group
FetchData(integrate.filtered.rna, 
                     vars = c("predicted.celltype.l1", "dummy_group", "Sample_Name")) %>%
  dplyr::count(predicted.celltype.l1, Sample_Name, dummy_group) %>%
  tidyr::spread(predicted.celltype.l1, n)
```

Dendritic cells, other T cells, and the group of other don't have sufficient cells per dummy group. For demonstration, we will not include these cell types for pseudo-bulk analysis. We will focus on "CD4 T", "Mono", and "NK".

```{r}
subset.rna <- subset(integrate.filtered.rna, 
                     subset = predicted.celltype.l1 %in% 
                       c("CD4 T", "Mono", "NK"))
```

## 2.3 Setup `SingleCellExperiment`

The `muscat` package requires the input object as the `SingleCellExperiment` object. We first transform the Seurat object into SCE object.

`muscat` requires three pieces of meta data information: `sample_id` sample IDs, corresponds to `dummy_group` in the `meta.data` `cluster_id` cell types, corresponds to `predicted.celltype.l1` in the `meta.data` `group_id` sample groups, corresponds to `sample` in the `meta.data`

Let's first tidy up the meta data.

```{r}
subset.rna@meta.data <- subset.rna@meta.data %>% 
  dplyr::select(Sample_Name, predicted.celltype.l1, dummy_group) %>% 
  `colnames<-`(c("group_id", "cluster_id", "sample_id"))
```

Seurat has a convenient function to convert Seurat object into SingleCellExperiment object, `as.SingleCellExperiment`.

```{r}
# construct experiment_info
experiment_info <- subset.rna@meta.data %>% 
  group_by(sample_id, group_id) %>% 
  dplyr::summarise(n_cells = length(group_id))

# convert seurat object into SingleCellExperiment object
subset.rna <- as.SingleCellExperiment(subset.rna, assay = "RNA")
```

The SCE object doesn't contain the experiment_info. We add the information into the SCE object.

```{r}
# assign experiment info into the created SingleCellExperiment
subset.rna@metadata[["experiment_info"]] <- experiment_info
```

## 2.4 Aggregation

We first aggregate measurements for each sample (in each cell type) to obtain pseudobulk data.

```{r}
# aggregate counts per cell type per dummy group
subset.pb <- aggregateData(subset.rna,
                           assay = "counts", 
                           fun = "sum",
                           by = c("cluster_id", "sample_id"))
```

We can look at how the pseudobulk samples cluster on the MDS plot.

```{r}
muscat::pbMDS(subset.pb)
```

Next, we can run DS analysis by specifying `method` as `DESeq2`.

```{r}
# change group_id into a factor
subset.pb$group_id <- subset.pb$group_id %>% factor(levels = c("treated", "naive"))

# run DS analysis with DESeq2
res <- pbDS(subset.pb, method = "DESeq2", verbose = F)
```

The result is stored in the `table` slot of `res`.

We will focus on the deferentially expressed genes in CD4 T cells.

```{r}
cd4t <- res$table$naive$`CD4 T`

# Filter the results with p_adj.loc < 0.05, abs(logFC) > 1
cd4t.sig <- dplyr::filter(cd4t, p_adj.loc < 0.05, abs(logFC) > 1) %>% 
  arrange(p_adj.loc)

head(cd4t.sig)
```

-   `p_adj.loc` is produced by correcting for multiple testing across all genes tested within a cluster.

-   `p_adj.glb` is produced by correcting for multiple testing across all genes tested in all clusters.

We can plot the DEGs from CD4+ T cells in a heatmap.

```{r}
# scale the RNA data
integrate.filtered.rna <- ScaleData(integrate.filtered.rna, features = rownames(integrate.filtered.rna), assay = "RNA")

# plot heatmap
integrate.filtered.rna %>%
  subset(., subset = predicted.celltype.l1 == "CD4 T") %>% 
  DoHeatmap(features = cd4t.sig$gene[1:40])
```

# 3. Save

Save the files into RData for documentation.

```{r}
# save(integrate.filtered.rna, expMat, cd4t, file = "data/intermediate_data/chapter7.RData")
```
