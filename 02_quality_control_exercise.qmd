---
title: "Chapter 2 Quality Control"
execute:
  warning: false
  message: false
---

```{r}
#| message: false
# libraries for this chapter
library(tidyverse)
library(Seurat)
library(data.table)
```

# Load RData

Load the RData which contains all files from previous chapter.

```{r}
load("data/intermediate_data/chapter1.RData")
```

# 1. Metrics for quality control

When creating a Seurat object, Seurat automatically creates some metadata for each cell. This information is stored in the `meta.data`.

```{r}
rna@meta.data %>% head()
```

# 2. Calculate mitochondrial percentage per cell

Seurat has a convenient function, `PercentageFeatureSet`, to calculate the mitochondrial percentage in a cell.

```{r}
rna[["percent.mt"]] <- PercentageFeatureSet(rna, pattern = "^MT.")
```

# 3. Assessing the quality metrics

## 3.1 Remove Multiplet and Undetermined

```{r fig.height=15, fig.width=20}
# plot
rna@meta.data %>% 
  group_by(Sample_Name) %>% 
  tally() %>% 
  mutate(pct = n/sum(n)) %>% 
  ggplot(aes(x=Sample_Name, y=n, fill= Sample_Name)) + 
  geom_bar(stat = "identity") +
  geom_text(aes(y = n,
                label = paste0(n, "\n", scales::percent(pct)),
                vjust= -0.5, size = 2.5), show.legend = FALSE) + 
  theme_classic()
```

Multiplet and Undetermined are removed from the downstream analysis by `subset`.

```{r}
# remove multiplets and undetermiend
rna <- subset(rna, subset = Sample_Name %in% c("Multiplet", "Undetermined"), invert = T)
```

## 3.2 `nCount_RNA` UMI counts per cell

```{r}
rna@meta.data %>% 
  ggplot(aes(color=Sample_Name, x=nCount_RNA, fill= Sample_Name)) + 
  geom_density(alpha = 0.2) + 
  scale_x_log10() + 
  theme_classic() +
  ylab("Cell density") +
  ggtitle("nCount_RNA")
```

## 3.3 `nFeature_RNA` Gene counts per cell

```{r}
rna@meta.data %>% 
  ggplot(aes(color=Sample_Name, x=nFeature_RNA, fill= Sample_Name)) + 
  geom_density(alpha = 0.2) + 
  scale_x_log10() + 
  theme_classic() +
  ylab("Cell density") +
  ggtitle("nFeature_RNA")
```

## 3.4 `percent.mt` Mitochondrial percentage per cell

```{r}
rna@meta.data %>% 
  ggplot(aes(color=Sample_Name, x=percent.mt, fill=Sample_Name)) + 
  geom_density(alpha = 0.2) + 
  theme_classic() +
  ggtitle("percent.mt")
```

## 3.5 Combine metrics to come up the filtering threshold

```{r}
#| warning: false
rna@meta.data %>% 
  ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) + 
  geom_point() + 
  scale_colour_gradient(low = "gray90", high = "black") +
  stat_smooth(method=lm) +
  scale_x_log10() + 
  scale_y_log10() + 
  theme_classic() +
  geom_vline(xintercept = 500, colour = "red") +
  geom_hline(yintercept = 300, colour = "red") +
  facet_wrap(~Sample_Name) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

::: callout-note
# @QUESTION1

Look at the bottom right quadrant. Do you think these cells are high quality cells?
:::

## 3.6 Other kinds of plots for QC

```{r}
# violin plot
Seurat::VlnPlot(rna, features = c("nCount_RNA", 
                                  "nFeature_RNA",
                                  "percent.mt"))
```

```{r}
# scatter plot
Seurat::FeatureScatter(rna, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
```

# 4. Filter

## 4.1 Filter on cells

Based on the quality metrics, we use the following thresholds to filter out low quality cells:

`nCount_RNA` \> 500

`nFeature_RNA` \> 300

`nFeature_RNA` \< 5000

`percent.mt` \< 25%

```{r}
filtered.rna <- subset(x = rna, 
                       subset = (nCount_RNA >= 500) & 
                         (nFeature_RNA >= 300) &
                         (nFeature_RNA <= 5000) &
                         (percent.mt < 25))
```

## 4.2 Filter on genes

We keep only genes that are expressed in **five or more cells**. `GetAssayData` is a convenient command to get information from the Seurat object. We use `GetAssayData` to extract the UMI counts.

```{r}
# Extract counts
counts <- GetAssayData(object = filtered.rna, slot = "counts")

# Output a logical matrix specifying for each gene whether or not 
# there are more than zero counts per cell
nonzero <- counts > 0

# Sum all TRUE values and return TRUE 
# if equal or more than 5 TRUE values per gene
keep_genes <- Matrix::rowSums(nonzero) >= 5

# Only keep those genes
filtered_counts <- counts[keep_genes, ]

# Create Seurat object
filtered.rna <- CreateSeuratObject(filtered_counts, meta.data = filtered.rna@meta.data)
```

# 5. Re-assess metrics

After filtering, we look back to the metrics to ensure the filtered data matches expectations and is suitable for downstream analysis. We plot QC metrics using the filtered data.

```{r}
#| warning: false
filtered.rna@meta.data %>% 
  ggplot(aes(x=nCount_RNA, y=nFeature_RNA, color=percent.mt)) + 
  geom_point() + 
  scale_colour_gradient(low = "gray90", high = "black") +
  stat_smooth(method=lm) +
  scale_x_log10() + 
  scale_y_log10() + 
  theme_classic() +
  geom_vline(xintercept = 500, color = "red") +
  geom_hline(yintercept = 300, color = "red") +
  facet_wrap(~Sample_Name)
```

Before filtering:

```{r}
rna@meta.data %>% 
  group_by(Sample_Name) %>% 
  dplyr::summarise(cell_number = length(Sample_Name))
```

After filtering:

```{r}
filtered.rna@meta.data %>% 
  group_by(Sample_Name) %>% 
  dplyr::summarise(cell_number = length(Sample_Name))
```
